<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title></title>
    <link>http://localhost:4000</link>
    <description>
      pikachu987 Technology
    </description>
    
        
            <item>
                <title>swift AccessControl 알아보기</title>
                <link>http://localhost:4000/swift/2018/12/17/swift-accesscontrol/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="access-control-접근-한정자">Access Control 접근 한정자</h2>

<p>class나 struct, enum, extension, method에 접근 한정자를 붙여 모듈 외부에서 사용할수 있거나 클래스 내부에서만 사용하게 할수 있다.<br />
접근한정자의 종류는 open, public, internal, fileprivate, private 이 있다.</p>

<h3 id="open">open</h3>

<p>가장 열려있는 접근 한정자이고 전체적으로는 public과 유사하지만</p>

<ul>
  <li>타모듈에서 만들어진 class의 접근한정자가 open 이면 상속을 할수 있다.</li>
  <li>타모듈에서 만들어진 method의 접근한정자가 open이면 override를 할수 있다.</li>
  <li>같은 모듈에서는 public이나 internal과 동일하다.</li>
</ul>

<h3 id="public">public</h3>

<ul>
  <li>다른 모듈의 public 로 된 클래스를 상속할려고 하면
<code class="highlighter-rouge">Cannot inherit from non-open class '' outside of its defining module</code> 이란 class가 open 되지 않았다는 에러가 나온다.</li>
  <li>다른 모듈의 public로 된 메서드를 override 하려고 하면
<code class="highlighter-rouge">Overriding non-open instance method outside of its defining module</code> 이란 method가 open되지 않았다는 에러가 나온다.</li>
</ul>

<h3 id="internal">internal</h3>

<p>타 모듈에서 internal 접근한정자로 만들어진 클래스를 코드에서는 가져올수 없지만 storyboard, xib에서는 가져올수 있다.</p>

<blockquote>
  <p>xml에서도 internal의 접근한정자는 쓸수 없어야 하는데 xml과 코드에서 타모듈을 가져오는 구조가 달라서 가져올수 있는거 같다.
xml에서 @IBOutlet(Interface Bulider Outlet)로 연결하면 <code class="highlighter-rouge">Use of undeclared type ''</code> 이런 에러가 나온다.</p>
</blockquote>

<p>접근한정자를 지정하지 않았을때 기본적으로 사용되는 접근 수준이고 같은 모듈에서는 자유롭게 사용가능하다.</p>

<h3 id="fileprivate">fileprivate</h3>

<p>타 모듈에서 만들어진 클래스나 메서드를 코드나 storyboard, xib에서 가져올수 없다.<br />
같은 모듈에서 만들어진 fileprivate 접근한정자 클래스를 storyboard, xib에서  <code class="highlighter-rouge">Unknown class 클래스명 in Interface Builder file.</code> 이란 에러가 나온다.<br />
클래스는 같은 파일내에서만 접근가능하고 메서드도 같은 파일 내에서만 접근가능하다.</p>

<h3 id="private">private</h3>

<p>타 모듈에서 만들어진 클래스나 메서드를 코드나 storyboard, xib에서 가져올수 없다.<br />
같은 모듈에서 만들어진 클래스를 xml에서 <code class="highlighter-rouge">Unknown class 클래스명 in Interface Builder file.</code> 이란 에러가 나온다.<br />
클래스는 같은 파일내에서만 접근가능하고 메서드는 같은 블록(클래스) 내에서만 접근가능하다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="k">var</span> <span class="nv">name</span> <span class="o">=</span> <span class="s">""</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">ViewController</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">doSomething</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">"name"</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>같은 파일에서는 이렇게 extension 안에서도 class, struct, enum등 같은 영역에서는 접근 가능하다.</p>

<h3 id="정리">정리</h3>

<h5 id="같은-모듈">같은 모듈</h5>

<h6 id="클래스">클래스</h6>

<ul>
  <li>상속가능: open, public, internal</li>
  <li>접근가능: open, public, internal</li>
  <li>storyboard, xml에서 사용가능: open, public, internal</li>
  <li>같은파일에서 접근 가능: open, public, internal, fileprivate, private</li>
</ul>

<h6 id="메서드">메서드</h6>

<ul>
  <li>오버라이드가능: open, public, internal</li>
  <li>호출가능: open, public, internal</li>
  <li>같은파일에서 호출 가능: open, public, internal, fileprivate</li>
</ul>

<h5 id="타-모듈">타 모듈</h5>

<h6 id="클래스-1">클래스</h6>

<ul>
  <li>상속가능: open</li>
  <li>접근가능: open, public</li>
  <li>xml에서 사용가능: open, public, internal</li>
</ul>

<h6 id="메서드-1">메서드</h6>

<ul>
  <li>오버라이드가능: open</li>
  <li>호출가능: open, public</li>
</ul>

<blockquote>
  <p>open, public, internal은 타모듈을 사용할때 차이가 나누어진다.
fileprivate와 private은 메서드를 호출할때 블럭 내부에서 호출인지 블럭 외부에서 호출인지 차이가 나누어진다.</p>
</blockquote>

<h4 id="set">set</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">internal(set)</span> <span class="k">var</span> <span class="nv">name</span> <span class="o">=</span> <span class="s">"Kim Gwanho"</span>
<span class="nf">fileprivate</span><span class="p">(</span><span class="k">set</span><span class="p">)</span> <span class="k">var</span> <span class="nv">age</span> <span class="o">=</span> <span class="mi">27</span>
<span class="kd">private(set)</span> <span class="k">var</span> <span class="nv">gender</span> <span class="o">=</span> <span class="s">"M"</span>
</code></pre></div></div>

<p>이렇게 접근한정자 뒤에 set을 붙여도 된다.<br />
set을 붙인다는 것은 name이나 age, gender를 접근할때는 internal수준으로 어디서든지 접근할수 있지만 set할때는 접근한정자를 따른다.</p>

<ul>
  <li>name같은 경우는 어디서든지 값을 출력하고 어디서든지 값을 바꿀수 있다.</li>
  <li>age같은 경우는 어디서든지 값을 출력하지만 같은 파일내에서만 값을 바꿀수 있다.</li>
  <li>gender같은 경우는 어디서든지 값을 출력하지만 같은 클래스(블럭) 내부에서만 값을 바꿀수 있다.</li>
</ul>

<h4 id="inheritmodulefromtarget">inheritModuleFromTarget</h4>

<p><img src="/tec/images/2018/12/accessControl/inheritModuleFromTarget.png" alt="Alt Text" /></p>

<blockquote>
  <p>By checking the “Inherited from Target” option the module gets compiled in for the targets I use it in (Target Memberships for swift file and everything works.</p>
</blockquote>

<p>Inherit Module From Target을 체크하면 내가 소속되어있는 타겟 모듈만 기본적으로 선택되고 체크를 안하면 모듈을 직접 넣어줘야 한다.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/swift/2018/12/17/swift-accesscontrol/</guid>
                <description>
                    
                    Swift open, public, internal, fileprivate, private
                    
                </description>
                <pubDate>Mon, 17 Dec 2018 17:00:00 +0900</pubDate>
                <author>gwanho kim</author>
            </item>
        
    
        
            <item>
                <title>swift where의 사용</title>
                <link>http://localhost:4000/swift/2018/12/16/swift-where/</link>
                <content:encoded>
                    <![CDATA[
                    <p>코드를 짜다보면 어려군데에서 where을 사용하고 있다.<br />
where를 사용하는 곳을 정리해보자</p>

<h3 id="for">for</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">130</span><span class="p">]</span>

<span class="k">for</span> <span class="n">element</span> <span class="k">in</span> <span class="n">array</span> <span class="k">where</span> <span class="n">element</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>for문에 where을 추가해서 원하는 값만 동작하게 할수 있다.</p>

<h3 id="switch-case">switch case</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">NetworkType</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">success</span>
    <span class="k">case</span> <span class="n">suspend</span>
    <span class="k">case</span> <span class="nf">error</span><span class="p">(</span><span class="nv">code</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span>

    <span class="k">var</span> <span class="nv">result</span><span class="p">:</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="k">self</span> <span class="p">{</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">success</span><span class="p">:</span>
            <span class="k">return</span> <span class="kc">true</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">suspend</span><span class="p">:</span>
            <span class="k">return</span> <span class="kc">false</span>
        <span class="k">case</span> <span class="o">.</span><span class="nf">error</span><span class="p">(</span><span class="k">let</span> <span class="nv">statusCode</span><span class="p">)</span> <span class="k">where</span> <span class="mi">200</span> <span class="o">&lt;</span> <span class="n">statusCode</span> <span class="o">&amp;&amp;</span> <span class="n">statusCode</span> <span class="o">&lt;</span> <span class="mi">300</span><span class="p">:</span>
            <span class="k">return</span> <span class="kc">true</span>
        <span class="k">default</span><span class="p">:</span>
            <span class="k">return</span> <span class="kc">false</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>case에 where를 넣어서 해당하는 것만 빼낼수 있다.</p>

<h3 id="extension">extension</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">Array</span> <span class="k">where</span> <span class="kt">Element</span> <span class="o">==</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">sum</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">self</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">+</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span><span class="o">.</span><span class="nf">sum</span><span class="p">()</span>
</code></pre></div></div>

<p>extension에 원하는 타입만 받을수 있다.</p>

<h3 id="func">func</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="n">printValue</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">Optional</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">where</span> <span class="kt">T</span><span class="p">:</span> <span class="kt">Equatable</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">self</span><span class="o">.</span><span class="nf">printValue</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span>

<span class="k">self</span><span class="o">.</span><span class="nf">printValue</span><span class="p">(</span><span class="s">"홍길동"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">People</span><span class="p">:</span> <span class="kt">Equatable</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">let</span> <span class="nv">age</span><span class="p">:</span> <span class="kt">Int</span>

    <span class="nf">init</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">age</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="k">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
    <span class="p">}</span>

    <span class="kd">static</span> <span class="kd">func</span> <span class="o">==</span> <span class="p">(</span><span class="nv">lhs</span><span class="p">:</span> <span class="kt">People</span><span class="p">,</span> <span class="nv">rhs</span><span class="p">:</span> <span class="kt">People</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">lhs</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="n">rhs</span><span class="o">.</span><span class="n">name</span> <span class="o">&amp;&amp;</span> <span class="n">lhs</span><span class="o">.</span><span class="n">age</span> <span class="o">==</span> <span class="n">rhs</span><span class="o">.</span><span class="n">age</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">self</span><span class="o">.</span><span class="nf">printValue</span><span class="p">(</span><span class="kt">People</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"홍길동"</span><span class="p">,</span> <span class="nv">age</span><span class="p">:</span> <span class="mi">50</span><span class="p">))</span>
</code></pre></div></div>

<p>func에 원하는 타입만 받을수 있다.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/swift/2018/12/16/swift-where/</guid>
                <description>
                    
                    Swift 여러군데에서 나오는 where을 사용해보자
                    
                </description>
                <pubDate>Sun, 16 Dec 2018 17:00:00 +0900</pubDate>
                <author>gwanho kim</author>
            </item>
        
    
        
            <item>
                <title>swift Higher Order Functions (고차함수), 고차함수 만들기</title>
                <link>http://localhost:4000/swift/2018/12/15/swift-higerorderfunction/</link>
                <content:encoded>
                    <![CDATA[
                    <h3 id="higher-order-functions-사용">Higher Order Functions 사용</h3>

<p>array에 있는 값들을 출력을 할때</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">130</span><span class="p">]</span>

<span class="k">for</span> <span class="n">element</span> <span class="k">in</span> <span class="n">array</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이렇게 한다.<br />
index를 알고 싶으면</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">130</span><span class="p">]</span>

<span class="k">for</span> <span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">element</span><span class="p">)</span> <span class="k">in</span> <span class="n">array</span><span class="o">.</span><span class="nf">enumerated</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"index: </span><span class="se">\(</span><span class="n">index</span><span class="se">)</span><span class="s">, element: </span><span class="se">\(</span><span class="n">element</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이렇게 한다.</p>

<h5 id="foreach">forEach</h5>

<p>이것을 그대로 고차함수로 적용해보면</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">array</span><span class="o">.</span><span class="nf">forEach</span><span class="p">({</span> <span class="nf">print</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="p">})</span>

<span class="n">array</span><span class="o">.</span><span class="nf">enumerated</span><span class="p">()</span><span class="o">.</span><span class="nf">forEach</span><span class="p">({</span> <span class="nf">print</span><span class="p">(</span><span class="s">"index: </span><span class="se">\(</span><span class="nv">$0</span><span class="o">.</span><span class="n">offset</span><span class="se">)</span><span class="s">, element: </span><span class="se">\(</span><span class="nv">$0</span><span class="o">.</span><span class="n">element</span><span class="se">)</span><span class="s">"</span><span class="p">)</span> <span class="p">})</span>
</code></pre></div></div>

<p>$0 대신 변수명을 적을수도 있다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">array</span><span class="o">.</span><span class="nf">forEach</span><span class="p">({</span> <span class="n">element</span> <span class="k">in</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
<span class="p">})</span>

<span class="n">array</span><span class="o">.</span><span class="nf">enumerated</span><span class="p">()</span><span class="o">.</span><span class="nf">forEach</span><span class="p">({</span> <span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">element</span><span class="p">)</span> <span class="k">in</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"index: </span><span class="se">\(</span><span class="n">index</span><span class="se">)</span><span class="s">, element: </span><span class="se">\(</span><span class="n">element</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div></div>

<p>forEach는 for문과 비슷하게 element값을 반복할수 있다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">dict</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">AnyObject</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">"name"</span><span class="p">:</span> <span class="s">"Kim"</span> <span class="k">as</span> <span class="kt">AnyObject</span><span class="p">,</span>
    <span class="s">"age"</span><span class="p">:</span> <span class="mi">27</span> <span class="k">as</span> <span class="kt">AnyObject</span>
<span class="p">]</span>

<span class="n">dict</span><span class="o">.</span><span class="nf">forEach</span><span class="p">({</span> <span class="nf">print</span><span class="p">(</span><span class="s">"key: </span><span class="se">\(</span><span class="nv">$0</span><span class="o">.</span><span class="n">key</span><span class="se">)</span><span class="s">, value: </span><span class="se">\(</span><span class="nv">$0</span><span class="o">.</span><span class="n">value</span><span class="se">)</span><span class="s">"</span><span class="p">)</span> <span class="p">})</span>
</code></pre></div></div>

<p>딕셔너리 형태도 사용가능하다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">dict</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">AnyObject</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">"name"</span><span class="p">:</span> <span class="s">"Kim"</span> <span class="k">as</span> <span class="kt">AnyObject</span><span class="p">,</span>
    <span class="s">"age"</span><span class="p">:</span> <span class="mi">27</span> <span class="k">as</span> <span class="kt">AnyObject</span>
<span class="p">]</span>
<span class="n">dict</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="nf">forEach</span><span class="p">({</span> <span class="nf">print</span><span class="p">(</span><span class="s">"key: </span><span class="se">\(</span><span class="nv">$0</span><span class="se">)</span><span class="s">, value: </span><span class="se">\(</span><span class="n">dict</span><span class="p">[</span><span class="nv">$0</span><span class="p">]</span><span class="se">)</span><span class="s">"</span><span class="p">)</span> <span class="p">})</span>
</code></pre></div></div>

<h5 id="filter">filter</h5>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">filterArray</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="nf">filter</span> <span class="p">({</span> <span class="n">value</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="k">in</span>
    <span class="k">return</span> <span class="n">value</span> <span class="o">&lt;</span> <span class="mi">10</span>
<span class="p">})</span>
</code></pre></div></div>

<p>필터를 줄수 있다. 더 간단하게 줄이면</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">filterArray</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="nf">filter</span><span class="p">({</span> <span class="nv">$0</span> <span class="o">&lt;</span> <span class="mi">10</span> <span class="p">})</span>
</code></pre></div></div>

<h5 id="map">map</h5>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">mapArray</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="nf">map</span><span class="p">({</span> <span class="s">"</span><span class="se">\(</span><span class="nv">$0</span><span class="se">)</span><span class="s">"</span> <span class="p">})</span>
</code></pre></div></div>

<p>이렇게 하면 타입이 [Int]였던게 [String]으로 리턴되어서 나온다.</p>

<h5 id="compactmap">compactMap</h5>

<blockquote>
  <p>flatMap은 Swift 4.1부터 deprecated되었다.</p>

  <p><code class="highlighter-rouge">'flatMap' is deprecated: Please use compactMap(_:) for the case where closure returns an optional value</code></p>
</blockquote>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">compactMapArray</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="nf">compactMap</span><span class="p">({</span> <span class="s">"</span><span class="se">\(</span><span class="nv">$0</span><span class="se">)</span><span class="s">"</span> <span class="p">})</span>
</code></pre></div></div>

<p>map과 마찬가지 타입이 [Int]였던게 [String]으로 리턴되어서 나온다.<br />
map과 compactMap의 차이점은</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">array</span> <span class="o">=</span> <span class="p">[</span><span class="s">"1"</span><span class="p">,</span> <span class="s">"hi"</span><span class="p">,</span> <span class="s">"2"</span><span class="p">,</span> <span class="s">"good"</span><span class="p">]</span>

<span class="k">let</span> <span class="nv">mapArray</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="nf">map</span><span class="p">({</span> <span class="kt">Int</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="p">})</span>
<span class="k">let</span> <span class="nv">compactMapArray</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="nf">compactMap</span><span class="p">({</span> <span class="kt">Int</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="p">})</span>

<span class="nf">print</span><span class="p">(</span><span class="s">"mapArray: </span><span class="se">\(</span><span class="n">mapArray</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="s">"compactMapArray: </span><span class="se">\(</span><span class="n">compactMapArray</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mapArray: [Optional(1), nil, Optional(2), nil]
compactMapArray: [1, 2]
</code></pre></div></div>

<p>map은 옵셔널로 리턴을 했을때는 옵셔널의 형태로 반환이 된다.<br />
compactMap은 옵셔널로 리턴을 했을때 nil의 값이 제외되고 옵셔널이 벗겨져서 나오게 된다.<br />
두 함수 다 필요한 상황들이 있다.</p>

<h5 id="sorted">sorted</h5>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">array</span><span class="o">.</span><span class="nf">sorted</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="p">{</span> <span class="nv">$0</span> <span class="o">&gt;</span> <span class="nv">$1</span> <span class="p">})</span>
</code></pre></div></div>

<p>고차함수로 소트를 할수 있다.</p>

<h5 id="reduce">reduce</h5>

<p>reduce는 초기값을 줄수 있고 어떻게 계산을 할지 정의할수 있다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">value</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="mi">1000000</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="k">in</span>
    <span class="k">return</span> <span class="n">result</span> <span class="o">+</span> <span class="n">value</span>
<span class="p">}</span>
</code></pre></div></div>

<p>더 간단하게 하면</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">value2</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="mi">1000000</span><span class="p">,</span> <span class="p">{</span> <span class="nv">$0</span> <span class="o">+</span> <span class="nv">$1</span> <span class="p">})</span>
</code></pre></div></div>

<p>더 간단하게 하면</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">value3</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="mi">1000000</span><span class="p">,</span> <span class="o">+</span><span class="p">)</span>
</code></pre></div></div>

<p>이렇게 까지 생략할수 있다.</p>

<h5 id="chaining">Chaining</h5>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">130</span><span class="p">]</span>

<span class="k">let</span> <span class="nv">value</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="nf">filter</span><span class="p">({</span> <span class="nv">$0</span> <span class="o">&lt;</span> <span class="mi">10</span> <span class="p">})</span>
            <span class="o">.</span><span class="nf">sorted</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="p">{</span> <span class="nv">$0</span> <span class="o">&gt;</span> <span class="nv">$1</span> <span class="p">})</span>
            <span class="o">.</span><span class="nf">map</span><span class="p">({</span> <span class="s">"</span><span class="se">\(</span><span class="nv">$0</span><span class="se">)</span><span class="s">"</span> <span class="p">})</span>
            <span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="s">""</span><span class="p">,</span> <span class="p">{</span> <span class="s">"</span><span class="se">\(</span><span class="nv">$0</span><span class="se">)\(</span><span class="nv">$1</span><span class="se">)</span><span class="s">"</span> <span class="p">})</span>
<span class="nf">print</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>75321
</code></pre></div></div>

<p>array중에 10 이하인것들만 가져오면 1, 2, 3, 5, 7<br />
sorted로 큰수로 오름차순으로 7, 5, 3, 2, 1<br />
map으로 String을 만들면 “7”, “5”, “3”, “2”, “1”<br />
reduce로 문자열을 합치면 75321이 된다.</p>

<h3 id="higher-order-functions-만들기">Higher Order Functions 만들기</h3>

<p>map의 형태를 보면</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">struct</span> <span class="kt">Array</span><span class="o">&lt;</span><span class="kt">Element</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="kd">public</span> <span class="kd">func</span> <span class="n">map</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nv">transform</span><span class="p">:</span> <span class="p">(</span><span class="kt">Element</span><span class="p">)</span> <span class="k">throws</span> <span class="o">-&gt;</span> <span class="kt">T</span><span class="p">)</span> <span class="k">rethrows</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">T</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이렇게 되어 있다.<br />
이것을 보고 customMap을 만들어보면</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">Array</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="n">customMap</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nv">transform</span><span class="p">:</span> <span class="p">(</span><span class="kt">Element</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">T</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">T</span><span class="p">]</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nv">array</span> <span class="o">=</span> <span class="p">[</span><span class="kt">T</span><span class="p">]()</span>
        <span class="k">for</span> <span class="n">element</span> <span class="k">in</span> <span class="k">self</span> <span class="p">{</span>
            <span class="n">array</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">transform</span><span class="p">(</span><span class="n">element</span><span class="p">))</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">array</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이렇게 만들수 있다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">Array</span> <span class="k">where</span> <span class="kt">Element</span> <span class="o">==</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">multiplication</span><span class="p">(</span><span class="n">_</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nv">array</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Element</span><span class="p">]()</span>
        <span class="k">for</span> <span class="n">element</span> <span class="k">in</span> <span class="k">self</span> <span class="p">{</span>
            <span class="n">array</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">element</span> <span class="o">*</span> <span class="n">value</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">array</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>간단하게 이렇게 곱셈을 할수 있는 함수를 만들어 볼수 있다.</p>

<blockquote>
  <p>예제가 잘 생각이 안난다.</p>
</blockquote>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/swift/2018/12/15/swift-higerorderfunction/</guid>
                <description>
                    
                    Swift Higher Order Functions 에 대해 알아보고 만들어보자
                    
                </description>
                <pubDate>Sat, 15 Dec 2018 17:00:00 +0900</pubDate>
                <author>gwanho kim</author>
            </item>
        
    
        
            <item>
                <title>swift AutoLayout의 활용</title>
                <link>http://localhost:4000/swift/2018/12/14/swift-autolayout/</link>
                <content:encoded>
                    <![CDATA[
                    <h3 id="intrinsic-content-size">Intrinsic Content Size</h3>

<p><img src="/tec/images/2018/12/autolayout/ex1.png" alt="Alt Text" /></p>

<p>이렇게 슈퍼뷰의 길이보다 서브뷰의 길이가 작은 경우 Label의 길이를 글자에 대해 크기를 변경하려면</p>

<p><img src="/tec/images/2018/12/autolayout/ex2.png" alt="Alt Text" /></p>

<p>Label의 Content Hugging Priority에 Horizontal을 조절하면 된다.</p>

<p><img src="/tec/images/2018/12/autolayout/ex3.png" alt="Alt Text" /></p>

<p>이렇게 슈퍼뷰의 길이보다 서브뷰의 길이가 큰 경우 Label의 길이를 글자에 대해 크기를 변경하려면</p>

<p><img src="/tec/images/2018/12/autolayout/ex4.png" alt="Alt Text" /></p>

<p>Label의 Content Compression Resistance Priority를 조절하면 된다.</p>

<h5 id="hugging-priority">Hugging Priority</h5>

<p>슈퍼뷰의 크기가 서브뷰의 크기보다 큰 경우 서브뷰의 우선순위를 줘서 우선순위에 따라 영역이 컨텐츠에 대해 최소로 잡히거나 남은 영역에 대해 최대로 잡히게 할수있다.</p>

<h5 id="compression-resistance-priority">Compression Resistance Priority</h5>

<p>슈퍼뷰의 크기가 서브뷰의 크기보다 작은 경우 서브뷰의 우선순위를 줘서 우선순위에 따라 서브뷰 끼리의 컨텐츠 영역을 짤라서 더 많이 보이게 할수있다.</p>

<h5 id="horizontal">Horizontal</h5>

<p>수평의 뷰(좌,우) 에 적용이 된다.</p>

<h5 id="vertical">Vertical</h5>

<p>수직의 뷰(위,아래) 에 적용이 된다.</p>

<p><br /><br /><br /><br /></p>

<h3 id="autolayout">AutoLayout</h3>

<p><img src="/tec/images/2018/12/autolayout/ex5.png" alt="Alt Text" /></p>

<h5 id="firstitem">FirstItem</h5>

<p>AutoLayout가 적용된 첫번째 컨텐츠이다.</p>

<h5 id="seconditem">SecondItem</h5>

<p>AutoLayout가 적용된 두번째 컨텐츠이다.<br />
고정값으로 준 Width나 Height같이 컨텐츠의 연결이 필요없는 오토레이아웃은 SecondItem이 필요없다.</p>

<h5 id="relation">Relation</h5>

<p>Greater Than or Equal (같거나 클수 있다), Less Than or Equal (같거나 작을수 있다), Equal(같다) 를 적용할수 있다.<br />
예를들어 superView에 view를 넣고 상하좌우에 constant를 0만 주었을때는 view가 superView의 크기를 따라가는데<br />
Relation을 주면 view의 컨텐츠의 길이가 superView의 크기보다 크지 않을때까지 view의 컨텐츠 크기를 따라가다가 superView의 크기보다 클때 superView의 크기를 따라가게 할수있다.</p>

<h5 id="constant">Constant</h5>

<p>오토레이아웃의 값을 줄수있다.</p>

<h5 id="prioirty">Prioirty</h5>

<p>오토레이아웃 끼리 우선순위를 줄수 있다.<br />
다양한 해상도에서 우선적으로 오토레이아웃이 적용을 할수 있기에 아주 유용하다.<br />
오트레이아웃의 충돌 에러를 처리할수 있다.</p>

<h5 id="multiplier">Multiplier</h5>

<p>상대적인 비율로 레이아웃을 맞출 수 있다.<br />
다양한 해상도에서 superView와 비율로 width, height를 맞추기에 유용하다.</p>

<h5 id="identifier">Identifier</h5>

<p>오토레이아웃이 충돌이 났을때 명확하게 어떤 오토레이아웃이 에러가 난지 추적이 가능하다.<br />
코드로 identifier로 쉽게 오토레이아웃에 접근이 가능하다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">self</span><span class="o">.</span><span class="n">nameLabel</span><span class="o">.</span><span class="n">constraints</span><span class="o">.</span><span class="nf">forEach</span><span class="p">({</span>
    <span class="k">if</span> <span class="nv">$0</span><span class="o">.</span><span class="n">identifier</span> <span class="o">==</span> <span class="s">"nameLabelTopConstraint"</span> <span class="p">{</span>

    <span class="p">}</span>
<span class="p">})</span>
</code></pre></div></div>

<h3 id="오토레이아웃-적용">오토레이아웃 적용</h3>

<p>오토레이아웃은 Storyboard나 Xib로 주는 방법이 있고 코드로 오토레이아웃을 주는 방법이 있다.<br />
코드로 오토레이아웃 주는 방법은 여러가지가 있는데</p>

<ul>
  <li>NSLayoutConstraint</li>
  <li>Anchor</li>
  <li>Visual Format</li>
  <li>SnapKit (라이브러리)</li>
</ul>

<p>가 있다.<br />
SnapKit는 라이브러리인데 아주좋다. 자주 사용이 된다.</p>

<h5 id="nslayoutconstraint">NSLayoutConstraint</h5>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">NSLayoutConstraint</span><span class="p">(</span>
    <span class="nv">item</span><span class="p">:</span> <span class="kt">Any</span><span class="p">,</span>
    <span class="nv">attribute</span><span class="p">:</span> <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="kt">Attribute</span><span class="p">,</span>
    <span class="nv">relatedBy</span><span class="p">:</span> <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="kt">Relation</span><span class="p">,</span>
    <span class="nv">toItem</span><span class="p">:</span> <span class="kt">Any</span><span class="p">?,</span>
    <span class="nv">attribute</span><span class="p">:</span> <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="kt">Attribute</span><span class="p">,</span>
    <span class="nv">multiplier</span><span class="p">:</span> <span class="kt">CGFloat</span><span class="p">,</span>
    <span class="nv">constant</span><span class="p">:</span> <span class="kt">CGFloat</span><span class="p">)</span>
</code></pre></div></div>

<p>이렇게 생겼다.<br />
스토리보드와 비슷하게 firstItem은 첫번째 인자인 item에 넣고 secondItem은 toItem에 넣으면 된다.<br />
고정으로 주는 width나 height 같은 경우는 toItem에 nil값을 주면 된다.<br />
코드로 오토레이아웃을 줄때는 오토레이아웃을 주려는 뷰의 translatesAutoresizingMaskIntoConstraints을 false로 해야한다.<br />
relatedBy 는 Relation과 동일하고 attribute는<br /></p>

<ul>
  <li>leading</li>
  <li>trailing</li>
  <li>top</li>
  <li>bottom</li>
  <li>centerX</li>
  <li>centerY</li>
  <li>width</li>
  <li>height</li>
  <li>left</li>
  <li>right</li>
</ul>

<p>등의 옵션이 있다. <br />
item의 attribute와 toItem의 attribute에 대해 연결이 된다.<br />
예를들어 왼쪽 label과 오른쪽 label을 연결을 하려면<br /></p>

<p>‘leading’ - label1 - ‘trailing’ ‘leading’ - label2 - ‘trailing’</p>

<p>으로 된다.</p>

<blockquote>
  <p>leading vs left / trailing vs right
leading는 항상 왼쪽이 아니다. 언어(Locale)에 따라 오른쪽이 될수 있다.</p>
</blockquote>

<p>label1의 trailing과 label2의 leading이 연결이 된다.<br />
multiplier도 스토리보드에서 하던거와 비슷하고 constant도 동일하다.<br />
priority는</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">constraint</span> <span class="o">=</span> <span class="kt">NSLayoutConstraint</span><span class="p">(</span>
    <span class="nv">item</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">label1</span><span class="p">,</span>
    <span class="nv">attribute</span><span class="p">:</span> <span class="o">.</span><span class="n">trailing</span><span class="p">,</span>
    <span class="nv">relatedBy</span><span class="p">:</span> <span class="o">.</span><span class="n">equal</span><span class="p">,</span>
    <span class="nv">toItem</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">label2</span><span class="p">,</span>
    <span class="nv">attribute</span><span class="p">:</span> <span class="o">.</span><span class="n">leading</span><span class="p">,</span>
    <span class="nv">multiplier</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nv">constant</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">constraint</span><span class="o">.</span><span class="n">priority</span> <span class="o">=</span> <span class="kt">UILayoutPriority</span><span class="p">()</span>
</code></pre></div></div>

<p>이렇게 줄수 있다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="nf">addConstraint</span><span class="p">(</span><span class="n">constraint</span><span class="p">)</span>
</code></pre></div></div>

<p>이나</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="nf">addConstraints</span><span class="p">([</span><span class="n">constraint</span><span class="p">])</span>
</code></pre></div></div>

<p>이렇게 view에 오토레이아웃을 적용할수 있다.</p>

<h5 id="anchor">Anchor</h5>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">self</span><span class="o">.</span><span class="n">label1</span><span class="o">.</span><span class="n">leftAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">label2</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">isActive</span> <span class="o">=</span> <span class="kc">true</span>
</code></pre></div></div>

<p>이렇게 NSLayoutConstraint보다 코드량이 줄었다.<br />
뷰에</p>

<ul>
  <li>leftAnchor</li>
  <li>rightAnchor</li>
  <li>topAnchor</li>
  <li>bottomAnchor</li>
  <li>leadingAnchor</li>
  <li>trailingAnchor</li>
  <li>centerYAnchor</li>
  <li>centerXAnchor</li>
  <li>widthAnchor</li>
  <li>heightAnchor</li>
</ul>

<p>등의 많은 프로퍼티가 있다.<br />
프로퍼티들은 NSLayoutXAxisAnchor, NSLayoutYAxisAnchor, NSLayoutDimension의 타입이고<br />
타입들은 여러 constraint의 함수를 equalTo, lessThanOrEqual, greaterThanOrEqualTo 등의 여러가지 인자가로 오버로드하고 있다.<br />
단점은 iOS 9.0 이상부터 지원이 된다. 만약 iOS 9.0이하를 지원하는 앱이라면 분기를 하거나 다른 방법을 사용해야 한다.</p>

<h5 id="visual-format">Visual Format</h5>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">constraints</span><span class="p">(</span>
    <span class="n">withVisualFormat</span> <span class="nv">format</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span>
    <span class="n">options</span> <span class="nv">opts</span><span class="p">:</span> <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="kt">FormatOptions</span> <span class="o">=</span> <span class="p">[],</span>
    <span class="nv">metrics</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span> <span class="p">:</span> <span class="kt">Any</span><span class="p">]?,</span>
    <span class="nv">views</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span> <span class="p">:</span> <span class="kt">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">NSLayoutConstraint</span><span class="p">]</span>
</code></pre></div></div>

<p>이렇게 생겼다.<br />
사용방법은</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="nf">addConstraints</span><span class="p">(</span>
    <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">constraints</span><span class="p">(</span><span class="nv">withVisualFormat</span><span class="p">:</span> <span class="s">"H:|-0-[webView]-0-|"</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="p">[],</span> <span class="nv">metrics</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">views</span><span class="p">:</span> <span class="p">[</span><span class="s">"webView"</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">webView</span><span class="p">])</span>
<span class="p">)</span>

<span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="nf">addConstraints</span><span class="p">(</span>
    <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">constraints</span><span class="p">(</span><span class="nv">withVisualFormat</span><span class="p">:</span> <span class="s">"H:|-0-[toolView]-0-|"</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="p">[],</span> <span class="nv">metrics</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">views</span><span class="p">:</span> <span class="p">[</span><span class="s">"toolView"</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">toolView</span><span class="p">])</span>
<span class="p">)</span>

<span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="nf">addConstraints</span><span class="p">(</span>
    <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">constraints</span><span class="p">(</span><span class="nv">withVisualFormat</span><span class="p">:</span> <span class="s">"V:[toolView]-0-|"</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="p">[],</span> <span class="nv">metrics</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">views</span><span class="p">:</span> <span class="p">[</span><span class="s">"toolView"</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">toolView</span><span class="p">])</span>
<span class="p">)</span>

<span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="nf">addConstraints</span><span class="p">(</span>
    <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">constraints</span><span class="p">(</span><span class="nv">withVisualFormat</span><span class="p">:</span> <span class="s">"V:|[topGuide]-0-[webView]-0-[toolView]|"</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="p">[],</span> <span class="nv">metrics</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">views</span><span class="p">:</span> <span class="p">[</span><span class="s">"webView"</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">webView</span><span class="p">,</span> <span class="s">"toolView"</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">toolView</span><span class="p">,</span> <span class="s">"topGuide"</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">topLayoutGuide</span><span class="p">])</span>
<span class="p">)</span>

<span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="nf">addConstraints</span><span class="p">(</span>
    <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">constraints</span><span class="p">(</span><span class="nv">withVisualFormat</span><span class="p">:</span> <span class="s">"H:[webView]-(&lt;=1)-[indicatorView]"</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span><span class="o">.</span><span class="n">alignAllCenterY</span><span class="p">,</span> <span class="nv">metrics</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">views</span><span class="p">:</span> <span class="p">[</span><span class="s">"webView"</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">webView</span><span class="p">,</span> <span class="s">"indicatorView"</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">indicatorView</span><span class="p">])</span>
<span class="p">)</span>

<span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="nf">addConstraints</span><span class="p">(</span>
    <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">constraints</span><span class="p">(</span><span class="nv">withVisualFormat</span><span class="p">:</span> <span class="s">"V:[webView]-(&lt;=1)-[indicatorView]"</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span><span class="o">.</span><span class="n">alignAllCenterX</span><span class="p">,</span> <span class="nv">metrics</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">views</span><span class="p">:</span> <span class="p">[</span><span class="s">"webView"</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">webView</span><span class="p">,</span> <span class="s">"indicatorView"</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">indicatorView</span><span class="p">])</span>
<span class="p">)</span>
</code></pre></div></div>

<p>이렇게 사용할 수 있다.<br />
String으로 포맷을 지정해서 constraints를 만드는 것이다.<br />
장점은 “V:|[topGuide]-0-[webView]-0-[toolView]|” 이런식으로 여러개의 뷰들을 한번에 연결할수 있다.<br />
여러가지 포맷형태가 있다.</p>

<p><a href="https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/index.html#//apple_ref/doc/uid/TP40010853-CH7-SW1">developer.apple.com</a></p>

<h5 id="snapkit">SnapKit</h5>

<p><a href="https://github.com/SnapKit/SnapKit">SnapKit</a></p>

<p>아주 간단하게 되어있다.<br />
Objectvie-C에서는 <a href="https://github.com/SnapKit/Masonry">Masonry</a> 를 쓴다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">imageView</span><span class="o">.</span><span class="n">snp</span><span class="o">.</span><span class="nf">makeConstraints</span><span class="p">({</span> <span class="p">(</span><span class="n">make</span><span class="p">)</span> <span class="k">in</span>
    <span class="n">make</span><span class="o">.</span><span class="n">edges</span><span class="o">.</span><span class="nf">equalToSuperview</span><span class="p">()</span>
<span class="p">})</span>

<span class="n">view</span><span class="o">.</span><span class="n">snp</span><span class="o">.</span><span class="nf">makeConstraints</span><span class="p">({</span> <span class="p">(</span><span class="n">make</span><span class="p">)</span> <span class="k">in</span>
    <span class="n">make</span><span class="o">.</span><span class="n">center</span><span class="o">.</span><span class="nf">equalToSuperview</span><span class="p">()</span>
<span class="p">})</span>

<span class="n">view</span><span class="o">.</span><span class="n">snp</span><span class="o">.</span><span class="nf">makeConstraints</span><span class="p">({</span> <span class="p">(</span><span class="n">make</span><span class="p">)</span> <span class="k">in</span>
    <span class="n">make</span><span class="o">.</span><span class="n">centerX</span><span class="o">.</span><span class="nf">equalTo</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">containerView</span><span class="o">.</span><span class="n">snp</span><span class="o">.</span><span class="n">centerX</span><span class="p">)</span>
    <span class="n">make</span><span class="o">.</span><span class="n">bottom</span><span class="o">.</span><span class="nf">equalTo</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">containerView</span><span class="o">.</span><span class="n">snp</span><span class="o">.</span><span class="n">top</span><span class="p">)</span><span class="o">.</span><span class="nf">inset</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">)</span>
    <span class="n">make</span><span class="o">.</span><span class="n">width</span><span class="o">.</span><span class="nf">equalTo</span><span class="p">(</span><span class="mi">62</span><span class="p">)</span>
    <span class="n">make</span><span class="o">.</span><span class="n">height</span><span class="o">.</span><span class="nf">equalTo</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
<span class="p">})</span>

<span class="n">view</span><span class="o">.</span><span class="n">snp</span><span class="o">.</span><span class="nf">makeConstraints</span><span class="p">({</span> <span class="p">(</span><span class="n">make</span><span class="p">)</span> <span class="k">in</span>
    <span class="n">make</span><span class="o">.</span><span class="n">centerX</span><span class="o">.</span><span class="nf">equalTo</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">containerView</span><span class="o">.</span><span class="n">snp</span><span class="o">.</span><span class="n">centerX</span><span class="p">)</span>
    <span class="n">make</span><span class="o">.</span><span class="n">bottom</span><span class="o">.</span><span class="nf">equalTo</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">containerView</span><span class="o">.</span><span class="n">snp</span><span class="o">.</span><span class="n">top</span><span class="p">)</span><span class="o">.</span><span class="nf">inset</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">)</span>
    <span class="n">make</span><span class="o">.</span><span class="n">width</span><span class="o">.</span><span class="nf">equalTo</span><span class="p">(</span><span class="mi">62</span><span class="p">)</span>
    <span class="n">make</span><span class="o">.</span><span class="n">height</span><span class="o">.</span><span class="nf">equalTo</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div></div>

<p>개인적으로 앱에 적용한 코드들을 그대로 붙여넣었는데 아주 간단하게 사용할수 있다.</p>

<h3 id="뷰의-autolayout-animation">뷰의 AutoLayout Animation</h3>

<p>Storyboard에서 만든 오토레이아웃을 뷰컨트롤러 클래스 파일에 인터페이스 빌더 프로퍼티로 연결을 하면 이렇게 된다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">leftConstraint</span><span class="p">:</span> <span class="kt">NSLayoutConstraint</span><span class="o">!</span>
</code></pre></div></div>

<p>leftConstraint값에 constant값을 변경을 하게 되면 그 값으로 바로 변경이 된다.<br />
여기서 애니메이션을 주려면</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">self</span><span class="o">.</span><span class="n">leftConstraint</span><span class="o">.</span><span class="n">constant</span> <span class="o">=</span> <span class="mi">100</span>

<span class="kt">UIView</span><span class="o">.</span><span class="nf">animate</span><span class="p">(</span><span class="nv">withDuration</span><span class="p">:</span> <span class="mf">0.3</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="nf">layoutIfNeeded</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이렇게 하면 0.3초동안 애니메이션이 적용이 된다.<br />
뷰의 메서드 중에</p>

<ul>
  <li>setNeedsLayout</li>
</ul>

<p>해당 뷰와 하위 뷰를 다시 그려야한다는걸 알려준다.<br />
즉각적인 업데이트를 하지는 않지만 다음 업데이트 주기를 기다림. 모든 레이아웃 업데이트를 하나의 업데이트 주기로 통합 가능<br />
needLayout 플래그를 true로 바꿔줌<br />
postion이나 layout값을 변경하는 코드와 실제로 변경되는 시점에는 시간차가 있어서 업데이트 주기가 있다.</p>

<ul>
  <li>leyoutIfNeeded</li>
</ul>

<p>업데이트 주기를 기다리지 않고 즉시 업데이트한다.</p>

<ul>
  <li>layoutSubviews</li>
</ul>

<p>bounds 사이즈 변경되거나 가로세로 변화, layer변화나 setNeedsLayout, leyoutIfNeeded 호출될때 불려진다.</p>

<p><br /></p>

<p>이상으로 오토레이아웃을 활용해보았다.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/swift/2018/12/14/swift-autolayout/</guid>
                <description>
                    
                    Swift AutoLayout의 Priority, Relation, 코드로 만들기, SnapKit
                    
                </description>
                <pubDate>Fri, 14 Dec 2018 17:00:00 +0900</pubDate>
                <author>gwanho kim</author>
            </item>
        
    
        
            <item>
                <title>swift blocking, non-blocking</title>
                <link>http://localhost:4000/swift/2018/12/13/swift-blocking/</link>
                <content:encoded>
                    <![CDATA[
                    <h4 id="blocking">blocking</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Network</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">isLoading</span> <span class="o">=</span> <span class="kc">false</span>

    <span class="kd">func</span> <span class="nf">blocking</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"start date: </span><span class="se">\(</span><span class="kt">Date</span><span class="p">()</span><span class="o">.</span><span class="n">timeIntervalSince1970</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
        <span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"end date: </span><span class="se">\(</span><span class="kt">Date</span><span class="p">()</span><span class="o">.</span><span class="n">timeIntervalSince1970</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Example</span> <span class="p">{</span>

    <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">network</span> <span class="o">=</span> <span class="kt">Network</span><span class="p">()</span>

        <span class="k">let</span> <span class="nv">result</span> <span class="o">=</span> <span class="n">network</span><span class="o">.</span><span class="nf">blocking</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"complete </span><span class="se">\(</span><span class="n">result</span><span class="se">)</span><span class="s"> date: </span><span class="se">\(</span><span class="kt">Date</span><span class="p">()</span><span class="o">.</span><span class="n">timeIntervalSince1970</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">start</span> <span class="nv">date</span><span class="p">:</span> <span class="mf">1544249905.254097</span>
<span class="n">end</span> <span class="nv">date</span><span class="p">:</span> <span class="mf">1544249906.254911</span>
<span class="n">complete</span> <span class="kc">true</span> <span class="nv">date</span><span class="p">:</span> <span class="mf">1544249906.25496</span>
</code></pre></div></div>

<p>블러킹은 함수를 호출했을때 결과가 나올때까지 함수를 반환하지 않는다.</p>

<h4 id="non-blocking">non-blocking</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Network</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">isLoading</span> <span class="o">=</span> <span class="kc">false</span>

    <span class="kd">func</span> <span class="nf">nonBlocking</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">DispatchQueue</span><span class="o">.</span><span class="nf">global</span><span class="p">()</span><span class="o">.</span><span class="nf">asyncAfter</span><span class="p">(</span><span class="nv">deadline</span><span class="p">:</span> <span class="o">.</span><span class="nf">now</span><span class="p">()</span> <span class="o">+</span> <span class="mf">0.1</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">isLoading</span> <span class="o">=</span> <span class="kc">true</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"start date: </span><span class="se">\(</span><span class="kt">Date</span><span class="p">()</span><span class="o">.</span><span class="n">timeIntervalSince1970</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
            <span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
            <span class="k">self</span><span class="o">.</span><span class="n">isLoading</span> <span class="o">=</span> <span class="kc">false</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"end date: </span><span class="se">\(</span><span class="kt">Date</span><span class="p">()</span><span class="o">.</span><span class="n">timeIntervalSince1970</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Example</span> <span class="p">{</span>

    <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">network</span> <span class="o">=</span> <span class="kt">Network</span><span class="p">()</span>

        <span class="n">network</span><span class="o">.</span><span class="nf">nonBlocking</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"complete </span><span class="se">\(</span><span class="n">network</span><span class="o">.</span><span class="n">isLoading</span><span class="se">)</span><span class="s"> date: </span><span class="se">\(</span><span class="kt">Date</span><span class="p">()</span><span class="o">.</span><span class="n">timeIntervalSince1970</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">complete</span> <span class="kc">false</span> <span class="nv">date</span><span class="p">:</span> <span class="mf">1544250075.108323</span>
<span class="n">start</span> <span class="nv">date</span><span class="p">:</span> <span class="mf">1544250075.214427</span>
<span class="n">end</span> <span class="nv">date</span><span class="p">:</span> <span class="mf">1544250076.21679</span>
</code></pre></div></div>

<p>넌블러킹은 함수를 호출했을때 바로 반환하고 다른 작업을 수행할 수 있다.</p>

<h4 id="sync동기">Sync(동기)</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Network</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">isLoading</span> <span class="o">=</span> <span class="kc">false</span>

    <span class="kd">func</span> <span class="nf">sync</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>

        <span class="k">return</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Example</span> <span class="p">{</span>

    <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">network</span> <span class="o">=</span> <span class="kt">Network</span><span class="p">()</span>

        <span class="k">let</span> <span class="nv">value</span> <span class="o">=</span> <span class="n">network</span><span class="o">.</span><span class="nf">sync</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>함수의 작업완료를 기다린다.</p>

<h4 id="async비동기">Async(비동기)</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Network</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">isLoading</span> <span class="o">=</span> <span class="kc">false</span>

    <span class="kd">func</span> <span class="nf">async</span><span class="p">(</span><span class="n">_</span> <span class="nv">callback</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">DispatchQueue</span><span class="o">.</span><span class="nf">global</span><span class="p">()</span><span class="o">.</span><span class="nf">asyncAfter</span><span class="p">(</span><span class="nv">deadline</span><span class="p">:</span> <span class="o">.</span><span class="nf">now</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">callback</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Example</span> <span class="p">{</span>

    <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">network</span> <span class="o">=</span> <span class="kt">Network</span><span class="p">()</span>
        <span class="n">network</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"complete"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>함수의 작업완료를 기다리지 않고 callback으로 받는다.</p>

<h2 id="syncasync와-blockingnonblocking를-같이-사용">Sync/Async와 Blocking/NonBlocking를 같이 사용</h2>

<h3 id="sync-blocking">Sync-Blocking</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Network</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">isLoading</span> <span class="o">=</span> <span class="kc">false</span>

    <span class="kd">func</span> <span class="nf">syncBlocking</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Example</span> <span class="p">{</span>

    <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">network</span> <span class="o">=</span> <span class="kt">Network</span><span class="p">()</span>
        <span class="k">let</span> <span class="nv">value</span> <span class="o">=</span> <span class="n">network</span><span class="o">.</span><span class="nf">syncBlocking</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>싱크 블러킹은 함수를 호출후 리턴될때 까지 아무작업을 할수 없다.<br />
함수의 작업내용이 작거나 시간이 아주 작게 걸릴때 사용된다.<br />
그렇지 않으면 앱이 프리즈상태가 될 가능성이 많다.</p>

<h3 id="sync-nonblocking">Sync-NonBlocking</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Network</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">isLoading</span> <span class="o">=</span> <span class="kc">false</span>

    <span class="kd">func</span> <span class="nf">syncNonBlocking</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="kt">DispatchQueue</span><span class="o">.</span><span class="nf">global</span><span class="p">()</span><span class="o">.</span><span class="nf">asyncAfter</span><span class="p">(</span><span class="nv">deadline</span><span class="p">:</span> <span class="o">.</span><span class="nf">now</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"work"</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Example</span> <span class="p">{</span>

    <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">network</span> <span class="o">=</span> <span class="kt">Network</span><span class="p">()</span>
        <span class="k">let</span> <span class="nv">value</span> <span class="o">=</span> <span class="n">network</span><span class="o">.</span><span class="nf">syncNonBlocking</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>싱크 논블러킹은 함수를 호출후 바로 리턴받고 다른작업을 할수 있다. <br />
해당 함수의 작업 결과가 중요하지 않을 경우 사용한다.</p>

<h3 id="async-blocking">Async-Blocking</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Network</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">isLoading</span> <span class="o">=</span> <span class="kc">false</span>

    <span class="kd">func</span> <span class="nf">asyncBlocking</span><span class="p">(</span><span class="n">_</span> <span class="nv">callback</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="nf">callback</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Example</span> <span class="p">{</span>

    <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">network</span> <span class="o">=</span> <span class="kt">Network</span><span class="p">()</span>
        <span class="n">network</span><span class="o">.</span><span class="n">asyncBlocking</span> <span class="p">{</span>

        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>어싱크 블로킹은 콜백호출까지 다른 작업을 할수 없다. <br />
거의 사용되지 않는다.</p>

<h3 id="async-nonblocking">Async-NonBlocking</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Network</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">isLoading</span> <span class="o">=</span> <span class="kc">false</span>

    <span class="kd">func</span> <span class="nf">asyncNonBlocking</span><span class="p">(</span><span class="n">_</span> <span class="nv">callback</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">DispatchQueue</span><span class="o">.</span><span class="nf">global</span><span class="p">()</span><span class="o">.</span><span class="nf">asyncAfter</span><span class="p">(</span><span class="nv">deadline</span><span class="p">:</span> <span class="o">.</span><span class="nf">now</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">callback</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Example</span> <span class="p">{</span>

    <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">network</span> <span class="o">=</span> <span class="kt">Network</span><span class="p">()</span>
        <span class="n">network</span><span class="o">.</span><span class="n">asyncNonBlocking</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"complete"</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"other work"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>어싱크 논블러킹은 콜백호출전에 다른작업이 가능하다. <br />
함수에서 작업이 완료되면 콜백이 호출된다.<br />
가장 많이 쓰이는 형태이다.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/swift/2018/12/13/swift-blocking/</guid>
                <description>
                    
                    Swift sync, async, blocking, non-blocking에 대해 알아보자
                    
                </description>
                <pubDate>Thu, 13 Dec 2018 17:00:00 +0900</pubDate>
                <author>gwanho kim</author>
            </item>
        
    
        
            <item>
                <title>swift semaphore</title>
                <link>http://localhost:4000/swift/2018/12/12/swift-semaphore/</link>
                <content:encoded>
                    <![CDATA[
                    <p>세마포어를 사용하기전에 세마포어가 왜 생겼는지 알아보자<br />
하나의 자원에 접근할때 동시에 여러 쓰레드에서 그 하나의 자원에 접근한다면?</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">array</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]()</span>

<span class="kt">DispatchQueue</span><span class="o">.</span><span class="nf">global</span><span class="p">()</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">element</span> <span class="k">in</span> <span class="mi">0</span><span class="o">...</span><span class="mi">1000</span> <span class="p">{</span>
        <span class="n">array</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">DispatchQueue</span><span class="o">.</span><span class="nf">global</span><span class="p">()</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">element</span> <span class="k">in</span> <span class="mi">0</span><span class="o">...</span><span class="mi">1000</span> <span class="p">{</span>
        <span class="n">array</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>malloc: *** error for object 0x10b4d6cb0: pointer being freed was not allocated
malloc: *** set a breakpoint in malloc_error_break to debug
</code></pre></div></div>

<p>이렇게 에러가 난다.<br />
이렇게 하나의 자원에 여러 곳에서 접근을 하는 것을 레이스 컨디션(Race Condition)이라고 한다.</p>

<blockquote>
  <p>레이스 컨디션: 한정된 자원을 동시에 이용하려는 여러 프로세스가 자원의 이용을 위해 경쟁을 벌이는 현상</p>
</blockquote>

<p>동기화 방법은 크리티컬 섹션(Critical Section)이라고 한다. 임계영역이라고도 한다.<br />
동시 접근문제를 해결하기 위한 동기화 기법이 세마포어, 뮤텍스 등이 있다.</p>

<ul>
  <li>뮤택스는 한정된 자원에 하나만 접근 가능하고</li>
  <li>세마포어는 한정된 자원에 하나 이상이 접근할 수 있다.</li>
</ul>

<p>Swift 에서는 세마포어를 사용하기 위한 <code class="highlighter-rouge">DispatchSemaphore</code> 클래스가 있다.<br />
<code class="highlighter-rouge">DispatchSemaphore</code>를 생성할때 자원에 접근할 수 있는 갯수를 준다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">semaphore</span> <span class="o">=</span> <span class="kt">DispatchSemaphore</span><span class="p">(</span><span class="nv">value</span><span class="p">:</span> <span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<p>이렇게 하면 10개가 자원에 접근할수 있다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">DispatchSemaphore</span><span class="p">(</span><span class="nv">value</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<p>로 하면 하나만 자원에 접근할수 있고 뮤택스처럼 사용할수 있다.<br />
<code class="highlighter-rouge">DispatchSemaphore</code>의 메서드에는</p>

<ul>
  <li>wait: value값이 -1 작아진다.</li>
  <li>signal: value 값이 +1 더해진다.</li>
</ul>

<blockquote>
  <p>value값의 0이면 자원에 접근할수 없다.</p>
</blockquote>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">array</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]()</span>
<span class="k">let</span> <span class="nv">semaphore</span> <span class="o">=</span> <span class="kt">DispatchSemaphore</span><span class="p">(</span><span class="nv">value</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span>

<span class="kt">DispatchQueue</span><span class="o">.</span><span class="nf">global</span><span class="p">()</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">element</span> <span class="k">in</span> <span class="mi">0</span><span class="o">...</span><span class="mi">1000</span> <span class="p">{</span>
        <span class="n">semaphore</span><span class="o">.</span><span class="nf">wait</span><span class="p">()</span>
        <span class="n">array</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
        <span class="n">semaphore</span><span class="o">.</span><span class="nf">signal</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">DispatchQueue</span><span class="o">.</span><span class="nf">global</span><span class="p">()</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">element</span> <span class="k">in</span> <span class="mi">0</span><span class="o">...</span><span class="mi">1000</span> <span class="p">{</span>
        <span class="n">semaphore</span><span class="o">.</span><span class="nf">wait</span><span class="p">()</span>
        <span class="n">array</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
        <span class="n">semaphore</span><span class="o">.</span><span class="nf">signal</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이런식으로 하게 되면 자원을 한번씩만 접근을 해서 레이스 컨디션의 문제가 일어나지 않는다.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/swift/2018/12/12/swift-semaphore/</guid>
                <description>
                    
                    Swift semaphore 알아보기
                    
                </description>
                <pubDate>Wed, 12 Dec 2018 17:00:00 +0900</pubDate>
                <author>gwanho kim</author>
            </item>
        
    
        
            <item>
                <title>swift associatedType 연관타입</title>
                <link>http://localhost:4000/swift/2018/12/11/swift-associatedType/</link>
                <content:encoded>
                    <![CDATA[
                    <p>이런 프로토콜이 있다고 가정해보자</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">ExampleProtocol</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">Int</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>코드에서 이 프로토콜을 공통적으로 사용을 하는데 value가 String이 필요한 화면이 있다.<br />
그래서 하나더 만들면</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">ExampleProtocol2</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>그러다가 value가 Int와 String을 받는 튜플이 필요하게 되었다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">ExampleProtocol3</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">value</span><span class="p">:</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이건 답이 아닌거같다…<br />
그러면 value를 어디서든 사용할수 있게 타입을 AnyObject로 해보자</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">ExampleProtocol</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">AnyObject</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Example</span><span class="p">:</span> <span class="kt">ExampleProtocol</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">AnyObject</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">10</span> <span class="k">as</span> <span class="kt">AnyObject</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Example2</span><span class="p">:</span> <span class="kt">ExampleProtocol</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">AnyObject</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"Hi"</span> <span class="k">as</span> <span class="kt">AnyObject</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">Example3</span><span class="p">:</span> <span class="kt">ExampleProtocol</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">AnyObject</span> <span class="p">{</span>
        <span class="nf">return</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="s">"Hi"</span><span class="p">)</span> <span class="k">as</span> <span class="kt">AnyObject</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이쁘지가 않다… 타입캐스팅을 해줘야한다.<br />
이럴때 associatedType를 사용해보면</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">ExampleProtocol</span> <span class="p">{</span>
    <span class="kd">associatedtype</span> <span class="kt">ExampleType</span>

    <span class="k">var</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">ExampleType</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Example1</span><span class="p">:</span> <span class="kt">ExampleProtocol</span> <span class="p">{</span>
    <span class="kd">typealias</span> <span class="kt">ExampleType</span> <span class="o">=</span> <span class="kt">Int</span>

    <span class="k">var</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">ExampleType</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">10</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Example2</span><span class="p">:</span> <span class="kt">ExampleProtocol</span> <span class="p">{</span>

    <span class="k">var</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"Hi"</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">Example3</span><span class="p">:</span> <span class="kt">ExampleProtocol</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">item</span> <span class="o">=</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="s">"HI"</span><span class="p">)</span>

    <span class="k">var</span> <span class="nv">value</span><span class="p">:</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">self</span><span class="o">.</span><span class="n">item</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>아주 만족스럽다.<br />
사용하는 곳에서 타입을 변경해주는게 아주 편리하다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Test</span> <span class="p">{</span>

<span class="p">}</span>

<span class="kd">protocol</span> <span class="kt">ExampleProtocol</span> <span class="p">{</span>
    <span class="kd">associatedtype</span> <span class="kt">ExampleType</span><span class="p">:</span> <span class="kt">Test</span>

    <span class="k">var</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">ExampleType</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>associatedtype에 타입을 지정해줄수 있다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Test</span> <span class="p">{</span>

<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Test1</span><span class="p">:</span> <span class="kt">Test</span> <span class="p">{</span>

<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Test2</span><span class="p">:</span> <span class="kt">Test</span> <span class="p">{</span>

<span class="p">}</span>

<span class="kd">protocol</span> <span class="kt">ExampleProtocol</span> <span class="p">{</span>
    <span class="kd">associatedtype</span> <span class="kt">ExampleType</span><span class="p">:</span> <span class="kt">Test</span>

    <span class="k">var</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">ExampleType</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Example1</span><span class="p">:</span> <span class="kt">ExampleProtocol</span> <span class="p">{</span>

    <span class="k">var</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">Test1</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">Test1</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Example2</span><span class="p">:</span> <span class="kt">ExampleProtocol</span> <span class="p">{</span>

    <span class="k">var</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">Test2</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">Test2</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이런식으로 짤수 있다.<br />
associatedtype에 Equatable을 써보자</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">ExampleProtocol</span> <span class="p">{</span>
    <span class="kd">associatedtype</span> <span class="kt">ExampleType</span><span class="p">:</span> <span class="kt">Equatable</span>

    <span class="k">var</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">ExampleType</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Example1</span><span class="p">:</span> <span class="kt">ExampleProtocol</span> <span class="p">{</span>

    <span class="k">var</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">10</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Example2</span><span class="p">:</span> <span class="kt">ExampleProtocol</span> <span class="p">{</span>

    <span class="k">var</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"Hi"</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Equatable을 만족하는 타입을 사용하면 이런식으로 할수 있다.<br />
Test에도 Equatable을 상속받아보자</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Test</span><span class="p">:</span> <span class="kt">Equatable</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">value</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="kd">static</span> <span class="kd">func</span> <span class="o">==</span> <span class="p">(</span><span class="nv">lhs</span><span class="p">:</span> <span class="kt">Test</span><span class="p">,</span> <span class="nv">rhs</span><span class="p">:</span> <span class="kt">Test</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">lhs</span><span class="o">.</span><span class="n">value</span> <span class="o">==</span> <span class="n">rhs</span><span class="o">.</span><span class="n">value</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Test1</span><span class="p">:</span> <span class="kt">Test</span> <span class="p">{</span>

<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Test2</span><span class="p">:</span> <span class="kt">Test</span> <span class="p">{</span>

<span class="p">}</span>

<span class="kd">protocol</span> <span class="kt">ExampleProtocol</span> <span class="p">{</span>
    <span class="kd">associatedtype</span> <span class="kt">ExampleType</span><span class="p">:</span> <span class="kt">Equatable</span>

    <span class="k">var</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">ExampleType</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Example1</span><span class="p">:</span> <span class="kt">ExampleProtocol</span> <span class="p">{</span>

    <span class="k">var</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">Test1</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">Test1</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Example2</span><span class="p">:</span> <span class="kt">ExampleProtocol</span> <span class="p">{</span>

    <span class="k">var</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">Test2</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">Test2</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/swift/2018/12/11/swift-associatedType/</guid>
                <description>
                    
                    Swift protocol의 associatedType 써보기
                    
                </description>
                <pubDate>Tue, 11 Dec 2018 17:00:00 +0900</pubDate>
                <author>gwanho kim</author>
            </item>
        
    
        
            <item>
                <title>swift convenience 편의 생성자</title>
                <link>http://localhost:4000/swift/2018/12/10/swift-convenience/</link>
                <content:encoded>
                    <![CDATA[
                    <p>convenience는 편의 생성자라고 하는데<br />
기존에 구현했던 init을 수정하지 않고 커스텀한 init을 사용할수 있게 할수 있다.<br />
사용 방법은 init앞에 convenience을 붙인다.<br />
그리고 convenience로 구현한 init은 동일한 클래스에서 다른 init을 호출하여야 한다.<br />
그렇지 않으면 아래와 같은 에러가 나타나게 된다.<br />
<code class="highlighter-rouge">'self.init' isn't called on all paths before returning from initializer</code></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">SuperClass</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">let</span> <span class="nv">age</span><span class="p">:</span> <span class="kt">Int</span>

    <span class="nf">init</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">age</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="k">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
    <span class="p">}</span>

    <span class="nf">init</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="k">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">15</span>
    <span class="p">}</span>

    <span class="n">convenience</span> <span class="nf">init</span><span class="p">(</span><span class="nv">age</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"Super"</span><span class="p">,</span> <span class="nv">age</span><span class="p">:</span> <span class="n">age</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>그리고 convenience을 구현한 클래스를 상속받은 클래스에서 convenience가 자동으로 상속이 되게 하는 방법이 있다.</p>

<h4 id="상속받은-클래스가-init을-하나도-구현하지-않았을때-자동으로-상위-클래스의-init이-상속된다">상속받은 클래스가 init을 하나도 구현하지 않았을때 자동으로 상위 클래스의 init이 상속된다.</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">SuperClass</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">let</span> <span class="nv">age</span><span class="p">:</span> <span class="kt">Int</span>

    <span class="nf">init</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">age</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="k">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
    <span class="p">}</span>

    <span class="nf">init</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="k">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">15</span>
    <span class="p">}</span>

    <span class="n">convenience</span> <span class="nf">init</span><span class="p">(</span><span class="nv">age</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"Super"</span><span class="p">,</span> <span class="nv">age</span><span class="p">:</span> <span class="n">age</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">FooClass</span><span class="p">:</span> <span class="kt">SuperClass</span> <span class="p">{</span>

<span class="p">}</span>

<span class="k">let</span> <span class="nv">foo</span> <span class="o">=</span> <span class="kt">FooClass</span><span class="p">(</span><span class="nv">age</span><span class="p">:</span> <span class="mi">20</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="상속받은-클래스가-상위-클래스의-모든-init을-구현했을때-자동으로-convenience을-상속한다">상속받은 클래스가 상위 클래스의 모든 init을 구현했을때 자동으로 convenience을 상속한다.</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">SuperClass</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">let</span> <span class="nv">age</span><span class="p">:</span> <span class="kt">Int</span>

    <span class="nf">init</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">age</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="k">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
    <span class="p">}</span>

    <span class="nf">init</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="k">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">15</span>
    <span class="p">}</span>

    <span class="n">convenience</span> <span class="nf">init</span><span class="p">(</span><span class="nv">age</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"Super"</span><span class="p">,</span> <span class="nv">age</span><span class="p">:</span> <span class="n">age</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">BooClass</span><span class="p">:</span> <span class="kt">SuperClass</span> <span class="p">{</span>
    <span class="k">override</span> <span class="nf">init</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="n">name</span><span class="p">)</span>

    <span class="p">}</span>

    <span class="k">override</span> <span class="nf">init</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">age</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span> <span class="nv">age</span><span class="p">:</span> <span class="n">age</span><span class="p">)</span>

    <span class="p">}</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">boo</span> <span class="o">=</span> <span class="kt">BooClass</span><span class="p">(</span><span class="nv">age</span><span class="p">:</span> <span class="mi">20</span><span class="p">)</span>
</code></pre></div></div>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/swift/2018/12/10/swift-convenience/</guid>
                <description>
                    
                    Swift convenience
                    
                </description>
                <pubDate>Mon, 10 Dec 2018 17:00:00 +0900</pubDate>
                <author>gwanho kim</author>
            </item>
        
    
        
            <item>
                <title>swift LifeCycle</title>
                <link>http://localhost:4000/swift/2018/12/09/swift-lifecycle/</link>
                <content:encoded>
                    <![CDATA[
                    <h3 id="app-lifecycle">App LifeCycle</h3>

<p>UIKit 앱은 항상 5가지 상태중의 하나에 있다.</p>

<ul>
  <li>
    <p>Not Running: 앱이 실행되지 않은 상태</p>
  </li>
  <li>
    <p>Inactive: 앱이 실행중인상태지만 이벤트없음</p>
  </li>
  <li>
    <p>Active: 앱이 실행중이며 이벤트가 발생</p>
  </li>
  <li>
    <p>Background: 앱이 백그라운드에 있지만 실행되는 코드가 있음</p>
  </li>
  <li>
    <p>Suspened: 앱이 백그라운드에 있고 실행되는 코드가 없음</p>
  </li>
</ul>

<p><img src="/tec/images/2018/12/lifeCycle/appLifeCycle.png" alt="Alt Text" /></p>

<p><br /><br /></p>

<p>5가지의 상태들의 이벤트를 관리하는 곳이 UIApplicationDelegate 프로토콜이다.</p>

<ul>
  <li>Launch: 앱이 실행되지 않은 상태에서 비활성 또는 백그라운드 상태로 전환된다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="n">_</span> <span class="nv">application</span><span class="p">:</span> <span class="kt">UIApplication</span><span class="p">,</span> <span class="n">didFinishLaunchingWithOptions</span> <span class="nv">launchOptions</span><span class="p">:</span> <span class="p">[</span><span class="kt">UIApplication</span><span class="o">.</span><span class="kt">LaunchOptionsKey</span><span class="p">:</span> <span class="kt">Any</span><span class="p">]?)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
    <span class="c1">// Override point for customization after application launch.</span>
    <span class="k">return</span> <span class="kc">true</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Activation: 앱이 비활성 상태에서 활성 상태로 전환이 된다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">applicationWillEnterForeground</span><span class="p">(</span><span class="n">_</span> <span class="nv">application</span><span class="p">:</span> <span class="kt">UIApplication</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background.</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">applicationDidBecomeActive</span><span class="p">(</span><span class="n">_</span> <span class="nv">application</span><span class="p">:</span> <span class="kt">UIApplication</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p><code class="highlighter-rouge">applicationDidBecomeActive(_:)</code> 는 앱이 현재 포그라운드 상태에 있다는 것을 알려준다.</p>

  <p>앱이 백그라운드에서 이미 실생중이면 <code class="highlighter-rouge">applicationDidBecomeActive(_:)</code>을 호출하기 전에 <code class="highlighter-rouge">applicationWillEnterForeground(_:)</code>를 먼저 호출한다.</p>
</blockquote>

<ul>
  <li>Deactivation: 앱이 활성 상태에서 비활성 상태로 전환된다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">applicationWillResignActive</span><span class="p">(</span><span class="n">_</span> <span class="nv">application</span><span class="p">:</span> <span class="kt">UIApplication</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.</span>
    <span class="c1">// Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game.</span>

<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Background execution: 앱이 비활성 상태 또는 실행되지 않는 상태에서 백그라운드 상태로 전환된다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">applicationDidEnterBackground</span><span class="p">(</span><span class="n">_</span> <span class="nv">application</span><span class="p">:</span> <span class="kt">UIApplication</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.</span>
    <span class="c1">// If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.</span>

<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Termination: 앱이 실행중 상태에서 실행중지 상태로 전환된다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">applicationWillTerminate</span><span class="p">(</span><span class="n">_</span> <span class="nv">application</span><span class="p">:</span> <span class="kt">UIApplication</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="viewcontroller-lifecycle">ViewController LifeCycle</h3>

<p>UIViewController는 가장 먼저</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">override</span> <span class="kd">func</span> <span class="nf">loadView</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="nf">loadView</span><span class="p">()</span>

<span class="p">}</span>
</code></pre></div></div>

<p>가 호출이 되고</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>

<span class="p">}</span>
</code></pre></div></div>

<p>다음 <code class="highlighter-rouge">viewDidLoad()</code>가 호출이 된다.</p>

<p><img src="/tec/images/2018/12/lifeCycle/viewLifeCycle.png" alt="Alt Text" /></p>

<ul>
  <li><code class="highlighter-rouge">viewWillAppear(:_)</code> 는 화면이 보일 예정임을 알린다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">override</span> <span class="kd">func</span> <span class="nf">viewWillAppear</span><span class="p">(</span><span class="n">_</span> <span class="nv">animated</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="nf">viewWillAppear</span><span class="p">(</span><span class="n">animated</span><span class="p">)</span>

<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">viewDidAppear(:_)</code> 는 화면이 보였다는것을 알린다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidAppear</span><span class="p">(</span><span class="n">_</span> <span class="nv">animated</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="nf">viewDidAppear</span><span class="p">(</span><span class="n">animated</span><span class="p">)</span>

<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">viewWillDisappear(:_)</code> 는 화면이 보이지 않으려고 하고 있다는 것을 알린다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">override</span> <span class="kd">func</span> <span class="nf">viewWillDisappear</span><span class="p">(</span><span class="n">_</span> <span class="nv">animated</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="nf">viewWillDisappear</span><span class="p">(</span><span class="n">animated</span><span class="p">)</span>

<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">viewDidDisappear(:_)</code> 는 화면이 보이지 않게 된 것을 알린다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidDisappear</span><span class="p">(</span><span class="n">_</span> <span class="nv">animated</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="nf">viewDidDisappear</span><span class="p">(</span><span class="n">animated</span><span class="p">)</span>

<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>class에서는 메모리가 해제되었을때 deinit을 호출한다.</p>

  <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">deinit</span> <span class="p">{</span>

<span class="p">}</span>

</code></pre></div>  </div>
</blockquote>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/swift/2018/12/09/swift-lifecycle/</guid>
                <description>
                    
                    Swift App LifeCycle과 ViewController의 LifeCycle
                    
                </description>
                <pubDate>Sun, 09 Dec 2018 17:00:00 +0900</pubDate>
                <author>gwanho kim</author>
            </item>
        
    
        
            <item>
                <title>swift ARC(Automatic Reference Counting)</title>
                <link>http://localhost:4000/swift/2018/12/08/swift-arc/</link>
                <content:encoded>
                    <![CDATA[
                    <p>ARC(Automatic Reference Counting)</p>

<p>클래스의 인스턴스를 만들고 참조할때 ARC가 인스턴스에 대한 정보를 메모리에 할당한다.<br />
프로퍼티, 상수, 변수에 레퍼런스가 지정되면 카운트가 올라가고 해제되면 내려가고 0이되면 해제한다.<br />
자동 레퍼런트 카운터는 더 이상 사용되지 않는 시점을 결정하여 메모리를 해제한다.<br /></p>

<p>메모리가 제대로 해지되지 않는 경우가 있다.</p>

<h3 id="순환참조">순환참조</h3>

<h4 id="두-클래스-인스턴스의-프로퍼티가-서로를-강한-참조할-경우">두 클래스 인스턴스의 프로퍼티가 서로를 강한 참조할 경우</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Example1</span> <span class="p">{</span>
    <span class="kd">deinit</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"deinit Example1"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">var</span> <span class="nv">example2</span><span class="p">:</span> <span class="kt">Example2</span><span class="o">!</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Example2</span> <span class="p">{</span>
    <span class="kd">deinit</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"deinit Example2"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">var</span> <span class="nv">examle1</span><span class="p">:</span> <span class="kt">Example1</span><span class="o">!</span>

<span class="p">}</span>

<span class="k">let</span> <span class="nv">example1</span> <span class="o">=</span> <span class="kt">Example1</span><span class="p">()</span>
<span class="k">let</span> <span class="nv">example2</span> <span class="o">=</span> <span class="kt">Example2</span><span class="p">()</span>
<span class="n">example1</span><span class="o">.</span><span class="n">example2</span> <span class="o">=</span> <span class="n">example2</span>
<span class="n">example2</span><span class="o">.</span><span class="n">examle1</span> <span class="o">=</span> <span class="n">example1</span>
</code></pre></div></div>

<h4 id="클로져-내부에서-객체를-참조할-경우">클로져 내부에서 객체를 참조할 경우</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Example3</span> <span class="p">{</span>
    <span class="kd">deinit</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"deinit Example3"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">var</span> <span class="nv">name</span> <span class="o">=</span> <span class="s">"name"</span>

    <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">example</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span> <span class="o">=</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">example3</span> <span class="o">=</span> <span class="kt">Example3</span><span class="p">()</span>
<span class="n">example3</span><span class="o">.</span><span class="nf">example</span><span class="p">()</span>
</code></pre></div></div>

<p>둘다 deinit이 호출이 되지 않는다.</p>

<p>해결방법</p>

<h4 id="weak-약한참조">weak 약한참조</h4>
<p>strong 강한참조를 하게 되면 대상 객체에 대한 소유권을 가지기 때문에 레퍼런스 카운트가 증가하는데<br />
약한참조는 객체에 대한 소유권을 가지지 않고 객체를 참조하는것이기 때문에 레퍼런스 카운트가 증가하지 않고 대상 객체의 레퍼런스 카운트가 0이 되는 순간 자동으로 nil이 되고 메모리에서 삭제된다.<br />
옵셔널 변수에만 가능</p>

<h5 id="두-클래스-인스턴스의-프로퍼티가-서로를-강한-참조할-경우-1">두 클래스 인스턴스의 프로퍼티가 서로를 강한 참조할 경우</h5>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Example1</span> <span class="p">{</span>
    <span class="kd">deinit</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"deinit Example1"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">var</span> <span class="nv">example2</span><span class="p">:</span> <span class="kt">Example2</span><span class="o">!</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Example2</span> <span class="p">{</span>
    <span class="kd">deinit</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"deinit Example2"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">weak</span> <span class="k">var</span> <span class="nv">examle1</span><span class="p">:</span> <span class="kt">Example1</span><span class="o">!</span>

<span class="p">}</span>
</code></pre></div></div>

<h5 id="클로져-내부에서-객체를-참조할-경우-1">클로져 내부에서 객체를 참조할 경우</h5>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Example3</span> <span class="p">{</span>
    <span class="kd">deinit</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"deinit Example3"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">var</span> <span class="nv">name</span> <span class="o">=</span> <span class="s">"name"</span>

    <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">example</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span> <span class="o">=</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="k">self</span><span class="p">]</span> <span class="k">in</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>[weak self] in 이나 [unowned self] in 를 캡쳐리스트라고 한다. self를 캡쳐한다.</p>
</blockquote>

<h4 id="unowned-미소유-참조">unowned 미소유 참조</h4>

<p>언노운 변수는 반드시 옵셔널이 아니어야 한다.<br />
레퍼런스 카운트를 증가시키지 않고 대상객체에 대한 참조가 가능하다.<br />
하지만 객체가 메모리에 해제되었을때는 존재하지 않기 때문에 메모리에 참조하면 크래쉬가 난다.</p>

<h5 id="두-클래스-인스턴스의-프로퍼티가-서로를-강한-참조할-경우-2">두 클래스 인스턴스의 프로퍼티가 서로를 강한 참조할 경우</h5>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Example1</span> <span class="p">{</span>
    <span class="kd">deinit</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"deinit Example1"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">var</span> <span class="nv">example2</span><span class="p">:</span> <span class="kt">Example2</span><span class="o">!</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Example2</span> <span class="p">{</span>
    <span class="kd">deinit</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"deinit Example2"</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">unowned</span> <span class="k">var</span> <span class="nv">examle1</span><span class="p">:</span> <span class="kt">Example1</span>

    <span class="nf">init</span><span class="p">(</span><span class="nv">example1</span><span class="p">:</span> <span class="kt">Example1</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">examle1</span> <span class="o">=</span> <span class="n">example1</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">example1</span> <span class="o">=</span> <span class="kt">Example1</span><span class="p">()</span>
<span class="k">let</span> <span class="nv">example2</span> <span class="o">=</span> <span class="kt">Example2</span><span class="p">(</span><span class="nv">example1</span><span class="p">:</span> <span class="n">example1</span><span class="p">)</span>
<span class="n">example1</span><span class="o">.</span><span class="n">example2</span> <span class="o">=</span> <span class="n">example2</span>
</code></pre></div></div>

<h5 id="클로져-내부에서-객체를-참조할-경우-2">클로져 내부에서 객체를 참조할 경우</h5>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Example3</span> <span class="p">{</span>
    <span class="kd">deinit</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"deinit Example3"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">var</span> <span class="nv">name</span> <span class="o">=</span> <span class="s">"name"</span>

    <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">example</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span> <span class="o">=</span> <span class="p">{</span> <span class="p">[</span><span class="k">unowned</span> <span class="k">self</span><span class="p">]</span> <span class="k">in</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>weak와 언노운은 레퍼런스 카운트를 증가시키지 않으며 대상객체에 대한 참조가 가능한 점은 동일하지만 객체가 해제된 경우에 다르다.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/swift/2018/12/08/swift-arc/</guid>
                <description>
                    
                    Swift ARC(Automatic Reference Counting) 자동계수참조 간단하게 알아보기
                    
                </description>
                <pubDate>Sat, 08 Dec 2018 17:00:00 +0900</pubDate>
                <author>gwanho kim</author>
            </item>
        
    
        
            <item>
                <title>swift @escaping @noescape</title>
                <link>http://localhost:4000/swift/2018/12/07/swift-escape/</link>
                <content:encoded>
                    <![CDATA[
                    <p>함수에서 클로져를 쓸때</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">example</span><span class="p">(</span><span class="n">_</span> <span class="nv">handler</span><span class="p">:</span> <span class="p">(()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">))</span> <span class="p">{</span>

<span class="p">}</span>

<span class="kd">func</span> <span class="nf">example</span><span class="p">(</span><span class="n">_</span> <span class="nv">handler</span><span class="p">:</span> <span class="p">((</span><span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span><span class="p">))</span> <span class="p">{</span>

<span class="p">}</span>
</code></pre></div></div>

<p>이런식으로 쓴다.<br />
이렇게 함수에 클로져를 쓰다보면</p>

<p><img src="/tec/images/2018/12/escape/error.png" alt="Alt Text" /></p>

<p>이런식으로 에러가 나온다.<br />
물론 에러를 누르고 fix를 하면 자동으로 클로져에 @escaping 가 붙는다.</p>

<p>escaping는 탈출한다는 뜻이고 클로져가 함수를 탈출할때 붙는다.<br />
noescape는 함수를 탈출하지 않을때 사용되며 생략한다. 즉, 그냥 클로져를 사용하면 noescape로 된다.</p>

<p>클로져가 함수를 탈출하는 상황은 두가지가 있다.<br />
1) 비동기 실행: 클로저가 비동기로 실행되면 클로저를 잡고 있어야한다.<br />
2) 저장소: 클로저를 변수나 프로퍼티에 저장할때.<br /></p>

<h4 id="비동기-실행">비동기 실행</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">example</span><span class="p">(</span><span class="n">_</span> <span class="nv">handler</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">(()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">))</span> <span class="p">{</span>
    <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span>
        <span class="nf">handler</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>함수종료 이후에 클로져가 실행되므로 클로져를 잡고 있어야 한다. @escaping 를 사용하여야 한다.</p>

<h4 id="저장소">저장소</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">handler</span><span class="p">:</span> <span class="p">(()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)?</span>

<span class="kd">func</span> <span class="nf">example</span><span class="p">(</span><span class="n">_</span> <span class="nv">handler</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">(()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">self</span><span class="o">.</span><span class="n">handler</span> <span class="o">=</span> <span class="n">handler</span>
<span class="p">}</span>
</code></pre></div></div>

<p>또는</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">example</span><span class="p">(</span><span class="n">_</span> <span class="nv">handler</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">(()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">handlerTemp</span> <span class="o">=</span> <span class="n">handler</span>

<span class="p">}</span>
</code></pre></div></div>

<p>클로져가 변수에 저장하려면 @escaping 를 사용하여야 한다.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/swift/2018/12/07/swift-escape/</guid>
                <description>
                    
                    Swift @escaping @noescape 알아보기
                    
                </description>
                <pubDate>Fri, 07 Dec 2018 17:00:00 +0900</pubDate>
                <author>gwanho kim</author>
            </item>
        
    
        
            <item>
                <title>swift 열거형 enumeration</title>
                <link>http://localhost:4000/swift/2018/12/06/swift-enum/</link>
                <content:encoded>
                    <![CDATA[
                    <h4 id="enum-기본">enum 기본</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">CompassPoint</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">north</span>
    <span class="k">case</span> <span class="n">south</span>
    <span class="k">case</span> <span class="n">east</span>
    <span class="k">case</span> <span class="n">west</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이런식으로 enum을 쓸수 있다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">CompassPoint</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">north</span><span class="p">,</span> <span class="n">south</span><span class="p">,</span> <span class="n">east</span><span class="p">,</span> <span class="n">west</span>
<span class="p">}</span>
</code></pre></div></div>

<p>case를 생략해서 사용할수도 있다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">value</span> <span class="o">=</span> <span class="kt">CompassPoint</span><span class="o">.</span><span class="n">north</span>
</code></pre></div></div>

<p>이렇게 enum의 값을 가져올수 있다.</p>

<h4 id="rawvalue">RawValue</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">CompassPoint</span><span class="p">:</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">north</span><span class="p">,</span> <span class="n">south</span><span class="p">,</span> <span class="n">east</span><span class="p">,</span> <span class="n">west</span>
<span class="p">}</span>

<span class="nf">print</span><span class="p">(</span><span class="kt">CompassPoint</span><span class="o">.</span><span class="n">north</span><span class="o">.</span><span class="n">rawValue</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="kt">CompassPoint</span><span class="o">.</span><span class="n">south</span><span class="o">.</span><span class="n">rawValue</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0
1
</code></pre></div></div>

<p>RawValue를 줄수 있다.
제일 앞의 값은 0부터 시작한다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">CompassPoint</span><span class="p">:</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">north</span> <span class="o">=</span> <span class="mi">5</span>
    <span class="k">case</span> <span class="n">south</span><span class="p">,</span> <span class="n">east</span><span class="p">,</span> <span class="n">west</span>
<span class="p">}</span>

<span class="nf">print</span><span class="p">(</span><span class="kt">CompassPoint</span><span class="o">.</span><span class="n">north</span><span class="o">.</span><span class="n">rawValue</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="kt">CompassPoint</span><span class="o">.</span><span class="n">south</span><span class="o">.</span><span class="n">rawValue</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>5
6
</code></pre></div></div>

<p>RawValue에 초기값을 줄수 있다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">CompassPoint</span><span class="p">:</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">north</span> <span class="o">=</span> <span class="mi">5</span>
    <span class="k">case</span> <span class="n">south</span> <span class="o">=</span> <span class="mi">7</span>
    <span class="k">case</span> <span class="n">east</span> <span class="o">=</span> <span class="mi">9</span>
    <span class="k">case</span> <span class="n">west</span> <span class="o">=</span> <span class="mi">2</span>
<span class="p">}</span>

<span class="nf">print</span><span class="p">(</span><span class="kt">CompassPoint</span><span class="o">.</span><span class="n">north</span><span class="o">.</span><span class="n">rawValue</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="kt">CompassPoint</span><span class="o">.</span><span class="n">south</span><span class="o">.</span><span class="n">rawValue</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="kt">CompassPoint</span><span class="o">.</span><span class="n">east</span><span class="o">.</span><span class="n">rawValue</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="kt">CompassPoint</span><span class="o">.</span><span class="n">west</span><span class="o">.</span><span class="n">rawValue</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>5
7
9
2
</code></pre></div></div>

<p>값을 각각 줄수 있다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">CompassPoint</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">north</span> <span class="o">=</span> <span class="s">"동"</span>
    <span class="k">case</span> <span class="n">south</span> <span class="o">=</span> <span class="s">"서"</span>
    <span class="k">case</span> <span class="n">east</span> <span class="o">=</span> <span class="s">"남"</span>
    <span class="k">case</span> <span class="n">west</span> <span class="o">=</span> <span class="s">"북"</span>
<span class="p">}</span>

<span class="nf">print</span><span class="p">(</span><span class="kt">CompassPoint</span><span class="o">.</span><span class="n">north</span><span class="o">.</span><span class="n">rawValue</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="kt">CompassPoint</span><span class="o">.</span><span class="n">south</span><span class="o">.</span><span class="n">rawValue</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="kt">CompassPoint</span><span class="o">.</span><span class="n">east</span><span class="o">.</span><span class="n">rawValue</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="kt">CompassPoint</span><span class="o">.</span><span class="n">west</span><span class="o">.</span><span class="n">rawValue</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>동
서
남
북
</code></pre></div></div>

<p>Int가 아닌 다른값으로 RawValue를 줄수 있다.</p>

<blockquote>
  <p>RawValue값은 중복되면 안된다.</p>
</blockquote>

<h4 id="associated-value-연관-값">Associated Value (연관 값)</h4>

<p>예를 들어 그림판에 그리기를 할수 있는 앱을 만들려고 한다.<br />
화면에 터치했을때 그리기, 지우개, 스포이드, 도형 타입이 있다.<br />
그러면</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">Draw</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">pen</span>
    <span class="k">case</span> <span class="n">eraser</span>
    <span class="k">case</span> <span class="n">spoid</span>
    <span class="k">case</span> <span class="n">shape</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이런식으로 나타낼수 있다.<br />
펜은 컬러, 사이즈<br />
지우개는 사이즈<br />
도형은 여러 도형타입들이 있다고 했을때 Associated Value를 사용할수 있다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">Draw</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nf">pen</span><span class="p">(</span><span class="nv">size</span><span class="p">:</span> <span class="kt">CGFloat</span><span class="p">,</span> <span class="nv">color</span><span class="p">:</span> <span class="kt">UIColor</span><span class="p">)</span>
    <span class="k">case</span> <span class="nf">eraser</span><span class="p">(</span><span class="nv">size</span><span class="p">:</span> <span class="kt">CGFloat</span><span class="p">)</span>
    <span class="k">case</span> <span class="n">spoid</span>
    <span class="k">case</span> <span class="nf">shape</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">pen</span> <span class="o">=</span> <span class="kt">Draw</span><span class="o">.</span><span class="nf">pen</span><span class="p">(</span><span class="nv">size</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="nv">color</span><span class="p">:</span> <span class="o">.</span><span class="n">red</span><span class="p">)</span>
</code></pre></div></div>

<p>이렇게 사용가능하다.<br />
도형도 enum으로 나타낼수 있다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">Shape</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">line</span>
    <span class="k">case</span> <span class="n">square</span>
    <span class="k">case</span> <span class="n">circle</span>
<span class="p">}</span>

<span class="kd">enum</span> <span class="kt">Draw</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nf">pen</span><span class="p">(</span><span class="nv">size</span><span class="p">:</span> <span class="kt">CGFloat</span><span class="p">,</span> <span class="nv">color</span><span class="p">:</span> <span class="kt">UIColor</span><span class="p">)</span>
    <span class="k">case</span> <span class="nf">eraser</span><span class="p">(</span><span class="nv">size</span><span class="p">:</span> <span class="kt">CGFloat</span><span class="p">)</span>
    <span class="k">case</span> <span class="n">spoid</span>
    <span class="k">case</span> <span class="nf">shape</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="kt">Shape</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">drawType</span> <span class="o">=</span> <span class="kt">Draw</span><span class="o">.</span><span class="nf">pen</span><span class="p">(</span><span class="nv">size</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="nv">color</span><span class="p">:</span> <span class="o">.</span><span class="n">red</span><span class="p">)</span>
</code></pre></div></div>

<p>이렇게 pen을 만들었는데 pen의 size와 color를 가져오려면</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">switch</span> <span class="n">drawType</span> <span class="p">{</span>
    <span class="k">case</span> <span class="o">.</span><span class="nf">pen</span><span class="p">(</span><span class="k">let</span> <span class="nv">size</span><span class="p">,</span> <span class="k">let</span> <span class="nv">color</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"pen -&gt; size: </span><span class="se">\(</span><span class="n">size</span><span class="se">)</span><span class="s">, color: </span><span class="se">\(</span><span class="n">color</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="k">case</span> <span class="o">.</span><span class="nf">eraser</span><span class="p">(</span><span class="k">let</span> <span class="nv">size</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"eraser -&gt; size: </span><span class="se">\(</span><span class="n">size</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="k">case</span> <span class="o">.</span><span class="nv">spoid</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"spoid"</span><span class="p">)</span>
    <span class="k">case</span> <span class="o">.</span><span class="nf">shape</span><span class="p">(</span><span class="k">let</span> <span class="nv">shape</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"shape -&gt; </span><span class="se">\(</span><span class="n">shape</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pen -&gt; size: 5.0, color: UIExtendedSRGBColorSpace 1 0 0 1
</code></pre></div></div>

<p>switch로 가져올수 있다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="k">case</span> <span class="kd">let</span> <span class="o">.</span><span class="nf">pen</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">color</span><span class="p">)</span> <span class="o">=</span> <span class="n">drawType</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"size: </span><span class="se">\(</span><span class="n">size</span><span class="se">)</span><span class="s">, color: </span><span class="se">\(</span><span class="n">color</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>if case로도 가져올수 있다.</p>

<h4 id="enum-비교">enum 비교</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">line</span> <span class="o">=</span> <span class="kt">Shape</span><span class="o">.</span><span class="n">line</span>
<span class="k">let</span> <span class="nv">line2</span> <span class="o">=</span> <span class="kt">Shape</span><span class="o">.</span><span class="n">line</span>

<span class="nf">print</span><span class="p">(</span><span class="n">line</span> <span class="o">==</span> <span class="n">line2</span><span class="p">)</span>
</code></pre></div></div>

<p>이렇게 단순한 enum은 비교가 가능하다.<br />
하지만 Associated Value가 들어간 enum은 기본적인 ==으로 비교할수 없다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">Draw</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nf">pen</span><span class="p">(</span><span class="nv">size</span><span class="p">:</span> <span class="kt">CGFloat</span><span class="p">,</span> <span class="nv">color</span><span class="p">:</span> <span class="kt">UIColor</span><span class="p">)</span>
    <span class="k">case</span> <span class="nf">eraser</span><span class="p">(</span><span class="nv">size</span><span class="p">:</span> <span class="kt">CGFloat</span><span class="p">)</span>
    <span class="k">case</span> <span class="n">spoid</span>
    <span class="k">case</span> <span class="nf">shape</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="kt">Shape</span><span class="p">)</span>

    <span class="kd">static</span> <span class="kd">func</span> <span class="o">==</span><span class="p">(</span><span class="nv">lhs</span><span class="p">:</span> <span class="kt">Draw</span><span class="p">,</span> <span class="nv">rhs</span><span class="p">:</span> <span class="kt">Draw</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="p">(</span><span class="n">lhs</span><span class="p">,</span> <span class="n">rhs</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">case</span> <span class="nf">let</span> <span class="p">(</span><span class="o">.</span><span class="nf">pen</span><span class="p">(</span><span class="n">size1</span><span class="p">,</span> <span class="n">color1</span><span class="p">),</span> <span class="o">.</span><span class="nf">pen</span><span class="p">(</span><span class="n">size2</span><span class="p">,</span> <span class="n">color2</span><span class="p">)):</span>
            <span class="k">return</span> <span class="n">size1</span> <span class="o">==</span> <span class="n">size2</span> <span class="o">&amp;&amp;</span> <span class="n">color1</span> <span class="o">==</span> <span class="n">color2</span>
        <span class="k">case</span> <span class="nf">let</span> <span class="p">(</span><span class="o">.</span><span class="nf">eraser</span><span class="p">(</span><span class="n">size1</span><span class="p">),</span> <span class="o">.</span><span class="nf">eraser</span><span class="p">(</span><span class="n">size2</span><span class="p">)):</span>
            <span class="k">return</span> <span class="n">size1</span> <span class="o">==</span> <span class="n">size2</span>
        <span class="k">case</span> <span class="p">(</span><span class="o">.</span><span class="n">spoid</span><span class="p">,</span> <span class="o">.</span><span class="n">spoid</span><span class="p">):</span>
            <span class="k">return</span> <span class="kc">true</span>
        <span class="k">case</span> <span class="nf">let</span> <span class="p">(</span><span class="o">.</span><span class="nf">shape</span><span class="p">(</span><span class="n">type1</span><span class="p">),</span> <span class="o">.</span><span class="nf">shape</span><span class="p">(</span><span class="n">type2</span><span class="p">)):</span>
            <span class="k">return</span> <span class="n">type1</span> <span class="o">==</span> <span class="n">type2</span>
        <span class="k">default</span><span class="p">:</span>
            <span class="k">return</span> <span class="kc">false</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">pen</span> <span class="o">=</span> <span class="kt">Draw</span><span class="o">.</span><span class="nf">pen</span><span class="p">(</span><span class="nv">size</span><span class="p">:</span> <span class="mi">11</span><span class="p">,</span> <span class="nv">color</span><span class="p">:</span> <span class="o">.</span><span class="n">red</span><span class="p">)</span>
<span class="k">let</span> <span class="nv">spoid</span> <span class="o">=</span> <span class="kt">Draw</span><span class="o">.</span><span class="n">spoid</span>

<span class="nf">print</span><span class="p">(</span><span class="n">pen</span> <span class="o">==</span> <span class="n">spoid</span><span class="p">)</span>
</code></pre></div></div>

<p>이렇게 ==를 직접 만들어서 비교할수 있다.</p>

<blockquote>
  <p>lhs와 rhs는 Left-hand system, Right-hand system이란 뜻이다.</p>
</blockquote>

<h4 id="property">Property</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">Shape</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">line</span> <span class="o">=</span> <span class="s">"라인"</span>
    <span class="k">case</span> <span class="n">square</span> <span class="o">=</span> <span class="s">"사각형"</span>
    <span class="k">case</span> <span class="n">circle</span> <span class="o">=</span> <span class="s">"원"</span>
<span class="p">}</span>

<span class="kd">enum</span> <span class="kt">Draw</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nf">pen</span><span class="p">(</span><span class="nv">size</span><span class="p">:</span> <span class="kt">CGFloat</span><span class="p">,</span> <span class="nv">color</span><span class="p">:</span> <span class="kt">UIColor</span><span class="p">)</span>
    <span class="k">case</span> <span class="nf">eraser</span><span class="p">(</span><span class="nv">size</span><span class="p">:</span> <span class="kt">CGFloat</span><span class="p">)</span>
    <span class="k">case</span> <span class="n">spoid</span>
    <span class="k">case</span> <span class="nf">shape</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="kt">Shape</span><span class="p">)</span>

    <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="k">self</span> <span class="p">{</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">pen</span><span class="p">:</span>
            <span class="k">return</span> <span class="s">"펜"</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">eraser</span><span class="p">:</span>
            <span class="k">return</span> <span class="s">"지우개"</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">spoid</span><span class="p">:</span>
            <span class="k">return</span> <span class="s">"스포이드"</span>
        <span class="k">case</span> <span class="o">.</span><span class="nf">shape</span><span class="p">(</span><span class="k">let</span> <span class="nv">type</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">type</span><span class="o">.</span><span class="n">rawValue</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이렇게 enum에서 Property를 만들수 있고
method나 class도 만들수 있다.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/swift/2018/12/06/swift-enum/</guid>
                <description>
                    
                    Swift enum 써보기 (associated value)
                    
                </description>
                <pubDate>Thu, 06 Dec 2018 17:00:00 +0900</pubDate>
                <author>gwanho kim</author>
            </item>
        
    
        
            <item>
                <title>swift subscript</title>
                <link>http://localhost:4000/swift/2018/12/05/swift-subscript/</link>
                <content:encoded>
                    <![CDATA[
                    <h4 id="subscript">Subscript</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">subscript</span><span class="p">(</span><span class="nv">index</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="k">get</span> <span class="p">{</span>

    <span class="p">}</span>
    <span class="k">set</span> <span class="p">{</span>

    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>또는</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">subscript</span><span class="p">(</span><span class="nv">index</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="c1">// get만 있는 subscript</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이렇게 사용할수 있다.</p>

<p>Dictionary 타입에서는 key-value subscript로 구현되며 해당 key값의 옵셔널 타입을 받거나 리턴한다.<br />
Array 타입에서는 index를 받고 해당 index의 값을 받거나 리턴한다.</p>

<h4 id="example">Example</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">TimesTable</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">multiplier</span><span class="p">:</span> <span class="kt">Int</span>

    <span class="nf">subscript</span><span class="p">(</span><span class="nv">index</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">multiplier</span> <span class="o">*</span> <span class="n">index</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">timesTable</span> <span class="o">=</span> <span class="kt">TimesTable</span><span class="p">(</span><span class="nv">multiplier</span><span class="p">:</span> <span class="mi">3</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">timesTable</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">timesTable</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">timesTable</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3
6
9
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">Animal</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span>

    <span class="nf">subscript</span><span class="p">(</span><span class="nv">index</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">name</span> <span class="o">+</span> <span class="s">"</span><span class="se">\(</span><span class="n">index</span><span class="se">)</span><span class="s">"</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">lion</span> <span class="o">=</span> <span class="kt">Animal</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"사자"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">lion</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">lion</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">lion</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>

<span class="k">let</span> <span class="nv">dog</span> <span class="o">=</span> <span class="kt">Animal</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"개"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">dog</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">dog</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">dog</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>사자0
사자1
사자2
개0
개1
개2
</code></pre></div></div>

<p>index 인자값에는 Int뿐만 아니라 다른 타입들을 쓸수 있다.
리턴값도 동일하게 다른 타입들을 사용할 수 있다.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/swift/2018/12/05/swift-subscript/</guid>
                <description>
                    
                    Swift subscript 써보기
                    
                </description>
                <pubDate>Wed, 05 Dec 2018 17:00:00 +0900</pubDate>
                <author>gwanho kim</author>
            </item>
        
    
        
            <item>
                <title>swift swizzling 스위즐링</title>
                <link>http://localhost:4000/swift/2018/12/04/swift-swizzling/</link>
                <content:encoded>
                    <![CDATA[
                    <h4 id="method-swizzling">Method Swizzling</h4>

<p>스위즐링은 런타임에 해당 메서드를 내가 원하는 메서드로 바꿀 수 있다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">private</span> <span class="kd">func</span> <span class="nf">customViewWillAppear</span><span class="p">(</span><span class="n">_</span> <span class="nv">animated</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"customViewWillAppear 호출"</span><span class="p">)</span>

    <span class="p">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">func</span> <span class="nf">swizzleMethodInitialize</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">originalSelector</span> <span class="o">=</span> <span class="kd">#selector(</span><span class="nf">viewWillAppear(_:)</span><span class="kd">)</span>
        <span class="k">let</span> <span class="nv">swizzledSelector</span> <span class="o">=</span> <span class="kd">#selector(</span><span class="nf">customViewWillAppear(_:)</span><span class="kd">)</span>

        <span class="k">let</span> <span class="nv">originalMethod</span> <span class="o">=</span> <span class="nf">class_getInstanceMethod</span><span class="p">(</span><span class="kt">UIViewController</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="n">originalSelector</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">swizzledMethod</span> <span class="o">=</span> <span class="nf">class_getInstanceMethod</span><span class="p">(</span><span class="kt">UIViewController</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="n">swizzledSelector</span><span class="p">)</span>

        <span class="k">if</span> <span class="k">let</span> <span class="nv">originalMethod</span> <span class="o">=</span> <span class="n">originalMethod</span><span class="p">,</span> <span class="k">let</span> <span class="nv">swizzledMethod</span> <span class="o">=</span> <span class="n">swizzledMethod</span> <span class="p">{</span>
            <span class="nf">method_exchangeImplementations</span><span class="p">(</span><span class="n">originalMethod</span><span class="p">,</span> <span class="n">swizzledMethod</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@UIApplicationMain</span>
<span class="kd">class</span> <span class="kt">AppDelegate</span><span class="p">:</span> <span class="kt">UIResponder</span><span class="p">,</span> <span class="kt">UIApplicationDelegate</span> <span class="p">{</span>

    <span class="k">var</span> <span class="nv">window</span><span class="p">:</span> <span class="kt">UIWindow</span><span class="p">?</span>

    <span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="n">_</span> <span class="nv">application</span><span class="p">:</span> <span class="kt">UIApplication</span><span class="p">,</span> <span class="n">didFinishLaunchingWithOptions</span> <span class="nv">launchOptions</span><span class="p">:</span> <span class="p">[</span><span class="kt">UIApplication</span><span class="o">.</span><span class="kt">LaunchOptionsKey</span><span class="p">:</span> <span class="kt">Any</span><span class="p">]?)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="c1">// Override point for customization after application launch.</span>

        <span class="kt">UIViewController</span><span class="o">.</span><span class="nf">swizzleMethodInitialize</span><span class="p">()</span>

        <span class="k">return</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이렇게 하면 UIViewController에서 viewWillAppear가 호출이 될때 내가 만든 메서드가 호출이 된다.</p>

<h4 id="swizzling할-메서드의-selector를-가져온다">Swizzling할 메서드의 Selector를 가져온다.</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">originalSelector</span> <span class="o">=</span> <span class="kd">#selector(</span><span class="nf">viewWillAppear(_:)</span><span class="kd">)</span>
<span class="k">let</span> <span class="nv">swizzledSelector</span> <span class="o">=</span> <span class="kd">#selector(</span><span class="nf">customViewWillAppear(_:)</span><span class="kd">)</span>
</code></pre></div></div>

<h4 id="uiviewcontroller-클래스의-인스턴스메서드를-가져온다">UIViewController 클래스의 인스턴스메서드를 가져온다.</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">originalMethod</span> <span class="o">=</span> <span class="nf">class_getInstanceMethod</span><span class="p">(</span><span class="kt">UIViewController</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="n">originalSelector</span><span class="p">)</span>
<span class="k">let</span> <span class="nv">swizzledMethod</span> <span class="o">=</span> <span class="nf">class_getInstanceMethod</span><span class="p">(</span><span class="kt">UIViewController</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="n">swizzledSelector</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="originalmethod와-swizzledmethod를-바꾼다">originalMethod와 swizzledMethod를 바꾼다.</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">method_exchangeImplementations</span><span class="p">(</span><span class="n">originalMethod</span><span class="p">,</span> <span class="n">swizzledMethod</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="단점">단점</h4>

<ol>
  <li>firebase, analytics 등의 프레임워크에서 스위즐링을 이미 사용하고 있을수 있다.</li>
  <li>디버깅하기가 어려워진다.</li>
</ol>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/swift/2018/12/04/swift-swizzling/</guid>
                <description>
                    
                    Swift swizzling 써보기
                    
                </description>
                <pubDate>Tue, 04 Dec 2018 17:00:00 +0900</pubDate>
                <author>gwanho kim</author>
            </item>
        
    
        
            <item>
                <title>swift IBDesignable, IBInspectable</title>
                <link>http://localhost:4000/swift/2018/12/03/swift-face-detector/</link>
                <content:encoded>
                    <![CDATA[
                    <h4 id="customview-ibdesignable-만들기">CustomView IBDesignable 만들기</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@IBDesignable</span>
<span class="kd">class</span> <span class="kt">CustomView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>

<span class="p">}</span>
</code></pre></div></div>

<h4 id="customview에-ibinspectable-추가하기">CustomView에 IBInspectable 추가하기</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@IBDesignable</span>
<span class="kd">class</span> <span class="kt">CustomView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>
    <span class="kd">@IBInspectable</span>
    <span class="k">var</span> <span class="nv">labelText</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">set</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">newValue</span>
        <span class="p">}</span>
        <span class="k">get</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">self</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">text</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">@IBInspectable</span>
    <span class="k">var</span> <span class="nv">labelTextColor</span><span class="p">:</span> <span class="kt">UIColor</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">set</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="n">newValue</span>
        <span class="p">}</span>
        <span class="k">get</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">self</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">textColor</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">@IBInspectable</span>
    <span class="k">var</span> <span class="nv">labelBackgroundColor</span><span class="p">:</span> <span class="kt">UIColor</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">set</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="n">newValue</span>
        <span class="p">}</span>
        <span class="k">get</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">self</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">backgroundColor</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">label</span><span class="p">:</span> <span class="kt">UILabel</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">label</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
        <span class="n">label</span><span class="o">.</span><span class="n">font</span> <span class="o">=</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">boldSystemFont</span><span class="p">(</span><span class="nv">ofSize</span><span class="p">:</span> <span class="mi">22</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="n">label</span><span class="p">)</span>
        <span class="n">label</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">addConstraints</span><span class="p">([</span>
            <span class="kt">NSLayoutConstraint</span><span class="p">(</span><span class="nv">item</span><span class="p">:</span> <span class="k">self</span><span class="p">,</span> <span class="nv">attribute</span><span class="p">:</span> <span class="o">.</span><span class="n">centerX</span><span class="p">,</span> <span class="nv">relatedBy</span><span class="p">:</span> <span class="o">.</span><span class="n">equal</span><span class="p">,</span> <span class="nv">toItem</span><span class="p">:</span> <span class="n">label</span><span class="p">,</span> <span class="nv">attribute</span><span class="p">:</span> <span class="o">.</span><span class="n">centerX</span><span class="p">,</span> <span class="nv">multiplier</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">0</span><span class="p">),</span>
            <span class="kt">NSLayoutConstraint</span><span class="p">(</span><span class="nv">item</span><span class="p">:</span> <span class="k">self</span><span class="p">,</span> <span class="nv">attribute</span><span class="p">:</span> <span class="o">.</span><span class="n">centerY</span><span class="p">,</span> <span class="nv">relatedBy</span><span class="p">:</span> <span class="o">.</span><span class="n">equal</span><span class="p">,</span> <span class="nv">toItem</span><span class="p">:</span> <span class="n">label</span><span class="p">,</span> <span class="nv">attribute</span><span class="p">:</span> <span class="o">.</span><span class="n">centerY</span><span class="p">,</span> <span class="nv">multiplier</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">0</span><span class="p">),</span>
            <span class="p">])</span>
        <span class="k">return</span> <span class="n">label</span>
    <span class="p">}()</span>

    <span class="k">override</span> <span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="n">frame</span><span class="p">)</span>

    <span class="p">}</span>

    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="n">coder</span> <span class="nv">aDecoder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">coder</span><span class="p">:</span> <span class="n">aDecoder</span><span class="p">)</span>

    <span class="p">}</span>

    <span class="k">override</span> <span class="kd">func</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">awakeFromNib</span><span class="p">()</span>

    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="storyboard나-xib에서-사용하기">Storyboard나 xib에서 사용하기</h4>

<p><img src="/tec/images/2018/12/designable/1.png" alt="Alt Text" /></p>

<p><img src="/tec/images/2018/12/designable/2.png" alt="Alt Text" /></p>

<h4 id="기타">기타</h4>

<p>Storyboard나 xib에서 사용할 경우</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">override</span> <span class="kd">func</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="nf">awakeFromNib</span><span class="p">()</span>

<span class="p">}</span>
</code></pre></div></div>

<p>이 호출된다.</p>

<p>코드상에서</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">customView</span> <span class="o">=</span> <span class="kt">CustomView</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span> <span class="nv">width</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mi">100</span><span class="p">))</span>
</code></pre></div></div>

<p>처럼 사용할 경우</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">override</span> <span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="n">frame</span><span class="p">)</span>

<span class="p">}</span>

<span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="n">coder</span> <span class="nv">aDecoder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">coder</span><span class="p">:</span> <span class="n">aDecoder</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>init이 호출되고
required init?(coder aDecoder: NSCoder) 을 같이 적어주어야 한다.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/swift/2018/12/03/swift-face-detector/</guid>
                <description>
                    
                    Swift IBDesignable, IBInspectable 만들기
                    
                </description>
                <pubDate>Mon, 03 Dec 2018 17:00:00 +0900</pubDate>
                <author>gwanho kim</author>
            </item>
        
    
        
            <item>
                <title>swift Image Face Detector, Blur</title>
                <link>http://localhost:4000/swift/2018/12/02/swift-designable-inspectable/</link>
                <content:encoded>
                    <![CDATA[
                    <p><img src="/tec/images/2018/12/faceDetector/blur.gif" width="200px" /></p>

<h4 id="cidetector를-사용하여-face를-찾기">CIDetector를 사용하여 face를 찾기</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">func</span> <span class="nf">faceDetector</span><span class="p">(</span><span class="n">_</span> <span class="nv">image</span><span class="p">:</span> <span class="kt">UIImage</span><span class="p">?)</span> <span class="p">{</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">image</span> <span class="o">=</span> <span class="n">image</span><span class="p">,</span>
        <span class="k">let</span> <span class="nv">ciImage</span> <span class="o">=</span> <span class="kt">CIImage</span><span class="p">(</span><span class="nv">image</span><span class="p">:</span> <span class="n">image</span><span class="p">),</span>
        <span class="k">let</span> <span class="nv">ciDetector</span> <span class="o">=</span> <span class="kt">CIDetector</span><span class="p">(</span>
            <span class="nv">ofType</span><span class="p">:</span> <span class="kt">CIDetectorTypeFace</span><span class="p">,</span>
            <span class="nv">context</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span>
            <span class="nv">options</span><span class="p">:</span> <span class="p">[</span><span class="kt">CIDetectorAccuracy</span> <span class="p">:</span> <span class="kt">CIDetectorAccuracyHigh</span><span class="p">]</span>
        <span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">nil</span> <span class="p">}</span>

    <span class="k">let</span> <span class="nv">features</span> <span class="o">=</span> <span class="n">ciDetector</span><span class="o">.</span><span class="nf">features</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="n">ciImage</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">features</span><span class="o">.</span><span class="n">isEmpty</span> <span class="p">{</span> <span class="k">return</span> <span class="n">image</span> <span class="p">}</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">features</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="찾은-face에-blur-적용하기">찾은 face에 blur 적용하기</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">func</span> <span class="nf">blur</span><span class="p">(</span><span class="n">_</span> <span class="nv">image</span><span class="p">:</span> <span class="kt">UIImage</span><span class="p">?)</span> <span class="o">-&gt;</span> <span class="kt">UIImage</span><span class="p">?</span> <span class="p">{</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">image</span> <span class="o">=</span> <span class="n">image</span><span class="p">,</span>
        <span class="k">let</span> <span class="nv">ciImage</span> <span class="o">=</span> <span class="kt">CIImage</span><span class="p">(</span><span class="nv">image</span><span class="p">:</span> <span class="n">image</span><span class="p">),</span>
        <span class="k">let</span> <span class="nv">ciDetector</span> <span class="o">=</span> <span class="kt">CIDetector</span><span class="p">(</span>
            <span class="nv">ofType</span><span class="p">:</span> <span class="kt">CIDetectorTypeFace</span><span class="p">,</span>
            <span class="nv">context</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span>
            <span class="nv">options</span><span class="p">:</span> <span class="p">[</span><span class="kt">CIDetectorAccuracy</span> <span class="p">:</span> <span class="kt">CIDetectorAccuracyHigh</span><span class="p">]</span>
        <span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">nil</span> <span class="p">}</span>

    <span class="k">let</span> <span class="nv">features</span> <span class="o">=</span> <span class="n">ciDetector</span><span class="o">.</span><span class="nf">features</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="n">ciImage</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">features</span><span class="o">.</span><span class="n">isEmpty</span> <span class="p">{</span> <span class="k">return</span> <span class="n">image</span> <span class="p">}</span>

    <span class="k">guard</span> <span class="k">let</span> <span class="nv">pixelateFiler</span> <span class="o">=</span> <span class="kt">CIFilter</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"CIPixellate"</span><span class="p">),</span>
        <span class="k">let</span> <span class="nv">composite</span> <span class="o">=</span> <span class="kt">CIFilter</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"CIBlendWithMask"</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="n">image</span> <span class="p">}</span>

    <span class="n">pixelateFiler</span><span class="o">.</span><span class="nf">setValue</span><span class="p">(</span><span class="n">ciImage</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="n">kCIInputImageKey</span><span class="p">)</span>
    <span class="n">pixelateFiler</span><span class="o">.</span><span class="nf">setValue</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="n">ciImage</span><span class="o">.</span><span class="n">extent</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">ciImage</span><span class="o">.</span><span class="n">extent</span><span class="o">.</span><span class="n">height</span><span class="p">)</span> <span class="o">/</span> <span class="mf">60.0</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="n">kCIInputScaleKey</span><span class="p">)</span>

    <span class="k">var</span> <span class="nv">maskImage</span><span class="p">:</span> <span class="kt">CIImage</span><span class="p">?</span>

    <span class="n">features</span><span class="o">.</span><span class="nf">forEach</span><span class="p">({</span> <span class="p">(</span><span class="n">feature</span><span class="p">)</span> <span class="k">in</span>
        <span class="k">let</span> <span class="nv">centerX</span> <span class="o">=</span> <span class="n">feature</span><span class="o">.</span><span class="n">bounds</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">feature</span><span class="o">.</span><span class="n">bounds</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="mf">2.0</span>
        <span class="k">let</span> <span class="nv">centerY</span> <span class="o">=</span> <span class="n">feature</span><span class="o">.</span><span class="n">bounds</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">feature</span><span class="o">.</span><span class="n">bounds</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">height</span> <span class="o">/</span> <span class="mf">2.0</span>
        <span class="k">let</span> <span class="nv">radius</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">feature</span><span class="o">.</span><span class="n">bounds</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">feature</span><span class="o">.</span><span class="n">bounds</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">height</span><span class="p">)</span> <span class="o">/</span> <span class="mf">1.5</span>

        <span class="k">let</span> <span class="nv">radialGradient</span> <span class="o">=</span> <span class="kt">CIFilter</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"CIRadialGradient"</span><span class="p">)</span>
        <span class="n">radialGradient</span><span class="p">?</span><span class="o">.</span><span class="nf">setValue</span><span class="p">(</span><span class="n">radius</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="s">"inputRadius0"</span><span class="p">)</span>
        <span class="n">radialGradient</span><span class="p">?</span><span class="o">.</span><span class="nf">setValue</span><span class="p">(</span><span class="n">radius</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="s">"inputRadius1"</span><span class="p">)</span>
        <span class="n">radialGradient</span><span class="p">?</span><span class="o">.</span><span class="nf">setValue</span><span class="p">(</span><span class="kt">CIColor</span><span class="p">(</span><span class="nv">red</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">green</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">blue</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">alpha</span><span class="p">:</span> <span class="mi">1</span><span class="p">),</span> <span class="nv">forKey</span><span class="p">:</span> <span class="s">"inputColor0"</span><span class="p">)</span>
        <span class="n">radialGradient</span><span class="p">?</span><span class="o">.</span><span class="nf">setValue</span><span class="p">(</span><span class="kt">CIColor</span><span class="p">(</span><span class="nv">red</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">green</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">blue</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">alpha</span><span class="p">:</span> <span class="mi">0</span><span class="p">),</span> <span class="nv">forKey</span><span class="p">:</span> <span class="s">"inputColor1"</span><span class="p">)</span>
        <span class="n">radialGradient</span><span class="p">?</span><span class="o">.</span><span class="nf">setValue</span><span class="p">(</span><span class="kt">CIVector</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">centerX</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">centerY</span><span class="p">),</span> <span class="nv">forKey</span><span class="p">:</span> <span class="n">kCIInputCenterKey</span><span class="p">)</span>

        <span class="k">let</span> <span class="nv">circleImage</span> <span class="o">=</span> <span class="n">radialGradient</span><span class="p">?</span><span class="o">.</span><span class="n">outputImage</span><span class="p">?</span><span class="o">.</span><span class="nf">cropped</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="n">ciImage</span><span class="o">.</span><span class="n">extent</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">maskImage</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="n">maskImage</span> <span class="o">=</span> <span class="n">circleImage</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">let</span> <span class="nv">filter</span> <span class="o">=</span>  <span class="kt">CIFilter</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"CISourceOverCompositing"</span><span class="p">)</span>
            <span class="n">filter</span><span class="p">?</span><span class="o">.</span><span class="nf">setValue</span><span class="p">(</span><span class="n">circleImage</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="n">kCIInputImageKey</span><span class="p">)</span>
            <span class="n">filter</span><span class="p">?</span><span class="o">.</span><span class="nf">setValue</span><span class="p">(</span><span class="n">maskImage</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="n">kCIInputBackgroundImageKey</span><span class="p">)</span>
            <span class="n">maskImage</span> <span class="o">=</span> <span class="n">filter</span><span class="p">?</span><span class="o">.</span><span class="n">outputImage</span>
        <span class="p">}</span>
    <span class="p">})</span>

    <span class="n">composite</span><span class="o">.</span><span class="nf">setValue</span><span class="p">(</span><span class="n">pixelateFiler</span><span class="o">.</span><span class="n">outputImage</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="n">kCIInputImageKey</span><span class="p">)</span>
    <span class="n">composite</span><span class="o">.</span><span class="nf">setValue</span><span class="p">(</span><span class="n">ciImage</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="n">kCIInputBackgroundImageKey</span><span class="p">)</span>
    <span class="n">composite</span><span class="o">.</span><span class="nf">setValue</span><span class="p">(</span><span class="n">maskImage</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="n">kCIInputMaskImageKey</span><span class="p">)</span>

    <span class="k">let</span> <span class="nv">context</span> <span class="o">=</span> <span class="kt">CIContext</span><span class="p">(</span><span class="nv">options</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">outputImage</span> <span class="o">=</span> <span class="n">composite</span><span class="o">.</span><span class="n">outputImage</span><span class="p">,</span>
        <span class="k">let</span> <span class="nv">cgImage</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="nf">createCGImage</span><span class="p">(</span><span class="n">outputImage</span><span class="p">,</span> <span class="nv">from</span><span class="p">:</span> <span class="n">outputImage</span><span class="o">.</span><span class="n">extent</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="n">image</span> <span class="p">}</span>

    <span class="k">return</span> <span class="kt">UIImage</span><span class="p">(</span><span class="nv">cgImage</span><span class="p">:</span> <span class="n">cgImage</span><span class="p">,</span> <span class="nv">scale</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">orientation</span><span class="p">:</span> <span class="n">image</span><span class="o">.</span><span class="n">imageOrientation</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/tec/images/2018/12/faceDetector/blur.png" alt="Alt Text" /></p>

<h4 id="찾은-face에-이미지-적용하기">찾은 face에 이미지 적용하기</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">func</span> <span class="nf">imageAdd</span><span class="p">(</span><span class="n">_</span> <span class="nv">image</span><span class="p">:</span> <span class="kt">UIImage</span><span class="p">?)</span> <span class="o">-&gt;</span> <span class="kt">UIImage</span><span class="p">?</span> <span class="p">{</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">image</span> <span class="o">=</span> <span class="n">image</span><span class="p">,</span>
        <span class="k">let</span> <span class="nv">ciImage</span> <span class="o">=</span> <span class="kt">CIImage</span><span class="p">(</span><span class="nv">image</span><span class="p">:</span> <span class="n">image</span><span class="p">),</span>
        <span class="k">let</span> <span class="nv">ciDetector</span> <span class="o">=</span> <span class="kt">CIDetector</span><span class="p">(</span>
            <span class="nv">ofType</span><span class="p">:</span> <span class="kt">CIDetectorTypeFace</span><span class="p">,</span>
            <span class="nv">context</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span>
            <span class="nv">options</span><span class="p">:</span> <span class="p">[</span><span class="kt">CIDetectorAccuracy</span> <span class="p">:</span> <span class="kt">CIDetectorAccuracyHigh</span><span class="p">]</span>
        <span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">nil</span> <span class="p">}</span>

    <span class="k">let</span> <span class="nv">features</span> <span class="o">=</span> <span class="n">ciDetector</span><span class="o">.</span><span class="nf">features</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="n">ciImage</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">features</span><span class="o">.</span><span class="n">isEmpty</span> <span class="p">{</span> <span class="k">return</span> <span class="n">image</span> <span class="p">}</span>

    <span class="kt">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">image</span><span class="o">.</span><span class="n">size</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">image</span><span class="o">.</span><span class="nf">draw</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">width</span><span class="p">:</span> <span class="n">image</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="n">image</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">height</span><span class="p">))</span>
    <span class="n">features</span><span class="o">.</span><span class="n">forEach</span> <span class="p">{</span>  <span class="p">(</span><span class="n">feature</span><span class="p">)</span> <span class="k">in</span>
        <span class="k">var</span> <span class="nv">rect</span> <span class="o">=</span> <span class="kt">CGRect</span><span class="p">()</span>
        <span class="k">let</span> <span class="nv">originalMaxSize</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">feature</span><span class="o">.</span><span class="n">bounds</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">feature</span><span class="o">.</span><span class="n">bounds</span><span class="o">.</span><span class="n">height</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">maxSize</span> <span class="o">=</span> <span class="n">originalMaxSize</span> <span class="o">*</span> <span class="mf">1.5</span>

        <span class="n">rect</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">feature</span><span class="o">.</span><span class="n">bounds</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">x</span> <span class="o">-</span> <span class="p">(</span><span class="n">maxSize</span> <span class="o">-</span> <span class="n">originalMaxSize</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>
        <span class="n">rect</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="p">(</span><span class="n">feature</span><span class="o">.</span><span class="n">bounds</span><span class="o">.</span><span class="n">height</span> <span class="o">+</span> <span class="n">feature</span><span class="o">.</span><span class="n">bounds</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">y</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="n">maxSize</span> <span class="o">-</span> <span class="n">originalMaxSize</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="p">(</span><span class="n">maxSize</span> <span class="o">-</span> <span class="n">originalMaxSize</span><span class="p">)</span><span class="o">/</span><span class="mi">8</span>
        <span class="n">rect</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">maxSize</span>
        <span class="n">rect</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">maxSize</span>

        <span class="kt">UIImage</span><span class="p">(</span><span class="nv">named</span><span class="p">:</span> <span class="s">"2.png"</span><span class="p">)?</span><span class="o">.</span><span class="nf">draw</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="n">rect</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">let</span> <span class="nv">imageValue</span> <span class="o">=</span> <span class="kt">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">()</span>
    <span class="kt">UIGraphicsEndImageContext</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">imageValue</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/tec/images/2018/12/faceDetector/image.png" alt="Alt Text" /></p>

<p><a href="/tec/images/2018/12/faceDetector/ViewController.swift">예제</a></p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/swift/2018/12/02/swift-designable-inspectable/</guid>
                <description>
                    
                    Swift 이미지에 얼굴찾고 얼굴 모자이크처리, 이미지로 씌우기
                    
                </description>
                <pubDate>Sun, 02 Dec 2018 17:00:00 +0900</pubDate>
                <author>gwanho kim</author>
            </item>
        
    
        
            <item>
                <title>swift UILabel Text Gradation</title>
                <link>http://localhost:4000/swift/2018/11/25/swift-label-text-gradation/</link>
                <content:encoded>
                    <![CDATA[
                    <p><a href="https://github.com/pikachu987/TextGradation">예제</a></p>

<p><img src="/tec/images/2018/11/textGradation/text.png" alt="Alt Text" /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">makeLabel</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">UILabel</span><span class="p">?</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">label</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
    <span class="n">label</span><span class="o">.</span><span class="n">frame</span> <span class="o">=</span> <span class="kt">CGRect</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">150</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="nv">width</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mi">20</span><span class="p">)</span>
    <span class="n">label</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"Hello World!"</span>

    <span class="k">let</span> <span class="nv">textSize</span> <span class="o">=</span> <span class="p">(</span><span class="n">label</span><span class="o">.</span><span class="n">text</span> <span class="p">??</span> <span class="s">""</span><span class="p">)</span><span class="o">.</span><span class="nf">size</span><span class="p">(</span><span class="nv">withAttributes</span><span class="p">:</span> <span class="p">[</span><span class="kt">NSAttributedString</span><span class="o">.</span><span class="kt">Key</span><span class="o">.</span><span class="nv">font</span> <span class="p">:</span> <span class="n">label</span><span class="o">.</span><span class="n">font</span><span class="p">])</span>

    <span class="k">let</span> <span class="nv">tempLabel</span> <span class="o">=</span>  <span class="kt">UILabel</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">width</span><span class="p">:</span> <span class="n">textSize</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="o">.</span><span class="n">greatestFiniteMagnitude</span><span class="p">))</span>
    <span class="n">tempLabel</span><span class="o">.</span><span class="n">numberOfLines</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">tempLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">label</span><span class="o">.</span><span class="n">text</span>
    <span class="n">tempLabel</span><span class="o">.</span><span class="n">font</span> <span class="o">=</span> <span class="n">label</span><span class="o">.</span><span class="n">font</span>
    <span class="n">tempLabel</span><span class="o">.</span><span class="nf">sizeToFit</span><span class="p">()</span>
    <span class="k">let</span> <span class="nv">height</span> <span class="o">=</span> <span class="n">tempLabel</span><span class="o">.</span><span class="n">frame</span><span class="o">.</span><span class="n">height</span>

    <span class="k">guard</span> <span class="k">let</span> <span class="nv">image</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="nf">image</span><span class="p">(</span><span class="kt">CGSize</span><span class="p">(</span><span class="nv">width</span><span class="p">:</span> <span class="n">tempLabel</span><span class="o">.</span><span class="n">frame</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="n">height</span><span class="p">))</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">nil</span> <span class="p">}</span>

    <span class="n">label</span><span class="o">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="kt">UIColor</span><span class="p">(</span><span class="nv">patternImage</span><span class="p">:</span> <span class="n">image</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">label</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">image</span><span class="p">(</span><span class="n">_</span> <span class="nv">size</span><span class="p">:</span> <span class="kt">CGSize</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UIImage</span><span class="p">?</span> <span class="p">{</span>
    <span class="kt">UIGraphicsBeginImageContext</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
    <span class="k">defer</span> <span class="p">{</span> <span class="kt">UIGraphicsEndImageContext</span><span class="p">()</span> <span class="p">}</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">context</span> <span class="o">=</span> <span class="kt">UIGraphicsGetCurrentContext</span><span class="p">()</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">nil</span> <span class="p">}</span>
    <span class="kt">UIGraphicsPushContext</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>

    <span class="k">guard</span> <span class="k">let</span> <span class="nv">gradient</span> <span class="o">=</span> <span class="kt">CGGradient</span><span class="p">(</span><span class="nv">colorsSpace</span><span class="p">:</span> <span class="kt">CGColorSpaceCreateDeviceRGB</span><span class="p">(),</span> <span class="nv">colors</span><span class="p">:</span> <span class="p">[</span><span class="kt">UIColor</span><span class="o">.</span><span class="n">red</span><span class="o">.</span><span class="n">cgColor</span><span class="p">,</span> <span class="kt">UIColor</span><span class="o">.</span><span class="n">black</span><span class="o">.</span><span class="n">cgColor</span><span class="p">]</span> <span class="k">as</span> <span class="kt">CFArray</span><span class="p">,</span> <span class="nv">locations</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">nil</span> <span class="p">}</span>
    <span class="n">context</span><span class="o">.</span><span class="nf">drawLinearGradient</span><span class="p">(</span><span class="n">gradient</span><span class="p">,</span> <span class="nv">start</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">size</span><span class="o">.</span><span class="n">height</span><span class="p">),</span> <span class="nv">end</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">size</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">size</span><span class="o">.</span><span class="n">height</span><span class="p">),</span> <span class="nv">options</span><span class="p">:</span> <span class="p">[])</span>

    <span class="kt">UIGraphicsPopContext</span><span class="p">()</span>
    <span class="k">return</span> <span class="kt">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/swift/2018/11/25/swift-label-text-gradation/</guid>
                <description>
                    
                    Swift UILabel의 텍스트에 Gradation 추가하기
                    
                </description>
                <pubDate>Sun, 25 Nov 2018 17:00:00 +0900</pubDate>
                <author>gwanho kim</author>
            </item>
        
    
        
            <item>
                <title>swift PHAsset, Collections, Image progress</title>
                <link>http://localhost:4000/swift/2018/11/22/swift-image-asset/</link>
                <content:encoded>
                    <![CDATA[
                    <p><a href="/tec/images/2018/11/imageAsset/SimpleImagePicker.zip">예제 다운</a></p>

<h4 id="1-infoplist">1. Info.plist</h4>

<p>Privacy - Photo Library Usage Description을 추가한다.</p>

<p><img src="/tec/images/2018/11/imageAsset/info.png" alt="Alt Text" /></p>

<h4 id="2-import">2. import</h4>

<p>Photos 를 import한다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Photos</span>
</code></pre></div></div>

<h4 id="3-phphotolibrarychangeobserver">3. PHPhotoLibraryChangeObserver</h4>

<p>PHPhotoLibraryChangeObserver 를 컨트롤러에 등록한다.
PHPhotoLibraryChangeObserver 는 이미지가 추가되거나 삭제되거나 수정됬을때 호출이 된다.
deinit될때 해제되어야 한다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="kd">deinit</span> <span class="p">{</span>
        <span class="kt">PHPhotoLibrary</span><span class="o">.</span><span class="nf">shared</span><span class="p">()</span><span class="o">.</span><span class="nf">unregisterChangeObserver</span><span class="p">(</span><span class="k">self</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="kt">PHPhotoLibrary</span><span class="o">.</span><span class="nf">shared</span><span class="p">()</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="k">self</span><span class="p">)</span>
    <span class="p">}</span>  
<span class="p">}</span>

<span class="c1">// MARK: PHPhotoLibraryChangeObserver</span>
<span class="kd">extension</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">PHPhotoLibraryChangeObserver</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">photoLibraryDidChange</span><span class="p">(</span><span class="n">_</span> <span class="nv">changeInstance</span><span class="p">:</span> <span class="kt">PHChange</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// fetchData</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="4-이미지-authorization">4. 이미지 Authorization</h4>

<p>이미지 권한 체크를 한다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="kt">PHPhotoLibrary</span><span class="o">.</span><span class="nf">authorizationStatus</span><span class="p">()</span> <span class="o">==</span> <span class="o">.</span><span class="n">authorized</span> <span class="p">{</span>
    <span class="c1">// fetchData</span>
<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="kt">PHPhotoLibrary</span><span class="o">.</span><span class="nf">authorizationStatus</span><span class="p">()</span> <span class="o">==</span> <span class="o">.</span><span class="n">denied</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Permission Denied"</span><span class="p">)</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="kt">PHPhotoLibrary</span><span class="o">.</span><span class="nf">requestAuthorization</span><span class="p">()</span> <span class="p">{</span> <span class="p">(</span><span class="n">status</span><span class="p">)</span> <span class="k">in</span>
        <span class="k">switch</span> <span class="n">status</span> <span class="p">{</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">authorized</span><span class="p">:</span>
            <span class="c1">// fetchData</span>
            <span class="k">break</span>
        <span class="k">default</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"Permission Denied"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="5-앨범-리스트-가져오기">5. 앨범 리스트 가져오기</h4>

<p>앨범 리스트를 가져온다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">PHAssetCollection</span><span class="o">.</span><span class="nf">fetchAssetCollections</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="kt">PHAssetCollectionType</span><span class="o">.</span><span class="n">smartAlbum</span><span class="p">,</span> <span class="nv">subtype</span><span class="p">:</span> <span class="kt">PHAssetCollectionSubtype</span><span class="o">.</span><span class="n">any</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="kt">PHFetchOptions</span><span class="p">())</span><span class="o">.</span><span class="n">enumerateObjects</span> <span class="p">{</span> <span class="p">(</span><span class="n">collection</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="k">in</span>
    <span class="k">let</span> <span class="nv">count</span> <span class="o">=</span> <span class="kt">PHAsset</span><span class="o">.</span><span class="nf">fetchAssets</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="n">collection</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span><span class="o">.</span><span class="n">count</span> <span class="c1">// 앨범안의 사진 갯수</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">collection</span><span class="p">);</span> <span class="c1">// 앨범</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="6-앨범을-통해-사진을-가져오기">6. 앨범을 통해 사진을 가져오기</h4>

<p>앨범을 통해 사진 리스트를 가져온다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">assets</span> <span class="o">=</span> <span class="p">[</span><span class="kt">PHAsset</span><span class="p">]()</span>
<span class="kt">PHAsset</span><span class="o">.</span><span class="nf">fetchAssets</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="n">collection</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="kt">PHFetchOptions</span><span class="p">())</span><span class="o">.</span><span class="nf">enumerateObjects</span><span class="p">({</span> <span class="p">(</span><span class="n">asset</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="k">in</span>
    <span class="n">assets</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">asset</span><span class="p">)</span>
<span class="p">})</span>
<span class="nf">print</span><span class="p">(</span><span class="n">assets</span><span class="p">);</span>
</code></pre></div></div>

<h4 id="7-phasset의-이미지-추출">7. PHAsset의 이미지 추출</h4>

<p>PHCachingImageManager를 이용하여 PHAsset의 이미지를 추출한다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">collectionView</span><span class="p">(</span><span class="n">_</span> <span class="nv">collectionView</span><span class="p">:</span> <span class="kt">UICollectionView</span><span class="p">,</span> <span class="n">cellForItemAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UICollectionViewCell</span> <span class="p">{</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">collectionView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withReuseIdentifier</span><span class="p">:</span> <span class="kt">PictureCell</span><span class="o">.</span><span class="n">identifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">PictureCell</span> <span class="k">else</span> <span class="p">{</span> <span class="nf">fatalError</span><span class="p">()</span> <span class="p">}</span>

    <span class="k">let</span> <span class="nv">imageRequestOptions</span> <span class="o">=</span> <span class="kt">PHImageRequestOptions</span><span class="p">()</span>
    <span class="n">imageRequestOptions</span><span class="o">.</span><span class="n">isSynchronous</span> <span class="o">=</span> <span class="kc">true</span>
    <span class="n">imageRequestOptions</span><span class="o">.</span><span class="n">resizeMode</span> <span class="o">=</span> <span class="o">.</span><span class="n">fast</span>
    <span class="n">imageRequestOptions</span><span class="o">.</span><span class="n">isNetworkAccessAllowed</span> <span class="o">=</span> <span class="kc">true</span>
    <span class="n">imageRequestOptions</span><span class="o">.</span><span class="n">deliveryMode</span> <span class="o">=</span> <span class="o">.</span><span class="n">highQualityFormat</span>

    <span class="k">let</span> <span class="nv">size</span> <span class="o">=</span> <span class="kt">CGSize</span><span class="p">(</span><span class="nv">width</span><span class="p">:</span> <span class="kt">UIScreen</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="n">bounds</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="kt">UIScreen</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="n">bounds</span><span class="o">.</span><span class="n">width</span><span class="p">)</span>
    <span class="kt">PHCachingImageManager</span><span class="p">()</span><span class="o">.</span><span class="nf">requestImage</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">assets</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">],</span> <span class="nv">targetSize</span><span class="p">:</span> <span class="n">size</span><span class="p">,</span> <span class="nv">contentMode</span><span class="p">:</span> <span class="o">.</span><span class="n">aspectFit</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="n">imageRequestOptions</span><span class="p">,</span> <span class="nv">resultHandler</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="k">in</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">image</span>
    <span class="p">})</span>

    <span class="k">return</span> <span class="n">cell</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="8-phasset의-이미지를-가져올때-progress-숫자-표시하기">8. PHAsset의 이미지를 가져올때 progress 숫자 표시하기</h4>

<p>PHImageRequestOptions을 이용하여 iCloud에 있는 이미지를 가져올때 progress를 표시할수 있게 한다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">imageRequestOptions</span> <span class="o">=</span> <span class="kt">PHImageRequestOptions</span><span class="p">()</span>
<span class="n">imageRequestOptions</span><span class="o">.</span><span class="n">isSynchronous</span> <span class="o">=</span> <span class="kc">true</span>
<span class="n">imageRequestOptions</span><span class="o">.</span><span class="n">deliveryMode</span> <span class="o">=</span> <span class="o">.</span><span class="n">highQualityFormat</span>
<span class="n">imageRequestOptions</span><span class="o">.</span><span class="n">isNetworkAccessAllowed</span> <span class="o">=</span> <span class="kc">true</span>
<span class="n">imageRequestOptions</span><span class="o">.</span><span class="n">progressHandler</span> <span class="o">=</span> <span class="p">{</span> <span class="p">(</span><span class="n">progress</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="n">stop</span><span class="p">,</span> <span class="n">info</span><span class="p">)</span> <span class="k">in</span>
    <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="nv">format</span><span class="p">:</span> <span class="s">"%.1f"</span><span class="p">,</span> <span class="n">progress</span><span class="o">*</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="nf">appending</span><span class="p">(</span><span class="s">"%"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kt">PHCachingImageManager</span><span class="p">()</span><span class="o">.</span><span class="nf">requestImage</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="n">asset</span><span class="p">,</span> <span class="nv">targetSize</span><span class="p">:</span> <span class="kt">PHImageManagerMaximumSize</span><span class="p">,</span> <span class="nv">contentMode</span><span class="p">:</span> <span class="o">.</span><span class="n">aspectFit</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="n">imageRequestOptions</span><span class="p">,</span> <span class="nv">resultHandler</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="k">in</span>
    <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">imageView</span><span class="o">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">image</span>
        <span class="k">self</span><span class="o">.</span><span class="n">activityIndicatorView</span><span class="o">.</span><span class="n">isHidden</span> <span class="o">=</span> <span class="kc">true</span>
        <span class="k">self</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">isHidden</span> <span class="o">=</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">})</span>
</code></pre></div></div>

<p><img src="/tec/images/2018/11/imageAsset/progress.png" alt="Alt Text" /></p>

<p><a href="/tec/images/2018/11/imageAsset/SimpleImagePicker.zip">예제 다운</a></p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/swift/2018/11/22/swift-image-asset/</guid>
                <description>
                    
                    Swift PHAsset을 사용해서 권한획득, Album List, Picture List, Get Image, iCloud Download Progress 확인하기
                    
                </description>
                <pubDate>Thu, 22 Nov 2018 17:00:00 +0900</pubDate>
                <author>gwanho kim</author>
            </item>
        
    
        
            <item>
                <title>swift UIBezierPath Shape</title>
                <link>http://localhost:4000/swift/2018/11/20/swift-bezier-path/</link>
                <content:encoded>
                    <![CDATA[
                    <h4 id="1-라인line">1. 라인(Line)</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Example</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">draw</span><span class="p">(</span><span class="n">_</span> <span class="nv">rect</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">path</span> <span class="o">=</span> <span class="kt">UIBezierPath</span><span class="p">(</span><span class="nv">rect</span><span class="p">:</span> <span class="n">rect</span><span class="p">)</span>
        <span class="kt">UIColor</span><span class="o">.</span><span class="n">lightGray</span><span class="o">.</span><span class="nf">setFill</span><span class="p">()</span>
        <span class="n">path</span><span class="o">.</span><span class="nf">fill</span><span class="p">()</span>
        <span class="n">path</span><span class="o">.</span><span class="nf">close</span><span class="p">()</span>

        <span class="k">let</span> <span class="nv">linePath</span> <span class="o">=</span> <span class="kt">UIBezierPath</span><span class="p">()</span>
        <span class="n">linePath</span><span class="o">.</span><span class="nf">move</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">))</span>
        <span class="n">linePath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">))</span>
        <span class="n">linePath</span><span class="o">.</span><span class="n">lineWidth</span> <span class="o">=</span> <span class="mi">6</span>
        <span class="kt">UIColor</span><span class="o">.</span><span class="n">black</span><span class="o">.</span><span class="nf">set</span><span class="p">()</span>
        <span class="n">linePath</span><span class="o">.</span><span class="nf">stroke</span><span class="p">()</span>
        <span class="n">linePath</span><span class="o">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/tec/images/2018/11/bezierPath/line.png" alt="Alt Text" /></p>

<p><br /><br /></p>

<h4 id="2-화살표arrow">2. 화살표(Arrow)</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Example</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">draw</span><span class="p">(</span><span class="n">_</span> <span class="nv">rect</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">let</span> <span class="nv">path</span> <span class="o">=</span> <span class="kt">UIBezierPath</span><span class="p">(</span><span class="nv">rect</span><span class="p">:</span> <span class="n">rect</span><span class="p">)</span>
      <span class="kt">UIColor</span><span class="o">.</span><span class="n">lightGray</span><span class="o">.</span><span class="nf">setFill</span><span class="p">()</span>
      <span class="n">path</span><span class="o">.</span><span class="nf">fill</span><span class="p">()</span>
      <span class="n">path</span><span class="o">.</span><span class="nf">close</span><span class="p">()</span>

      <span class="k">let</span> <span class="nv">arrowPath</span> <span class="o">=</span> <span class="kt">UIBezierPath</span><span class="p">()</span>
      <span class="k">let</span> <span class="nv">margin</span> <span class="o">=</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span>
      <span class="n">arrowPath</span><span class="o">.</span><span class="nf">move</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span>
      <span class="n">arrowPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">margin</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="n">margin</span><span class="p">))</span>
      <span class="n">arrowPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">margin</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="n">margin</span><span class="o">/</span><span class="mi">3</span><span class="p">))</span>
      <span class="n">arrowPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="n">margin</span><span class="o">/</span><span class="mi">3</span><span class="p">))</span>
      <span class="n">arrowPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="n">margin</span><span class="o">/</span><span class="mi">3</span><span class="p">))</span>
      <span class="n">arrowPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">margin</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="n">margin</span><span class="o">/</span><span class="mi">3</span><span class="p">))</span>
      <span class="n">arrowPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">margin</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="n">margin</span><span class="p">))</span>
      <span class="n">arrowPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span>

      <span class="kt">UIColor</span><span class="o">.</span><span class="n">black</span><span class="o">.</span><span class="nf">set</span><span class="p">()</span>
      <span class="n">arrowPath</span><span class="o">.</span><span class="nf">stroke</span><span class="p">()</span>
      <span class="n">arrowPath</span><span class="o">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/tec/images/2018/11/bezierPath/arrow.png" alt="Alt Text" /></p>

<p><br /><br /></p>

<h4 id="3-삼각형triangle">3. 삼각형(Triangle)</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Example</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">draw</span><span class="p">(</span><span class="n">_</span> <span class="nv">rect</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">path</span> <span class="o">=</span> <span class="kt">UIBezierPath</span><span class="p">(</span><span class="nv">rect</span><span class="p">:</span> <span class="n">rect</span><span class="p">)</span>
        <span class="kt">UIColor</span><span class="o">.</span><span class="n">lightGray</span><span class="o">.</span><span class="nf">setFill</span><span class="p">()</span>
        <span class="n">path</span><span class="o">.</span><span class="nf">fill</span><span class="p">()</span>
        <span class="n">path</span><span class="o">.</span><span class="nf">close</span><span class="p">()</span>

        <span class="k">let</span> <span class="nv">triangle</span> <span class="o">=</span> <span class="kt">UIBezierPath</span><span class="p">()</span>
        <span class="k">let</span> <span class="nv">y</span> <span class="o">=</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="nf">sqrt</span><span class="p">(</span><span class="nf">pow</span><span class="p">(</span><span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="nf">pow</span><span class="p">(</span><span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
        <span class="n">triangle</span><span class="o">.</span><span class="nf">move</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">y</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span>
        <span class="n">triangle</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">y</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span>
        <span class="n">triangle</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">y</span> <span class="o">-</span> <span class="n">y</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span>
        <span class="n">triangle</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">y</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span>

        <span class="kt">UIColor</span><span class="o">.</span><span class="n">black</span><span class="o">.</span><span class="nf">set</span><span class="p">()</span>
        <span class="n">triangle</span><span class="o">.</span><span class="nf">stroke</span><span class="p">()</span>
        <span class="n">triangle</span><span class="o">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/tec/images/2018/11/bezierPath/triangle.png" alt="Alt Text" /></p>

<p><br /><br /></p>

<h4 id="4-사각형square">4. 사각형(Square)</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Example</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">draw</span><span class="p">(</span><span class="n">_</span> <span class="nv">rect</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">path</span> <span class="o">=</span> <span class="kt">UIBezierPath</span><span class="p">(</span><span class="nv">rect</span><span class="p">:</span> <span class="n">rect</span><span class="p">)</span>
        <span class="kt">UIColor</span><span class="o">.</span><span class="n">lightGray</span><span class="o">.</span><span class="nf">setFill</span><span class="p">()</span>
        <span class="n">path</span><span class="o">.</span><span class="nf">fill</span><span class="p">()</span>
        <span class="n">path</span><span class="o">.</span><span class="nf">close</span><span class="p">()</span>

        <span class="k">let</span> <span class="nv">squarePath</span> <span class="o">=</span> <span class="kt">UIBezierPath</span><span class="p">()</span>
        <span class="k">let</span> <span class="nv">squareRect</span> <span class="o">=</span> <span class="kt">CGRect</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="nv">width</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span><span class="o">-</span><span class="mi">10</span><span class="p">)</span>
        <span class="n">squarePath</span><span class="o">.</span><span class="nf">move</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">squareRect</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">squareRect</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">y</span><span class="p">))</span>
        <span class="n">squarePath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">squareRect</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">squareRect</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">y</span><span class="p">))</span>
        <span class="n">squarePath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">squareRect</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">squareRect</span><span class="o">.</span><span class="n">height</span><span class="p">))</span>
        <span class="n">squarePath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">squareRect</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">squareRect</span><span class="o">.</span><span class="n">height</span><span class="p">))</span>
        <span class="n">squarePath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">squareRect</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">squareRect</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">y</span><span class="p">))</span>

        <span class="kt">UIColor</span><span class="o">.</span><span class="n">black</span><span class="o">.</span><span class="nf">set</span><span class="p">()</span>
        <span class="n">squarePath</span><span class="o">.</span><span class="nf">stroke</span><span class="p">()</span>
        <span class="n">squarePath</span><span class="o">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/tec/images/2018/11/bezierPath/square.png" alt="Alt Text" /></p>

<p><br /><br /></p>

<h4 id="5-오각형pentagon">5. 오각형(Pentagon)</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Example</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">draw</span><span class="p">(</span><span class="n">_</span> <span class="nv">rect</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">path</span> <span class="o">=</span> <span class="kt">UIBezierPath</span><span class="p">(</span><span class="nv">rect</span><span class="p">:</span> <span class="n">rect</span><span class="p">)</span>
        <span class="kt">UIColor</span><span class="o">.</span><span class="n">lightGray</span><span class="o">.</span><span class="nf">setFill</span><span class="p">()</span>
        <span class="n">path</span><span class="o">.</span><span class="nf">fill</span><span class="p">()</span>
        <span class="n">path</span><span class="o">.</span><span class="nf">close</span><span class="p">()</span>

        <span class="k">let</span> <span class="nv">pentagonPath</span> <span class="o">=</span> <span class="kt">UIBezierPath</span><span class="p">()</span>

        <span class="k">let</span> <span class="nv">width</span> <span class="o">=</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span>
        <span class="k">let</span> <span class="nv">height</span> <span class="o">=</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span>
        <span class="k">let</span> <span class="nv">center</span> <span class="o">=</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>

        <span class="k">let</span> <span class="nv">sides</span> <span class="o">=</span> <span class="mi">5</span>
        <span class="k">let</span> <span class="nv">cornerRadius</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">let</span> <span class="nv">rotationOffset</span> <span class="o">=</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="kt">Double</span><span class="o">.</span><span class="n">pi</span> <span class="o">/</span> <span class="mf">2.0</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">theta</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="mf">2.0</span> <span class="o">*</span> <span class="kt">Double</span><span class="o">.</span><span class="n">pi</span><span class="p">)</span> <span class="o">/</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="n">sides</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">radius</span> <span class="o">=</span> <span class="p">(</span><span class="n">width</span> <span class="o">+</span> <span class="n">cornerRadius</span> <span class="o">-</span> <span class="p">(</span><span class="nf">cos</span><span class="p">(</span><span class="n">theta</span><span class="p">)</span> <span class="o">*</span> <span class="n">cornerRadius</span><span class="p">))</span> <span class="o">/</span> <span class="mf">2.0</span>

        <span class="k">var</span> <span class="nv">angle</span> <span class="o">=</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="n">rotationOffset</span><span class="p">)</span>

        <span class="k">let</span> <span class="nv">corner</span> <span class="o">=</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">center</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="p">(</span><span class="n">radius</span> <span class="o">-</span> <span class="n">cornerRadius</span><span class="p">)</span> <span class="o">*</span> <span class="nf">cos</span><span class="p">(</span><span class="n">angle</span><span class="p">),</span> <span class="nv">y</span><span class="p">:</span> <span class="n">center</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="p">(</span><span class="n">radius</span> <span class="o">-</span> <span class="n">cornerRadius</span><span class="p">)</span> <span class="o">*</span> <span class="nf">sin</span><span class="p">(</span><span class="n">angle</span><span class="p">))</span>
        <span class="n">pentagonPath</span><span class="o">.</span><span class="nf">move</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">corner</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">cornerRadius</span> <span class="o">*</span> <span class="nf">cos</span><span class="p">(</span><span class="n">angle</span> <span class="o">+</span> <span class="n">theta</span><span class="p">),</span> <span class="nv">y</span><span class="p">:</span> <span class="n">corner</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">cornerRadius</span> <span class="o">*</span> <span class="nf">sin</span><span class="p">(</span><span class="n">angle</span> <span class="o">+</span> <span class="n">theta</span><span class="p">)))</span>
        <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">0</span> <span class="o">..&lt;</span> <span class="n">sides</span> <span class="p">{</span>
            <span class="n">angle</span> <span class="o">+=</span> <span class="n">theta</span>
            <span class="k">let</span> <span class="nv">corner</span> <span class="o">=</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">center</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="p">(</span><span class="n">radius</span> <span class="o">-</span> <span class="n">cornerRadius</span><span class="p">)</span> <span class="o">*</span> <span class="nf">cos</span><span class="p">(</span><span class="n">angle</span><span class="p">),</span> <span class="nv">y</span><span class="p">:</span> <span class="n">center</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="p">(</span><span class="n">radius</span> <span class="o">-</span> <span class="n">cornerRadius</span><span class="p">)</span> <span class="o">*</span> <span class="nf">sin</span><span class="p">(</span><span class="n">angle</span><span class="p">))</span>
            <span class="k">let</span> <span class="nv">tip</span> <span class="o">=</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">center</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">radius</span> <span class="o">*</span> <span class="nf">cos</span><span class="p">(</span><span class="n">angle</span><span class="p">),</span> <span class="nv">y</span><span class="p">:</span> <span class="n">center</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">radius</span> <span class="o">*</span> <span class="nf">sin</span><span class="p">(</span><span class="n">angle</span><span class="p">))</span>
            <span class="k">let</span> <span class="nv">start</span> <span class="o">=</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">corner</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">cornerRadius</span> <span class="o">*</span> <span class="nf">cos</span><span class="p">(</span><span class="n">angle</span> <span class="o">-</span> <span class="n">theta</span><span class="p">),</span> <span class="nv">y</span><span class="p">:</span> <span class="n">corner</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">cornerRadius</span> <span class="o">*</span> <span class="nf">sin</span><span class="p">(</span><span class="n">angle</span> <span class="o">-</span> <span class="n">theta</span><span class="p">))</span>
            <span class="k">let</span> <span class="nv">end</span> <span class="o">=</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">corner</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">cornerRadius</span> <span class="o">*</span> <span class="nf">cos</span><span class="p">(</span><span class="n">angle</span> <span class="o">+</span> <span class="n">theta</span><span class="p">),</span> <span class="nv">y</span><span class="p">:</span> <span class="n">corner</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">cornerRadius</span> <span class="o">*</span> <span class="nf">sin</span><span class="p">(</span><span class="n">angle</span> <span class="o">+</span> <span class="n">theta</span><span class="p">))</span>
            <span class="n">pentagonPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="n">start</span><span class="p">)</span>
            <span class="n">pentagonPath</span><span class="o">.</span><span class="nf">addQuadCurve</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="n">end</span><span class="p">,</span> <span class="nv">controlPoint</span><span class="p">:</span> <span class="n">tip</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="k">var</span> <span class="nv">pathTransform</span>  <span class="o">=</span> <span class="kt">CGAffineTransform</span><span class="o">.</span><span class="n">identity</span>
        <span class="n">pathTransform</span> <span class="o">=</span> <span class="n">pathTransform</span><span class="o">.</span><span class="nf">translatedBy</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="o">-</span><span class="p">(</span><span class="n">rect</span><span class="o">.</span><span class="n">height</span><span class="o">-</span><span class="n">pentagonPath</span><span class="o">.</span><span class="n">bounds</span><span class="o">.</span><span class="n">height</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
        <span class="n">pentagonPath</span><span class="o">.</span><span class="nf">apply</span><span class="p">(</span><span class="n">pathTransform</span><span class="p">)</span>

        <span class="kt">UIColor</span><span class="o">.</span><span class="n">black</span><span class="o">.</span><span class="nf">set</span><span class="p">()</span>
        <span class="n">pentagonPath</span><span class="o">.</span><span class="nf">stroke</span><span class="p">()</span>
        <span class="n">pentagonPath</span><span class="o">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/tec/images/2018/11/bezierPath/pentagon.png" alt="Alt Text" /></p>

<p><br /><br /></p>

<h4 id="6-별star">6. 별(Star)</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Example</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">draw</span><span class="p">(</span><span class="n">_</span> <span class="nv">rect</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">path</span> <span class="o">=</span> <span class="kt">UIBezierPath</span><span class="p">(</span><span class="nv">rect</span><span class="p">:</span> <span class="n">rect</span><span class="p">)</span>
        <span class="kt">UIColor</span><span class="o">.</span><span class="n">lightGray</span><span class="o">.</span><span class="nf">setFill</span><span class="p">()</span>
        <span class="n">path</span><span class="o">.</span><span class="nf">fill</span><span class="p">()</span>
        <span class="n">path</span><span class="o">.</span><span class="nf">close</span><span class="p">()</span>

        <span class="k">let</span> <span class="nv">starPath</span> <span class="o">=</span> <span class="kt">UIBezierPath</span><span class="p">()</span>

        <span class="k">let</span> <span class="nv">center</span> <span class="o">=</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">numberOfPoints</span> <span class="o">=</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="mf">5.0</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">numberOfLineSegments</span> <span class="o">=</span> <span class="kt">Int</span><span class="p">(</span><span class="n">numberOfPoints</span> <span class="o">*</span> <span class="mf">2.0</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">theta</span> <span class="o">=</span> <span class="o">.</span><span class="n">pi</span> <span class="o">/</span> <span class="n">numberOfPoints</span>
        <span class="k">let</span> <span class="nv">circumscribedRadius</span> <span class="o">=</span> <span class="n">center</span><span class="o">.</span><span class="n">x</span>
        <span class="k">let</span> <span class="nv">outerRadius</span> <span class="o">=</span> <span class="n">circumscribedRadius</span> <span class="o">*</span> <span class="mf">1.039</span>
        <span class="k">let</span> <span class="nv">excessRadius</span> <span class="o">=</span> <span class="n">outerRadius</span> <span class="o">-</span> <span class="n">circumscribedRadius</span>
        <span class="k">let</span> <span class="nv">innerRadius</span> <span class="o">=</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="n">outerRadius</span> <span class="o">*</span> <span class="mf">0.55</span><span class="p">)</span>

        <span class="k">let</span> <span class="nv">leftEdgePointX</span> <span class="o">=</span> <span class="p">(</span><span class="n">center</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="nf">cos</span><span class="p">(</span><span class="mf">4.0</span> <span class="o">*</span> <span class="n">theta</span><span class="p">)</span> <span class="o">*</span> <span class="n">outerRadius</span><span class="p">)</span> <span class="o">+</span> <span class="n">excessRadius</span>
        <span class="k">let</span> <span class="nv">horizontalOffset</span> <span class="o">=</span> <span class="n">leftEdgePointX</span> <span class="o">/</span> <span class="mf">2.0</span>

        <span class="k">let</span> <span class="nv">offsetCenter</span> <span class="o">=</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">center</span><span class="o">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">horizontalOffset</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">center</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>

        <span class="k">var</span> <span class="nv">initPoint</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">?</span>

        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="n">numberOfLineSegments</span> <span class="p">{</span>
            <span class="k">let</span> <span class="nv">radius</span> <span class="o">=</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">?</span> <span class="nv">outerRadius</span> <span class="p">:</span> <span class="n">innerRadius</span>
            <span class="k">let</span> <span class="nv">pointX</span> <span class="o">=</span> <span class="n">offsetCenter</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="nf">cos</span><span class="p">(</span><span class="kt">CGFloat</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="n">theta</span><span class="p">)</span> <span class="o">*</span> <span class="n">radius</span>
            <span class="k">let</span> <span class="nv">pointY</span> <span class="o">=</span> <span class="n">offsetCenter</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="nf">sin</span><span class="p">(</span><span class="kt">CGFloat</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="n">theta</span><span class="p">)</span> <span class="o">*</span> <span class="n">radius</span>
            <span class="k">let</span> <span class="nv">point</span> <span class="o">=</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">pointX</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">pointY</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
                <span class="n">starPath</span><span class="o">.</span><span class="nf">move</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="n">point</span><span class="p">)</span>
                <span class="n">initPoint</span> <span class="o">=</span> <span class="n">point</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">starPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="n">point</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">initPoint</span> <span class="o">=</span> <span class="n">initPoint</span> <span class="p">{</span>
            <span class="n">starPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="n">initPoint</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="k">var</span> <span class="nv">pathTransform</span>  <span class="o">=</span> <span class="kt">CGAffineTransform</span><span class="o">.</span><span class="n">identity</span>
        <span class="n">pathTransform</span> <span class="o">=</span> <span class="n">pathTransform</span><span class="o">.</span><span class="nf">translatedBy</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">center</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">center</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>
        <span class="n">pathTransform</span> <span class="o">=</span> <span class="n">pathTransform</span><span class="o">.</span><span class="nf">rotated</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="o">-.</span><span class="n">pi</span> <span class="o">/</span> <span class="mf">2.0</span><span class="p">))</span>
        <span class="n">pathTransform</span> <span class="o">=</span> <span class="n">pathTransform</span><span class="o">.</span><span class="nf">translatedBy</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="o">-</span><span class="n">center</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="o">-</span><span class="n">center</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>

        <span class="n">starPath</span><span class="o">.</span><span class="nf">apply</span><span class="p">(</span><span class="n">pathTransform</span><span class="p">)</span>

        <span class="kt">UIColor</span><span class="o">.</span><span class="n">black</span><span class="o">.</span><span class="nf">set</span><span class="p">()</span>
        <span class="n">starPath</span><span class="o">.</span><span class="nf">stroke</span><span class="p">()</span>
        <span class="n">starPath</span><span class="o">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/tec/images/2018/11/bezierPath/star.png" alt="Alt Text" /></p>

<p><br /><br /></p>

<h4 id="7-하트heart">7. 하트(Heart)</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Example</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">draw</span><span class="p">(</span><span class="n">_</span> <span class="nv">rect</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">path</span> <span class="o">=</span> <span class="kt">UIBezierPath</span><span class="p">(</span><span class="nv">rect</span><span class="p">:</span> <span class="n">rect</span><span class="p">)</span>
        <span class="kt">UIColor</span><span class="o">.</span><span class="n">lightGray</span><span class="o">.</span><span class="nf">setFill</span><span class="p">()</span>
        <span class="n">path</span><span class="o">.</span><span class="nf">fill</span><span class="p">()</span>
        <span class="n">path</span><span class="o">.</span><span class="nf">close</span><span class="p">()</span>

        <span class="k">let</span> <span class="nv">heartPath</span> <span class="o">=</span> <span class="kt">UIBezierPath</span><span class="p">()</span>

        <span class="k">let</span> <span class="nv">scaledRect</span> <span class="o">=</span> <span class="kt">CGRect</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">width</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span><span class="p">)</span>
        <span class="n">heartPath</span><span class="o">.</span><span class="nf">move</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">scaledRect</span><span class="o">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">scaledRect</span><span class="o">.</span><span class="n">height</span><span class="p">))</span>
        <span class="n">heartPath</span><span class="o">.</span><span class="nf">addCurve</span><span class="p">(</span>
            <span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="n">scaledRect</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">x</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="n">scaledRect</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="p">(</span><span class="n">scaledRect</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">height</span><span class="o">/</span><span class="mi">4</span><span class="p">)),</span>
            <span class="nv">controlPoint1</span><span class="p">:</span><span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="n">scaledRect</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="p">(</span><span class="n">scaledRect</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span>
                <span class="nv">y</span><span class="p">:</span> <span class="n">scaledRect</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="p">(</span><span class="n">scaledRect</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">height</span><span class="o">*</span><span class="mi">4</span><span class="o">/</span><span class="mi">4</span><span class="p">))</span> <span class="p">,</span>
            <span class="nv">controlPoint2</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="n">scaledRect</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">x</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="n">scaledRect</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="p">(</span><span class="n">scaledRect</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span> <span class="p">)</span>
        <span class="n">heartPath</span><span class="o">.</span><span class="nf">addArc</span><span class="p">(</span>
            <span class="nv">withCenter</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="n">scaledRect</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="p">(</span><span class="n">scaledRect</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">width</span><span class="o">/</span><span class="mi">4</span><span class="p">),</span>
                <span class="nv">y</span><span class="p">:</span> <span class="n">scaledRect</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="p">(</span><span class="n">scaledRect</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">height</span><span class="o">/</span><span class="mi">4</span><span class="p">)),</span>
            <span class="nv">radius</span><span class="p">:</span> <span class="p">(</span><span class="n">scaledRect</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">width</span><span class="o">/</span><span class="mi">4</span><span class="p">),</span>
            <span class="nv">startAngle</span><span class="p">:</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="kt">Double</span><span class="o">.</span><span class="n">pi</span><span class="p">),</span>
            <span class="nv">endAngle</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
            <span class="nv">clockwise</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
        <span class="n">heartPath</span><span class="o">.</span><span class="nf">addArc</span><span class="p">(</span>
            <span class="nv">withCenter</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="n">scaledRect</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="p">(</span><span class="n">scaledRect</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">width</span> <span class="o">*</span> <span class="mi">3</span><span class="o">/</span><span class="mi">4</span><span class="p">),</span>
                <span class="nv">y</span><span class="p">:</span> <span class="n">scaledRect</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="p">(</span><span class="n">scaledRect</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">height</span><span class="o">/</span><span class="mi">4</span><span class="p">)),</span>
            <span class="nv">radius</span><span class="p">:</span> <span class="p">(</span><span class="n">scaledRect</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">width</span><span class="o">/</span><span class="mi">4</span><span class="p">),</span>
            <span class="nv">startAngle</span><span class="p">:</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="kt">Double</span><span class="o">.</span><span class="n">pi</span><span class="p">),</span>
            <span class="nv">endAngle</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
            <span class="nv">clockwise</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
        <span class="n">heartPath</span><span class="o">.</span><span class="nf">addCurve</span><span class="p">(</span>
            <span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="n">scaledRect</span><span class="o">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="n">scaledRect</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">scaledRect</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">height</span><span class="p">),</span>
            <span class="nv">controlPoint1</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="n">scaledRect</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">scaledRect</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">width</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="n">scaledRect</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="p">(</span><span class="n">scaledRect</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">height</span><span class="o">/</span><span class="mi">2</span><span class="p">)),</span>
            <span class="nv">controlPoint2</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="n">scaledRect</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="p">(</span><span class="n">scaledRect</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span>
                <span class="nv">y</span><span class="p">:</span> <span class="n">scaledRect</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="p">(</span><span class="n">scaledRect</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">height</span><span class="o">*</span><span class="mi">4</span><span class="o">/</span><span class="mi">4</span><span class="p">))</span> <span class="p">)</span>

        <span class="kt">UIColor</span><span class="o">.</span><span class="n">black</span><span class="o">.</span><span class="nf">set</span><span class="p">()</span>
        <span class="n">heartPath</span><span class="o">.</span><span class="nf">stroke</span><span class="p">()</span>
        <span class="n">heartPath</span><span class="o">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/tec/images/2018/11/bezierPath/heart.png" alt="Alt Text" /></p>

<p><br /><br /></p>

<h4 id="8-말풍선bubble">8. 말풍선(Bubble)</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Example</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">draw</span><span class="p">(</span><span class="n">_</span> <span class="nv">rect</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">path</span> <span class="o">=</span> <span class="kt">UIBezierPath</span><span class="p">(</span><span class="nv">rect</span><span class="p">:</span> <span class="n">rect</span><span class="p">)</span>
        <span class="kt">UIColor</span><span class="o">.</span><span class="n">lightGray</span><span class="o">.</span><span class="nf">setFill</span><span class="p">()</span>
        <span class="n">path</span><span class="o">.</span><span class="nf">fill</span><span class="p">()</span>
        <span class="n">path</span><span class="o">.</span><span class="nf">close</span><span class="p">()</span>

        <span class="k">let</span> <span class="nv">bubblePath</span> <span class="o">=</span> <span class="kt">UIBezierPath</span><span class="p">()</span>

        <span class="k">let</span> <span class="nv">bubbleSize</span> <span class="o">=</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">5</span>
        <span class="k">var</span> <span class="nv">vertex</span> <span class="o">=</span> <span class="n">bubbleSize</span><span class="o">/</span><span class="mi">3</span>
        <span class="k">if</span> <span class="n">vertex</span> <span class="o">&lt;</span> <span class="mi">5</span> <span class="p">{</span>
            <span class="n">vertex</span> <span class="o">=</span> <span class="mi">5</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="n">vertex</span> <span class="o">&gt;</span> <span class="mi">15</span> <span class="p">{</span>
            <span class="n">vertex</span> <span class="o">=</span> <span class="mi">15</span>
        <span class="p">}</span>
        <span class="n">bubblePath</span><span class="o">.</span><span class="nf">move</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="n">bubbleSize</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">vertex</span><span class="p">))</span>
        <span class="n">bubblePath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="n">vertex</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">vertex</span><span class="p">))</span>
        <span class="n">bubblePath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span><span class="p">))</span>
        <span class="n">bubblePath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="n">vertex</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">vertex</span><span class="p">))</span>
        <span class="n">bubblePath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">bubbleSize</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">vertex</span><span class="p">))</span>
        <span class="n">bubblePath</span><span class="o">.</span><span class="nf">addCurve</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">bubbleSize</span><span class="o">*</span><span class="mi">2</span><span class="p">),</span> <span class="nv">controlPoint1</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">vertex</span><span class="p">),</span> <span class="nv">controlPoint2</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">vertex</span><span class="p">))</span>
        <span class="n">bubblePath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">bubbleSize</span><span class="o">*</span><span class="mi">2</span><span class="p">))</span>
        <span class="n">bubblePath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">bubbleSize</span><span class="p">))</span>
        <span class="n">bubblePath</span><span class="o">.</span><span class="nf">addCurve</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">bubbleSize</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">),</span> <span class="nv">controlPoint1</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">),</span> <span class="nv">controlPoint2</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">))</span>
        <span class="n">bubblePath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">bubbleSize</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">))</span>
        <span class="n">bubblePath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="n">bubbleSize</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">))</span>
        <span class="n">bubblePath</span><span class="o">.</span><span class="nf">addCurve</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">bubbleSize</span><span class="p">),</span> <span class="nv">controlPoint1</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">),</span> <span class="nv">controlPoint2</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">))</span>
        <span class="n">bubblePath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">bubbleSize</span><span class="p">))</span>
        <span class="n">bubblePath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">bubbleSize</span><span class="o">*</span><span class="mi">2</span><span class="p">))</span>
        <span class="n">bubblePath</span><span class="o">.</span><span class="nf">addCurve</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="n">bubbleSize</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">vertex</span><span class="p">),</span> <span class="nv">controlPoint1</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">vertex</span><span class="p">),</span> <span class="nv">controlPoint2</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">vertex</span><span class="p">))</span>

        <span class="kt">UIColor</span><span class="o">.</span><span class="n">black</span><span class="o">.</span><span class="nf">set</span><span class="p">()</span>
        <span class="n">bubblePath</span><span class="o">.</span><span class="nf">stroke</span><span class="p">()</span>
        <span class="n">bubblePath</span><span class="o">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/tec/images/2018/11/bezierPath/bubble.png" alt="Alt Text" /></p>

<p><br /><br /></p>

<h4 id="9-오른쪽-채팅-말풍선right-chat-bubble">9. 오른쪽 채팅 말풍선(Right Chat Bubble)</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Example</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>

    <span class="kd">private</span> <span class="k">let</span> <span class="nv">cornerDistance</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">8</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">cornerRadius</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">2</span>

    <span class="kd">private</span> <span class="k">let</span> <span class="nv">bubbleCornerDistance</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">4</span>

    <span class="kd">private</span> <span class="k">let</span> <span class="nv">bubbleY</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">4</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">bubbleSize</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">6</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">bubbleDistance</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">3</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">bubbleRadius</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="k">override</span> <span class="kd">func</span> <span class="nf">draw</span><span class="p">(</span><span class="n">_</span> <span class="nv">rect</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">path</span> <span class="o">=</span> <span class="kt">UIBezierPath</span><span class="p">(</span><span class="nv">rect</span><span class="p">:</span> <span class="n">rect</span><span class="p">)</span>
        <span class="kt">UIColor</span><span class="o">.</span><span class="n">lightGray</span><span class="o">.</span><span class="nf">setFill</span><span class="p">()</span>
        <span class="n">path</span><span class="o">.</span><span class="nf">fill</span><span class="p">()</span>
        <span class="n">path</span><span class="o">.</span><span class="nf">close</span><span class="p">()</span>

        <span class="k">let</span> <span class="nv">chatPath</span> <span class="o">=</span> <span class="kt">UIBezierPath</span><span class="p">()</span>

        <span class="c1">// Start Top Right Point</span>
        <span class="n">chatPath</span><span class="o">.</span><span class="nf">move</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerDistance</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">))</span>

        <span class="c1">// Top Right Point</span>
        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleCornerDistance</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">))</span>

        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addCurve</span><span class="p">(</span>
            <span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleCornerDistance</span><span class="p">),</span>
            <span class="nv">controlPoint1</span><span class="p">:</span><span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="mi">1</span><span class="p">),</span>
            <span class="nv">controlPoint2</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">)</span>

        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleCornerDistance</span><span class="p">))</span>

        <span class="c1">// Bubble Top Point</span>
        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleCornerDistance</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleY</span><span class="p">))</span>
        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleDistance</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleCornerDistance</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleY</span><span class="p">))</span>

        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addCurve</span><span class="p">(</span>
            <span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleDistance</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleCornerDistance</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleY</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleDistance</span><span class="p">),</span>
            <span class="nv">controlPoint1</span><span class="p">:</span><span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleCornerDistance</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleY</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleRadius</span><span class="p">),</span>
            <span class="nv">controlPoint2</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleCornerDistance</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleY</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleRadius</span><span class="p">)</span>
        <span class="p">)</span>

        <span class="c1">// Bubble Bottom Point</span>
        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleDistance</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleCornerDistance</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleY</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleDistance</span><span class="p">))</span>
        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleCornerDistance</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleY</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span><span class="p">))</span>

        <span class="c1">// Bottom Right Point</span>
        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerDistance</span><span class="p">))</span>

        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addCurve</span><span class="p">(</span>
            <span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerDistance</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span><span class="p">),</span>
            <span class="nv">controlPoint1</span><span class="p">:</span><span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerRadius</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerRadius</span><span class="p">),</span>
            <span class="nv">controlPoint2</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerRadius</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerRadius</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">)</span>

        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerDistance</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span><span class="p">))</span>

        <span class="c1">// Bottom Left Point</span>
        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerDistance</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span><span class="p">))</span>

        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addCurve</span><span class="p">(</span>
            <span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerDistance</span><span class="p">),</span>
            <span class="nv">controlPoint1</span><span class="p">:</span><span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerRadius</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerRadius</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span>
            <span class="nv">controlPoint2</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerRadius</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerRadius</span><span class="p">)</span>
        <span class="p">)</span>

        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerDistance</span><span class="p">))</span>

        <span class="c1">// Top Left Point</span>
        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerDistance</span><span class="p">))</span>

        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addCurve</span><span class="p">(</span>
            <span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerDistance</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">),</span>
            <span class="nv">controlPoint1</span><span class="p">:</span><span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerRadius</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerRadius</span><span class="p">),</span>
            <span class="nv">controlPoint2</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerRadius</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerRadius</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">)</span>

        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerDistance</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">))</span>

        <span class="c1">// Initial Point</span>
        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerDistance</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">))</span>

        <span class="kt">UIColor</span><span class="o">.</span><span class="n">black</span><span class="o">.</span><span class="nf">set</span><span class="p">()</span>
        <span class="n">chatPath</span><span class="o">.</span><span class="nf">stroke</span><span class="p">()</span>
        <span class="n">chatPath</span><span class="o">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/tec/images/2018/11/bezierPath/rightBubble.png" alt="Alt Text" /></p>

<p><br /><br /></p>

<h4 id="10-왼쪽-채팅-말풍선left-chat-bubble">10. 왼쪽 채팅 말풍선(Left Chat Bubble)</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">Example</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>

    <span class="kd">private</span> <span class="k">let</span> <span class="nv">cornerDistance</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">8</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">cornerRadius</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">2</span>

    <span class="kd">private</span> <span class="k">let</span> <span class="nv">bubbleCornerDistance</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">4</span>

    <span class="kd">private</span> <span class="k">let</span> <span class="nv">bubbleY</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">4</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">bubbleSize</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">6</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">bubbleDistance</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">3</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">bubbleRadius</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="k">override</span> <span class="kd">func</span> <span class="nf">draw</span><span class="p">(</span><span class="n">_</span> <span class="nv">rect</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">path</span> <span class="o">=</span> <span class="kt">UIBezierPath</span><span class="p">(</span><span class="nv">rect</span><span class="p">:</span> <span class="n">rect</span><span class="p">)</span>
        <span class="kt">UIColor</span><span class="o">.</span><span class="n">lightGray</span><span class="o">.</span><span class="nf">setFill</span><span class="p">()</span>
        <span class="n">path</span><span class="o">.</span><span class="nf">fill</span><span class="p">()</span>
        <span class="n">path</span><span class="o">.</span><span class="nf">close</span><span class="p">()</span>

        <span class="k">let</span> <span class="nv">chatPath</span> <span class="o">=</span> <span class="kt">UIBezierPath</span><span class="p">()</span>

        <span class="c1">// Start Top Right Point</span>
        <span class="n">chatPath</span><span class="o">.</span><span class="nf">move</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerDistance</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">))</span>

        <span class="c1">// Top Right Point</span>
        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerDistance</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">))</span>

        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addCurve</span><span class="p">(</span>
            <span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerDistance</span><span class="p">),</span>
            <span class="nv">controlPoint1</span><span class="p">:</span><span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerRadius</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerRadius</span><span class="p">),</span>
            <span class="nv">controlPoint2</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerRadius</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerRadius</span><span class="p">)</span>
        <span class="p">)</span>

        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerDistance</span><span class="p">))</span>

        <span class="c1">// Bottom Right Point</span>
        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerDistance</span><span class="p">))</span>

        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addCurve</span><span class="p">(</span>
            <span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerDistance</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span><span class="p">),</span>
            <span class="nv">controlPoint1</span><span class="p">:</span><span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerRadius</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerRadius</span><span class="p">),</span>
            <span class="nv">controlPoint2</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerRadius</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerRadius</span><span class="p">)</span>
        <span class="p">)</span>

        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">width</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerDistance</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span><span class="p">))</span>

        <span class="c1">// Bottom Left Point</span>
        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerDistance</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span><span class="p">))</span>

        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addCurve</span><span class="p">(</span>
            <span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerDistance</span><span class="p">),</span>
            <span class="nv">controlPoint1</span><span class="p">:</span><span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerRadius</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerRadius</span><span class="p">),</span>
            <span class="nv">controlPoint2</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerRadius</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerRadius</span><span class="p">)</span>
        <span class="p">)</span>

        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="n">rect</span><span class="o">.</span><span class="n">height</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerDistance</span><span class="p">))</span>

        <span class="c1">// Bubble Bottom Point</span>
        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleCornerDistance</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleY</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span><span class="p">))</span>
        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleDistance</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleCornerDistance</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleY</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleDistance</span><span class="p">))</span>

        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addCurve</span><span class="p">(</span>
            <span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleDistance</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleCornerDistance</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleY</span><span class="p">),</span>
            <span class="nv">controlPoint1</span><span class="p">:</span><span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleCornerDistance</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleY</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleRadius</span><span class="p">),</span>
            <span class="nv">controlPoint2</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleCornerDistance</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleY</span> <span class="o">-</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleRadius</span><span class="p">)</span>
        <span class="p">)</span>

        <span class="c1">// Bubble Top Point</span>
        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleDistance</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleCornerDistance</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleY</span><span class="p">))</span>
        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleCornerDistance</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleY</span><span class="p">))</span>

        <span class="c1">// Top Left Point</span>
        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleCornerDistance</span><span class="p">))</span>

        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addCurve</span><span class="p">(</span>
            <span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleCornerDistance</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">),</span>
            <span class="nv">controlPoint1</span><span class="p">:</span><span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="mi">1</span><span class="p">),</span>
            <span class="nv">controlPoint2</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                <span class="nv">x</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
                <span class="nv">y</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">)</span>

        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleCornerDistance</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">))</span>

        <span class="c1">// Initial Point</span>
        <span class="n">chatPath</span><span class="o">.</span><span class="nf">addLine</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">cornerDistance</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span> <span class="o">+</span> <span class="k">self</span><span class="o">.</span><span class="n">bubbleSize</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">))</span>

        <span class="kt">UIColor</span><span class="o">.</span><span class="n">black</span><span class="o">.</span><span class="nf">set</span><span class="p">()</span>
        <span class="n">chatPath</span><span class="o">.</span><span class="nf">stroke</span><span class="p">()</span>
        <span class="n">chatPath</span><span class="o">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/tec/images/2018/11/bezierPath/leftBubble.png" alt="Alt Text" /></p>

<p><br /><br /></p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/swift/2018/11/20/swift-bezier-path/</guid>
                <description>
                    
                    Swift UIBezierPath로 여러가지 도형, 말풍선 그리기(Arrow, Triangle, Square, Pentagon, Star, Heart, Bubble, Chat, Message)
                    
                </description>
                <pubDate>Tue, 20 Nov 2018 17:00:00 +0900</pubDate>
                <author>gwanho kim</author>
            </item>
        
    
        
            <item>
                <title>cocoapods lib create</title>
                <link>http://localhost:4000/ios/2017/01/11/cocoapodsCreate/</link>
                <content:encoded>
                    <![CDATA[
                    <p><br /><br /></p>

<h4 id="1-cocoapods-남들이-만들어주신걸-써보기">1. cocoapods 남들이 만들어주신걸 써보기</h4>

<h4 id="2-내가-라이브러리를-만들어서-cocoapods에-올려보자">2. 내가 라이브러리를 만들어서 cocoapods에 올려보자!</h4>

<h4 id="3-cocoapods-올린걸-업데이트-하기">3. cocoapods 올린걸 업데이트 하기</h4>

<p><br /><br /><br /><br /></p>

<p><a href="https://cocoapods.org/">https://cocoapods.org/</a></p>

<p><br /><br /></p>

<h2 id="1-cocoapods-남들이-만들어주신걸-써보기-1">1. cocoapods 남들이 만들어주신걸 써보기</h2>

<p>남들이 만들어주신걸 쓰기에는 엄청 편하다.
프로젝트를 생성해서 터미널로 해당 프로젝트가 있는 폴더에</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pod init
</code></pre></div></div>

<p>이라고 하면 Podfile이라는 파일이 만들어진다.
해당 파일을 열어보면</p>

<p><img src="/tec/images/2017/01/ios_cocoapods/1.png" alt="Alt text" /></p>

<p>이런식의 구조가 만들어져 있을 것이다.
그럼 use_frameworks! 밑에줄에 스페이스바두번 이후에 pod ‘podName’ 이런식으로 적으면 된다.</p>

<h4 id="예제">예제!</h4>

<p><img src="/tec/images/2017/01/ios_cocoapods/2.png" alt="Alt text" /></p>

<p>이후에 저장하고 터미널로</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pod install
</code></pre></div></div>

<p>이라고 하면 터미널에서 엄청 많은것들이 다운받아지고 폴더 구조가 바뀐다.
그리고 .xcworkspace 을 실행시키면 라이브러리들이 다운받아져 있는걸 볼수 있다!</p>

<p><img src="/tec/images/2017/01/ios_cocoapods/3.png" alt="Alt text" /></p>

<p><br /><br /><br /><br /></p>

<h2 id="2-내가-라이브러리를-만들어서-cocoapods에-올려보자-1">2. 내가 라이브러리를 만들어서 cocoapods에 올려보자!</h2>

<p><a href="https://guides.cocoapods.org/making/making-a-cocoapod.html">https://guides.cocoapods.org/making/making-a-cocoapod.html</a></p>

<p>터미널을 연다. 그리고 라이브러리 폴더를 내가 보기편한곳에 나두려면 터미널에서 해당 장소로간다.(나는 Desktop)
그리고 pod lib create [라이브러리네임] 을 친다.</p>

<p><br /><br /></p>

<p><img src="/tec/images/2017/01/ios_cocoapods/4.png" alt="Alt text" /></p>

<p><br /><br /></p>

<p>그럼 이런 창이 나오게 된다.</p>

<p>그리고 언어를 물어보는데 나는 Swift라고 하겠다.
다음은 데모 앱을 만들겠냐고 하는건데 Yes를 입력하겠다.
그다음은 None, No</p>

<p><br /><br /></p>

<p><img src="/tec/images/2017/01/ios_cocoapods/5.png" alt="Alt text" /></p>

<p><br /><br /></p>

<p>이후에 이렇게 된다.</p>

<p><br /><br /></p>

<p><img src="/tec/images/2017/01/ios_cocoapods/6.png" alt="Alt text" /></p>

<p><br /><br /></p>

<p><img src="/tec/images/2017/01/ios_cocoapods/7.png" alt="Alt text" /></p>

<p><br /><br /><br /></p>

<h3 id="pkcutilpodspec를-보겠다">PKCUtil.podspec를 보겠다.</h3>

<p><img src="/tec/images/2017/01/ios_cocoapods/8.png" alt="Alt text" /></p>

<p>일단 #은 주석임</p>

<p>고칠꺼는 s.summary 과 s.description 깃허브 아이디들</p>

<p><img src="/tec/images/2017/01/ios_cocoapods/9.png" alt="Alt text" /></p>

<p><br /><br /></p>

<h3 id="podsdevelopment-podspkcutilpodnamepkcutilpodnameclasses-를-보겠다">Pods/Development Pods/PKCUtil(podName)/PKCUtil(podName)/Classes 를 보겠다.</h3>

<p>ReplaceMe.swift라고 친절히 나를 바꾸세요 라는 클래스가 있다.</p>

<p><br /><br /></p>

<p>그리고 깃허브(https://github.com) 에서 리포지토리(repository)를 podName과 똑같이 하나 만들어 놓자!
그리고 해당 깃을(나는 https://github.com/pikachu987/PKCUtil.git) clone하자.
클론하는 방법은 터미널에서</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/pikachu987/PKCUtil.git
</code></pre></div></div>

<p>라고 하면 터미널 pwd 위치에 클론이 된다.
clone한 폴더에 내가 만든 cocoapods 폴더 전체(command+A)를 넣자.</p>

<p><img src="/tec/images/2017/01/ios_cocoapods/14.png" alt="Alt text" /></p>

<p><br /><br /><br /></p>

<h2 id="이제-터미널">이제 터미널!</h2>

<p>터미널에서 만든 폴더(나는 데스크탑에 PKCUtil를 만들었으니까 /Users/guanho/Desktop/PKCUtil)에 cd로 들어간다.
그리고 터미널에서</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pod lib lint
</code></pre></div></div>

<p>를 써준다.</p>

<p><img src="/tec/images/2017/01/ios_cocoapods/10.png" alt="Alt text" /></p>

<p><br /><br /><br /></p>

<p>만약에 에러가 나면</p>

<p><img src="/tec/images/2017/01/ios_cocoapods/11.png" alt="Alt text" /></p>

<p>이런식으로 난다.</p>

<p>어떤 에러인지 찾아보자</p>

<p><img src="/tec/images/2017/01/ios_cocoapods/12.png" alt="Alt text" /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pod lib lint --allow-warnings PKCUtil.podspec
</code></pre></div></div>

<p>그대로 복사하지 말고 PKCUtil를 podName으로 바꿔주자.</p>

<p><img src="/tec/images/2017/01/ios_cocoapods/13.png" alt="Alt text" /></p>

<p>그러면 어떤것들이 잘못됬는지 리스트로 보인다.  고친다음 다시 pod lib lint를 하자</p>

<p><br /><br /><br /></p>

<p><a href="https://guides.cocoapods.org/making/making-a-cocoapod.html">cocoapods</a> 에서는 이런식으로 설명이 되어있다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add -A &amp;&amp; git commit -m "커밋 메시지를 쓰세요~~~~"
git tag '0.1.0'
git push --tags
git push origin master
</code></pre></div></div>

<p>git tag에는 PKCUtil.podspec파일의 s.version 과 같은 버전을 쓰면된다.</p>

<p><br /><br /></p>

<p><img src="/tec/images/2017/01/ios_cocoapods/15.png" alt="Alt text" /></p>

<p><img src="/tec/images/2017/01/ios_cocoapods/16.png" alt="Alt text" /></p>

<p><img src="/tec/images/2017/01/ios_cocoapods/17.png" alt="Alt text" /></p>

<p><br /><br /></p>

<h3 id="이제-cocoapods-올려야함">이제 cocoapods 올려야함</h3>

<p>터미널에서</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pod trunk push PKCUtil.podspec
</code></pre></div></div>

<p><br /><br /></p>

<p><br /><br /></p>

<p><img src="/tec/images/2017/01/ios_cocoapods/18.png" alt="Alt text" /></p>

<p><br /></p>

<p>하지만 <a href="https://guides.cocoapods.org/making/making-a-cocoapod.html">cocoapods</a> 여기에 바로 나오는건 아니고 좀 시간을 기다려야 나오게 된다.
하지만 프로젝트를 만든 후에
Profile 파일에</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pod "PKCUtil"
</code></pre></div></div>

<p>을 쓰게 되면 바로 설치가 된다</p>

<p><a href="https://guides.cocoapods.org/making/making-a-cocoapod.html">cocoapods</a> 에 정상적으로 올라와 있는 스크린샷이다.</p>

<p><img src="/tec/images/2017/01/ios_cocoapods/22.png" alt="Alt text" /></p>

<p><br /><br /><br /><br /></p>

<h2 id="3-cocoapods-올린걸-업데이트-하기-1">3. cocoapods 올린걸 업데이트 하기</h2>

<p>그리고 업데이트를 하려면 수정할 클래스파일 등등을 수정 후</p>

<p><img src="/tec/images/2017/01/ios_cocoapods/21.png" alt="Alt text" /></p>

<p>podName.podspec 에 s.version 버전을 바꾼 후</p>

<p><img src="/tec/images/2017/01/ios_cocoapods/19.png" alt="Alt text" /></p>

<p><img src="/tec/images/2017/01/ios_cocoapods/20.png" alt="Alt text" /></p>

<p>여기 여기로 해서 버전을 같게 바꾸자.</p>

<p>그리고</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pod lib lint
</code></pre></div></div>

<p>를 해서 에러검사를 하고</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add -A &amp;&amp; git commit -m "커밋 메시지를 쓰세요~~~~"
git tag '바꾼 버전'
git push --tags
git push origin master
</code></pre></div></div>

<p>git tag에 버전을 같게 올린다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pod trunk push PKCUtil.podspec
</code></pre></div></div>

<p>그리고 cocoapods에 푸시</p>

<p>하면 끝난다.
버전 업데이트 또한 푸시하자마자 cocoapods에서 바로 버전바뀐게 보이지 않고 시간이 지나야 보이게 된다.
하지만 Profile에</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pod 'podName'
</code></pre></div></div>

<p>을 적고</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pod install
</code></pre></div></div>

<p>을 하면 바로 수정이 된다.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/ios/2017/01/11/cocoapodsCreate/</guid>
                <description>
                    
                    ios cocoapods에서 라이브러리를 생성해보자! (cocoapods lib create)
                    
                </description>
                <pubDate>Wed, 11 Jan 2017 19:00:00 +0900</pubDate>
                <author>gwanho kim</author>
            </item>
        
    
        
            <item>
                <title>Swift Adobe Image Editor</title>
                <link>http://localhost:4000/swift/2016/09/12/swiftAdobeImageEditro/</link>
                <content:encoded>
                    <![CDATA[
                    <p>해당 소스는 깃허브페이지
<a href="https://github.com/pikachu987/TIL/tree/master/swift2/AdobeImageEditor">github</a>
에 올려져 있다.</p>

<p><br /></p>

<p><a href="https://www.youtube.com/embed/8VzEs-gEeEQ">동영상보기</a></p>

<p><a href="https://www.youtube.com/embed/8VzEs-gEeEQ" title="editor"><img src="https://pikachu987.github.io/tec/images/swift_adobeEditor/30.png" alt="동영상 클릭" /></a></p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/1.png" alt="Alt text" /></p>

<p>우리가 일단 Adobe 이미지 에디터를 사용려면 당연히 Adobe 개발자 사이트 <a href="https://creativesdk.adobe.com/downloads.html">adobe</a> 에 회원가입을 해야 한다.
상단에 보면 Downloads와 My Apps에만 들어갈 것이다.</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/2.png" alt="Alt text" /></p>

<p>일단 <a href="https://creativesdk.adobe.com/downloads.html">Downloads</a> 에 들어가서 STATIC FRAMEWORKS(DEPRECATED)를 클릭해서 다운받자.</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/3.png" alt="Alt text" /></p>

<p>다운받으면 framework가 엄청 많다…</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/4.png" alt="Alt text" /></p>

<p>우리한테 필요한 것은 이 4개이다. 그런데 .bundle는 어디 있을까?
정답은 .framework를 들어가면 .bundle이 있을것이다. 복붙해서 이렇게 4개를 만들자.</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/5.png" alt="Alt text" /></p>

<p>해당 IOS앱 폴더에 해당 4개를 넣자.</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/6.png" alt="Alt text" /></p>

<p>그리고 4개를 드래그해서 xCode상에 넣자.</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/7.png" alt="Alt text" /></p>

<p>TARGETS에서 General에서 Linked Frameworks and Libraies 에 보면 이런식으로 4개가 생겼을 것이다.
여기서 +를 눌러서 추가한다.</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/8.png" alt="Alt text" /></p>

<p>이런식으로 하나씩하나씩 추가를 해서</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/9.png" alt="Alt text" /></p>

<p>이렇게 나오도록 추가를 한다.</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/10.png" alt="Alt text" /></p>

<p>이제 Bulid Settings에 들어가서 Linking를 찾는다.</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/11.png" alt="Alt text" /></p>

<p>Other Linker Flags에 이런식으로 적어준다.</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/12.png" alt="Alt text" /></p>

<p>브릿지헤더에서 이런식으로 적어준다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
//
//  Use this file to import your target's public headers that you would like to expose to Swift.
//

#ifndef AdobeCreative_Bridging_Header_h
#define AdobeCreative_Bridging_Header_h

#import &lt;AdobeCreativeSDKCore/AdobeCreativeSDKCore.h&gt;
#import &lt;AdobeCreativeSDKImage/AdobeCreativeSDKImage.h&gt;

#endif /* AdobeCreative_Bridging_Header_h */


</code></pre></div></div>

<p><img src="/tec/images/2016/09/swift_adobeEditor/13.png" alt="Alt text" /></p>

<p><a href="https://creativesdk.adobe.com/myapps.html">MyApps</a> 에 들어가서 새로운 앱을 만든다.</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/14.png" alt="Alt text" /></p>

<p>여기서 중요한건 SECRET를 꼭 복사해놓자.</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/15.png" alt="Alt text" /></p>

<p>AppDelegate.swift에 이런식으로 ID와 SECRET를 한줄 추가한다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
//adobe
        AdobeUXAuthManager.sharedManager().setAuthenticationParametersWithClientID("ea2bb582861f48d8970f0155a54fee22", withClientSecret: "0ce233b2-3f4a-4851-8307-934930cbcc1e")

</code></pre></div></div>

<p><img src="/tec/images/2016/09/swift_adobeEditor/16.png" alt="Alt text" /></p>

<p>(하단부분에 총 소스를 올려두겠다.)</p>

<p>UIViewController에</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
UIImagePickerControllerDelegate, UINavigationControllerDelegate, AdobeUXImageEditorViewControllerDelegate

</code></pre></div></div>

<p>를 추가하자.</p>

<p>UIImagePickerControllerDelegate와 UINavigationControllerDelegate는 카메라, 사진 선택하는데 필요한 딜리게이트이고
AdobeUXImageEditorViewControllerDelegate는 AdobeImageEditor하는데 필요한 딜리게이트이다.</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/17.png" alt="Alt text" /></p>

<p>카메라, 사진에 필요한 Picker를 변수로 지정.</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/18.png" alt="Alt text" /></p>

<p>picker설정을 한다.</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/19.png" alt="Alt text" /></p>

<p>버튼이벤트를 준다.</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/20.png" alt="Alt text" /></p>

<p>picker 딜리게이트 관련 메소드이다.</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/21.png" alt="Alt text" /></p>

<p>여기는 adobe 관련 설정을 한다.</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/22.png" alt="Alt text" /></p>

<p>adobe에서 완성된 이미지를 받아온다.</p>

<p>UIViewController 소스이다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
//
//  ViewController.swift
//  AdobeImageEditor
//
//  Created by guanho on 2016. 9. 7..
//  Copyright © 2016년 guanho. All rights reserved.
//

import UIKit

class ViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate, AdobeUXImageEditorViewControllerDelegate {



    //이미지 피커
    let picker = UIImagePickerController()

    @IBOutlet var mainView: UIView!
    @IBOutlet var imageView: UIImageView!
    let eatImage = UIImage(named: "eat.jpg")




    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
        picker.allowsEditing = true
        picker.delegate = self
    }



    @IBAction func btnAction(sender: AnyObject) {
        let alert = UIAlertController(title:"",message:"이미지 선택", preferredStyle: .ActionSheet)
        alert.addAction(UIAlertAction(title:"카메라",style: .Default,handler:{(alert) in
            self.imageCallback(UIImagePickerControllerSourceType.Camera)
        }))
        alert.addAction(UIAlertAction(title:"사진첩",style: .Default,handler:{(alert) in
            self.imageCallback(UIImagePickerControllerSourceType.PhotoLibrary)
        }))
        alert.addAction(UIAlertAction(title:"치킨이미지",style: .Default,handler:{(alert) in
            self.photoEditorStart(self.eatImage)
        }))
        self.presentViewController(alert, animated: false, completion: {(_) in })
    }



    //이미지 콜백
    func imageCallback(sourceType : UIImagePickerControllerSourceType){
        picker.sourceType = sourceType
        presentViewController(picker, animated: false, completion: nil)
    }
    //이미지 끝
    func imagePickerControllerDidCancel(picker: UIImagePickerController) {
        dismissViewControllerAnimated(true, completion: nil)
    }
    //이미지 받아오기
    func imagePickerController(picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject]) {
        var newImage: UIImage
        if let possibleImage = info["UIImagePickerControllerEditedImage"] as? UIImage {
            newImage = possibleImage
        } else if let possibleImage = info["UIImagePickerControllerOriginalImage"] as? UIImage {
            newImage = possibleImage
        } else {
            return
        }
        dismissViewControllerAnimated(true, completion: {(_) in
            self.photoEditorStart(newImage)
        })
    }



    //이미지 에디터 시작
    func photoEditorStart(image: UIImage!){
        dispatch_async(dispatch_get_main_queue()) {
            //AdobeImageEditor 설정
            AdobeImageEditorCustomization.setToolOrder([
                kAdobeImageEditorEnhance,        /* Enhance */
                kAdobeImageEditorEffects,        /* Effects */
                kAdobeImageEditorStickers,       /* Stickers */
                kAdobeImageEditorOrientation,    /* Orientation */
                kAdobeImageEditorCrop,           /* Crop */
                kAdobeImageEditorColorAdjust,    /* Color */
                kAdobeImageEditorLightingAdjust, /* Lighting */
                kAdobeImageEditorSharpness,      /* Sharpness */
                kAdobeImageEditorDraw,           /* Draw */
                kAdobeImageEditorText,           /* Text */
                kAdobeImageEditorRedeye,         /* Redeye */
                kAdobeImageEditorWhiten,         /* Whiten */
                kAdobeImageEditorBlemish,        /* Blemish */
                kAdobeImageEditorBlur,           /* Blur */
                kAdobeImageEditorMeme,           /* Meme */
                kAdobeImageEditorFrames,         /* Frames */
                kAdobeImageEditorFocus,          /* TiltShift */
                kAdobeImageEditorSplash,         /* ColorSplash */
                kAdobeImageEditorOverlay,        /* Overlay */
                kAdobeImageEditorVignette        /* Vignette */
                ])

            let adobeViewCtr = AdobeUXImageEditorViewController(image: image)
            adobeViewCtr.delegate = self
            self.presentViewController(adobeViewCtr, animated: true) { () -&gt; Void in

            }
        }
    }



    //AdobeCreativeSDK 이미지 받아옴
    func photoEditor(editor: AdobeUXImageEditorViewController, finishedWithImage image: UIImage?) {
        editor.dismissViewControllerAnimated(true, completion: {(_) in
            let imageWidth = self.mainView.frame.width
            let imageHeight = self.mainView.frame.height

            let rateWidth = (image?.size.width)!/imageWidth
            let rateHeight = (image?.size.height)!/imageHeight

            var widthValue : CGFloat! = imageWidth
            var heightValue : CGFloat! = imageHeight

            if rateWidth &gt; rateHeight{
                heightValue = widthValue * (image?.size.height)! / (image?.size.width)!
            }else{
                widthValue = heightValue * (image?.size.width)! / (image?.size.height)!
            }
            self.imageView.frame = CGRect(x: (imageWidth-widthValue)/2, y: (imageHeight-heightValue)/2, width: widthValue, height: heightValue)
            self.imageView.image = image
        })
    }


    //AdobeCreativeSDK 캔슬
    func photoEditorCanceled(editor: AdobeUXImageEditorViewController) {
        editor.dismissViewControllerAnimated(true, completion: nil)
    }




    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
}



</code></pre></div></div>

<p>미리보기 이미지!</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/23.png" alt="Alt text" /></p>

<p>첫 화면이다.</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/24.png" alt="Alt text" /></p>

<p>클릭을 하면 선택을 할수있다.</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/25.png" alt="Alt text" /></p>

<p>이미지 에디터 화면이다.</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/26.png" alt="Alt text" /></p>

<p>크롭화면이다.</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/27.png" alt="Alt text" /></p>

<p>방향전환 화면이다.</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/28.png" alt="Alt text" /></p>

<p>그리기 화면이다.</p>

<p><img src="/tec/images/2016/09/swift_adobeEditor/29.png" alt="Alt text" /></p>

<p>완료후 받아온 이미지이다.</p>

<p>엄청 쉽게 고급기능을 쓸 수 있게 해주는 Adobe이다. 너무 좋은듯하다.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/swift/2016/09/12/swiftAdobeImageEditro/</guid>
                <description>
                    
                    Adobe 이미지 에디터 사용해보기
                    
                </description>
                <pubDate>Mon, 12 Sep 2016 17:30:00 +0900</pubDate>
                <author>gwanho kim</author>
            </item>
        
    
        
            <item>
                <title>Swift Kakao Login</title>
                <link>http://localhost:4000/swift/2016/09/11/swiftKakaoLogin/</link>
                <content:encoded>
                    <![CDATA[
                    <p>해당 소스는 깃허브페이지
<a href="https://github.com/pikachu987/TIL/tree/master/swift2/LoginFK">github</a>
에 올려져 있다.</p>

<p>여기서는 앞서했던 Swift2로 Facebook 로그인 하는 예제에서 카카오 로그인을 추가하는 예제를 살펴보겠다.</p>

<p><img src="/tec/images/2016/09/swift_kakaoLogin/01.png" alt="Alt text" /></p>

<p>카카오톡 로그인버튼을 한개 만들어주자.</p>

<p><img src="/tec/images/2016/09/swift_kakaoLogin/02.png" alt="Alt text" /></p>

<p>해당 버튼에 이벤트를 추가</p>

<p><img src="/tec/images/2016/09/swift_kakaoLogin/03.png" alt="Alt text" /></p>

<p><a href="https://developer.kakao.com/">developer.kakao</a> 에 들어가서 새로운 앱을 만들자</p>

<p><img src="/tec/images/2016/09/swift_kakaoLogin/04.png" alt="Alt text" /></p>

<p>아주아주 간단하개 만들어졌다. 여기서 플랫폼 추가를 누르자.</p>

<p><img src="/tec/images/2016/09/swift_kakaoLogin/05.png" alt="Alt text" /></p>

<p>번들을 넣고,</p>

<p><img src="/tec/images/2016/09/swift_kakaoLogin/06.png" alt="Alt text" /></p>

<p>사용자관리에 들어가서 사용 ON을 누른 다음 하단의 텍스트등등을 기록한다. 그리고 저장을 누르자.</p>

<p><img src="/tec/images/2016/09/swift_kakaoLogin/07.png" alt="Alt text" /></p>

<p>카카오 SDK를 다운받으면 이런 구조로 되어 있다</p>

<p><img src="/tec/images/2016/09/swift_kakaoLogin/08.png" alt="Alt text" /></p>

<p>framework를 자신의 앱폴더로 이동한 다음 끌어서 앱에 추가한다.</p>

<p><img src="/tec/images/2016/09/swift_kakaoLogin/19.png" alt="Alt text" /></p>

<p>info.plist 를 마우스 우 클릭해서 Open As &gt; Source Code를 누른다.
그리고 기존 페이스북설정에 카카오톡 설정을 추가한다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
&lt;key&gt;CFBundleURLTypes&lt;/key&gt;
    &lt;array&gt;
        &lt;dict&gt;
            &lt;key&gt;CFBundleURLSchemes&lt;/key&gt;
            &lt;array&gt;
                &lt;string&gt;fb1607177109583285&lt;/string&gt;
            &lt;/array&gt;
        &lt;/dict&gt;
        &lt;dict&gt;
            &lt;key&gt;CFBundleTypeRole&lt;/key&gt;
            &lt;string&gt;Editor&lt;/string&gt;
            &lt;key&gt;CFBundleURLSchemes&lt;/key&gt;
            &lt;array&gt;
                &lt;string&gt;kakao8e8ab69c7b01eaeebce7d7bc0afc2896&lt;/string&gt;
            &lt;/array&gt;
        &lt;/dict&gt;
    &lt;/array&gt;
    &lt;key&gt;FacebookAppID&lt;/key&gt;
    &lt;string&gt;1607177109583285&lt;/string&gt;
    &lt;key&gt;FacebookDisplayName&lt;/key&gt;
    &lt;string&gt;LoginF&lt;/string&gt;
    &lt;key&gt;KAKAO_APP_KEY&lt;/key&gt;
    &lt;string&gt;8e8ab69c7b01eaeebce7d7bc0afc2896&lt;/string&gt;
    &lt;key&gt;LSApplicationQueriesSchemes&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;fbapi&lt;/string&gt;
        &lt;string&gt;fb-messenger-api&lt;/string&gt;
        &lt;string&gt;fbauth2&lt;/string&gt;
        &lt;string&gt;fbshareextension&lt;/string&gt;
        &lt;string&gt;kakao8e8ab69c7b01eaeebce7d7bc0afc2896&lt;/string&gt;
        &lt;string&gt;kakaokompassauth&lt;/string&gt;
        &lt;string&gt;storykompassauth&lt;/string&gt;
        &lt;string&gt;kakaolink&lt;/string&gt;
        &lt;string&gt;kakaotalk-4.5.0&lt;/string&gt;
        &lt;string&gt;kakaostory-2.9.0&lt;/string&gt;
    &lt;/array&gt;

</code></pre></div></div>

<p><img src="/tec/images/2016/09/swift_kakaoLogin/09.png" alt="Alt text" /></p>

<p>여기서는 브릿지 헤더(bridging header)를 만들어야 한다. 만드는 방법은 마우스 우클릭해서 New File를 누른다.</p>

<blockquote>
  <p>브릿지 헤더란?
Objective-C 코드를 Swift에서 import만 하면 쓸 수 있게 만들어주는 역활을 한다.</p>
</blockquote>

<p><img src="/tec/images/2016/09/swift_kakaoLogin/10.png" alt="Alt text" /></p>

<p>그리고 C++ File을 누르고</p>

<p><img src="/tec/images/2016/09/swift_kakaoLogin/11.png" alt="Alt text" /></p>

<p>아무렇게나 이름을 쓴다.</p>

<p><img src="/tec/images/2016/09/swift_kakaoLogin/12.png" alt="Alt text" /></p>

<h4 id="이때-제일-중요한게-꼭-create-briding-header를-눌러야-브릿지헤더가-생성이된다">이때 제일 중요한게 꼭 Create Briding Header를 눌러야 브릿지헤더가 생성이된다!!!!</h4>

<p><img src="/tec/images/2016/09/swift_kakaoLogin/13.png" alt="Alt text" /></p>

<p>생성이 된 모습이다. 나머지 aaa. 으로 시작되는 2개 파일은 삭제해준다.</p>

<p><img src="/tec/images/2016/09/swift_kakaoLogin/14.png" alt="Alt text" /></p>

<p>생성된 브릿지 헤더에 kakao SDK를 import 해준다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
#import &lt;KakaoOpenSDK/KakaoOpenSDK.h&gt;

</code></pre></div></div>

<p><img src="/tec/images/2016/09/swift_kakaoLogin/15.png" alt="Alt text" /></p>

<p>AppDelegate.swift 파일에 들어가서 Kakao관련 내용을 추가한다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool {
        // Override point for customization after application launch.

        //firebase
        FIRApp.configure()


        //facebook
        return FBSDKApplicationDelegate.sharedInstance().application(application, didFinishLaunchingWithOptions:launchOptions)
    }
    func application(application: UIApplication, openURL url: NSURL, sourceApplication: String?, annotation: AnyObject) -&gt; Bool {
        //kakao
        if KOSession.isKakaoAccountLoginCallback(url) {
            return KOSession.handleOpenURL(url)
        }
        return FBSDKApplicationDelegate.sharedInstance().application(application, openURL: url, sourceApplication: sourceApplication, annotation: annotation)
    }

    func application(application: UIApplication, handleOpenURL url: NSURL) -&gt; Bool {
        //kakao
        if KOSession.isKakaoAccountLoginCallback(url) {
            return KOSession.handleOpenURL(url)
        }
        return false
    }

</code></pre></div></div>

<p><img src="/tec/images/2016/09/swift_kakaoLogin/16.png" alt="Alt text" /></p>

<p>이제 아까 만들었던 카카오 버튼 이벤트에 내용을 추가하는 것이다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
let session: KOSession = KOSession.sharedSession();
        if session.isOpen() {
            session.close()
        }
        session.presentingViewController = self
        session.openWithCompletionHandler({ (error) -&gt; Void in
            if error != nil{
                print(error.localizedDescription)
            }else if session.isOpen() == true{
                KOSessionTask.meTaskWithCompletionHandler({ (profile , error) -&gt; Void in
                    if profile != nil{
                        dispatch_async(dispatch_get_main_queue(), { () -&gt; Void in
                            let kakao : KOUser = profile as! KOUser
                            //String(kakao.ID)
                            if let value = kakao.properties["nickname"] as? String{
                                self.textView.text = "nickname : \(value)\r\n"
                            }
                            if let value = kakao.properties["profile_image"] as? String{
                                self.imageView.image = UIImage(data: NSData(contentsOfURL: NSURL(string: value)!)!)
                            }
                            if let value = kakao.properties["thumbnail_image"] as? String{
                                self.image2View.image = UIImage(data: NSData(contentsOfURL: NSURL(string: value)!)!)
                            }
                        })
                    }
                })
            }else{
                print("isNotOpen")
            }
        })

</code></pre></div></div>

<p>물론 더 많은 것을 쓸 수 있겠지만 그것들은 자기가 연구해보길…. 카카오 개발자센터에서 쉽게 확인 할 수 있다.</p>

<p><img src="/tec/images/2016/09/swift_kakaoLogin/17.png" alt="Alt text" /></p>

<p>이미지등등을 외부에서 가져오려면 info.plist파일에 Security라는걸 추가해줘야 한다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
&lt;key&gt;NSAppTransportSecurity&lt;/key&gt;
    &lt;dict&gt;
        &lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt;
        &lt;true/&gt;
    &lt;/dict&gt;

</code></pre></div></div>

<p><img src="/tec/images/2016/09/swift_kakaoLogin/18.png" alt="Alt text" /></p>

<p>짜잔!!!!! 완성</p>

<p><br /><br /></p>

<p>나는 info.plist에서 페이스북 한개는 잘되고 카카오톡 한개는 잘됬는데 둘이 연동하는법 때문에 좀 많이 어려웠었다.
그래서 카카오톡 추가하기 예제만 하려고 했지만 둘이 연동해서 같이 하는게 더 좋을거라는 생각 때문에 이전에 만들었었던
예제에서 부터 시작을 했다.</p>

<p>아!!!</p>

<p>그리고 페북, 카톡 로그인하기 할 때 아이디값(회원의 고유값) 은</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
페이스북 = user?.uid
카카오톡 = String(kakao.ID)

</code></pre></div></div>

<p>을 쓰면 된다.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/swift/2016/09/11/swiftKakaoLogin/</guid>
                <description>
                    
                    앞에서 했던 FacebookLogin에서 Kakao Login 카카오톡 로그인 추가하기
                    
                </description>
                <pubDate>Sun, 11 Sep 2016 17:30:00 +0900</pubDate>
                <author>gwanho kim</author>
            </item>
        
    
        
            <item>
                <title>Swift Firebase Facebook Login</title>
                <link>http://localhost:4000/swift/2016/09/08/swiftFBLogin/</link>
                <content:encoded>
                    <![CDATA[
                    <p>해당 소스는 깃허브페이지
<a href="https://github.com/pikachu987/TIL/tree/master/swift2/LoginF">github</a>
에 올려져 있다.</p>

<p>여기서는 Swift2로 Facebook 로그인 하는 과정과 예제를 살펴보겠다.</p>

<p>가장 먼저 앱을 만들어 보자.</p>

<p><img src="/tec/images/2016/09/swift_fbLogin/01.png" alt="Alt text" /></p>

<p><img src="/tec/images/2016/09/swift_fbLogin/02.png" alt="Alt text" /></p>

<p><br />
그리고 <a href="http://developer.facebook.com">developer.facebook</a>에 들어가서 새 앱을 만든다.
<br /><br /></p>

<p><img src="/tec/images/2016/09/swift_fbLogin/03.png" alt="Alt text" /></p>

<p><br />
IOS를 클릭!! 한다.
<br /><br /></p>

<p><img src="/tec/images/2016/09/swift_fbLogin/04.png" alt="Alt text" /></p>

<p><br />
Facebook 앱 네임을 넣는데 FB나 Facebook 관련 글자는 써지지가 않는다.
<br /><br /></p>

<p><img src="/tec/images/2016/09/swift_fbLogin/05.png" alt="Alt text" /></p>

<p><br />
연락처이메일과 카테고리를 선택후 앱 ID를 만든다.
<br /><br /></p>

<p><img src="/tec/images/2016/09/swift_fbLogin/06.png" alt="Alt text" /></p>

<p><br /><br /></p>

<p><img src="/tec/images/2016/09/swift_fbLogin/07.png" alt="Alt text" /></p>

<p><img src="/tec/images/2016/09/swift_fbLogin/08.png" alt="Alt text" /></p>

<p><br />
이 값들은 Swift앱 내의 info.plist파일 안에 넣어야 하는내용이므로 어딘가에 복사해두기로 한다.
<br /><br /></p>

<p><img src="/tec/images/2016/09/swift_fbLogin/09.png" alt="Alt text" /></p>

<p><br />
하단으로 내려가면 Swift APP Bundle적는 부분이 있다. 자신이 만든 앱 Bundle와 맞춰서 적으면 된다.
<br /><br /></p>

<p><img src="/tec/images/2016/09/swift_fbLogin/10.png" alt="Alt text" /></p>

<p><br />
<a href="https://console.firebase.google.com/">console.firebase</a>에 들어가서 새 프로젝트를 만든다.
<br /><br /></p>

<p><img src="/tec/images/2016/09/swift_fbLogin/11.png" alt="Alt text" /></p>

<p><img src="/tec/images/2016/09/swift_fbLogin/12.png" alt="Alt text" /></p>

<p><br />
번들을 적는다.
<br /><br /></p>

<p><img src="/tec/images/2016/09/swift_fbLogin/14.png" alt="Alt text" />
다시 페이스북으로 간 다음 대시보드에서 앱 ID와 앱 시크릿코드를 확인한다.</p>

<p><br /></p>

<p><img src="/tec/images/2016/09/swift_fbLogin/13.png" alt="Alt text" /></p>

<p>파이어베이스 Auth에 들어가서 로그인 방법을 클릭한다. 그러면 페이스북이 두둥! 있을것이다.</p>

<p><img src="/tec/images/2016/09/swift_fbLogin/15.png" alt="Alt text" /></p>

<p>페이스북을 사용설정한 뒤 페이스북에서 확인한 앱ID와 앱 시크릿코드를 확인한 다음 OAuth 리디렉션 URI를 복사한다.</p>

<p><img src="/tec/images/2016/09/swift_fbLogin/16.png" alt="Alt text" /></p>

<p>이제 마지막부분이다! 페이스북으로 가서 +제품추가를 클릭한 뒤</p>

<p><img src="/tec/images/2016/09/swift_fbLogin/17.png" alt="Alt text" /></p>

<p>Facebook 로그인 시작하기 버튼을 누른다.</p>

<p><img src="/tec/images/2016/09/swift_fbLogin/18.png" alt="Alt text" /></p>

<p>그리고 복사해두었던 리디렉션 URI를 붙이고 하단에 버튼을 누른다.</p>

<p><img src="/tec/images/2016/09/swift_fbLogin/19.png" alt="Alt text" /></p>

<p>파이어베이스에 들어가서 GoogleService-info.plist파일을다운 받고 해당 파일을 앱 폴더안 info.plist옆에 넣는다.</p>

<p><img src="/tec/images/2016/09/swift_fbLogin/21.png" alt="Alt text" /></p>

<p>그리고 앱 Podfile에</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>use_frameworks!
pod 'Firebase'
pod 'Firebase/Core'
pod 'Firebase/Auth'
pod 'FBSDKCoreKit'
pod 'FBSDKShareKit'
pod 'FBSDKLoginKit'
</code></pre></div></div>

<p>을 넣고 pod install 을 한다.</p>

<p>해당 부분은 <a href="https://cocoapods.org/">cocoapods</a> 참조</p>

<p><img src="/tec/images/2016/09/swift_fbLogin/20.png" alt="Alt text" /></p>

<p>그리고 앱을 실행 후 Info.plist파일 - 소스보기를 누른다. 아까 페이스북에서 봤던 코드 붙여넣기!!!</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;key&gt;CFBundleURLTypes&lt;/key&gt;
    &lt;array&gt;
        &lt;dict&gt;
            &lt;key&gt;CFBundleURLSchemes&lt;/key&gt;
            &lt;array&gt;
                &lt;string&gt;fb{ID}&lt;/string&gt;
            &lt;/array&gt;
        &lt;/dict&gt;
    &lt;/array&gt;
    &lt;key&gt;FacebookAppID&lt;/key&gt;
    &lt;string&gt;{ID}&lt;/string&gt;
    &lt;key&gt;FacebookDisplayName&lt;/key&gt;
    &lt;string&gt;LoginF&lt;/string&gt;
    &lt;key&gt;LSApplicationQueriesSchemes&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;fbapi&lt;/string&gt;
        &lt;string&gt;fb-messenger-api&lt;/string&gt;
        &lt;string&gt;fbauth2&lt;/string&gt;
        &lt;string&gt;fbshareextension&lt;/string&gt;
    &lt;/array&gt;
</code></pre></div></div>

<p><img src="/tec/images/2016/09/swift_fbLogin/22.png" alt="Alt text" /></p>

<p>앱 딜리게이트로 가서 간단하게</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import UIKit
import Firebase
import FirebaseAuth
import FBSDKCoreKit
import FBSDKLoginKit
import FBSDKShareKit

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {
    var window: UIWindow?
    func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool {
        // Override point for customization after application launch.

        //firebase
        FIRApp.configure()

        //facebook
        return FBSDKApplicationDelegate.sharedInstance().application(application, didFinishLaunchingWithOptions:launchOptions)
    }
    func application(application: UIApplication, openURL url: NSURL, sourceApplication: String?, annotation: AnyObject) -&gt; Bool {
        return FBSDKApplicationDelegate.sharedInstance().application(application, openURL: url, sourceApplication: sourceApplication, annotation: annotation)
    }
}
</code></pre></div></div>

<p>이렇게 코드를 넣어주자!!!</p>

<p><img src="/tec/images/2016/09/swift_fbLogin/23.png" alt="Alt text" /></p>

<p>그리고 스토리보드에서 UIButton을 하나 만들고 페이스북과 비슷한 background를 넣고 png이미지 파일을 구해서 넣어주자(디자인은 상관없슴! 사실 아무 버튼만 넣으면 상관 x)</p>

<p><img src="/tec/images/2016/09/swift_fbLogin/24.png" alt="Alt text" /></p>

<p>UIViewController에서 button에 action을 받자. 그리고 코드를 넣어준다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let login = FBSDKLoginManager()
        login.logInWithReadPermissions(["public_profile"], fromViewController: self, handler: { (result, error) in
            if error != nil{
                print("Facebook login failed. Error \(error)")
            } else if result.isCancelled {
                print("Facebook login isCancelled. result \(result.token)")
            } else {
                let credential = FIRFacebookAuthProvider.credentialWithAccessToken(FBSDKAccessToken.currentAccessToken().tokenString)
                FIRAuth.auth()?.signInWithCredential(credential) { (user, error) in
                    if error != nil {
                        print("Login failed. \(error)")
                    } else {
                        if let value = user?.email{
                            //
                        }
                        if let value = user?.displayName{
                            //
                        }
                        if let value = user?.uid{
                            //
                        }
                        if let value = user?.photoURL{
                            //self.imageView.image = UIImage(data: NSData(contentsOfURL: value)!)
                        }
                    }
                }
            }
        })
</code></pre></div></div>

<p>엄청 간단하다…</p>

<p><img src="/tec/images/2016/09/swift_fbLogin/25.jpeg" alt="Alt text" /></p>

<p>실행을 시키면 잘 나오는것을 확인 할 수 있다.</p>

<p>처음에 이걸 왜 이리 힘들었는지….</p>

<p>나는 구글로그인, 카톡로그인을 구현한 다음 페북로그인을 계속 넣으려고 했지만 실패….</p>

<p>구글 로그인을 빼니까 카톡, 페북로그인이 다 잘됨(아직 왜인지 모른다…)</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/swift/2016/09/08/swiftFBLogin/</guid>
                <description>
                    
                    Firebase Facebook Login 페이스북 로그인
                    
                </description>
                <pubDate>Thu, 08 Sep 2016 05:30:00 +0900</pubDate>
                <author>gwanho kim</author>
            </item>
        
    
  </channel>
</rss>
