<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-10-17T15:57:34+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Technology</title><subtitle>pikachu987 Technology</subtitle><entry><title type="html">Swift Adobe Image Editor</title><link href="http://localhost:4000/swift/2016/09/12/swiftAdobeImageEditro/" rel="alternate" type="text/html" title="Swift Adobe Image Editor" /><published>2016-09-12T09:30:00+01:00</published><updated>2016-09-12T09:30:00+01:00</updated><id>http://localhost:4000/swift/2016/09/12/swiftAdobeImageEditro</id><content type="html" xml:base="http://localhost:4000/swift/2016/09/12/swiftAdobeImageEditro/">&lt;p&gt;해당 소스는 깃허브페이지
&lt;a href=&quot;https://github.com/pikachu987/TIL/tree/master/swift2/AdobeImageEditor&quot;&gt;github&lt;/a&gt;
에 올려져 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/embed/8VzEs-gEeEQ&quot;&gt;동영상보기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/embed/8VzEs-gEeEQ&quot; title=&quot;editor&quot;&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/30.png&quot; alt=&quot;동영상 클릭&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/1.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우리가 일단 Adobe 이미지 에디터를 사용려면 당연히 Adobe 개발자 사이트 &lt;a href=&quot;https://creativesdk.adobe.com/downloads.html&quot;&gt;adobe&lt;/a&gt; 에 회원가입을 해야 한다.
상단에 보면 Downloads와 My Apps에만 들어갈 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/2.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;일단 &lt;a href=&quot;https://creativesdk.adobe.com/downloads.html&quot;&gt;Downloads&lt;/a&gt; 에 들어가서 STATIC FRAMEWORKS(DEPRECATED)를 클릭해서 다운받자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/3.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다운받으면 framework가 엄청 많다…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/4.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우리한테 필요한 것은 이 4개이다. 그런데 .bundle는 어디 있을까?
정답은 .framework를 들어가면 .bundle이 있을것이다. 복붙해서 이렇게 4개를 만들자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/5.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;해당 IOS앱 폴더에 해당 4개를 넣자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/6.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 4개를 드래그해서 xCode상에 넣자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/7.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;TARGETS에서 General에서 Linked Frameworks and Libraies 에 보면 이런식으로 4개가 생겼을 것이다.
여기서 +를 눌러서 추가한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/8.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이런식으로 하나씩하나씩 추가를 해서&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/9.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 나오도록 추가를 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/10.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 Bulid Settings에 들어가서 Linking를 찾는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/11.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Other Linker Flags에 이런식으로 적어준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/12.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;브릿지헤더에서 이런식으로 적어준다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//
//  Use this file to import your target's public headers that you would like to expose to Swift.
//

#ifndef AdobeCreative_Bridging_Header_h
#define AdobeCreative_Bridging_Header_h

#import &amp;lt;AdobeCreativeSDKCore/AdobeCreativeSDKCore.h&amp;gt;
#import &amp;lt;AdobeCreativeSDKImage/AdobeCreativeSDKImage.h&amp;gt;

#endif /* AdobeCreative_Bridging_Header_h */


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/13.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://creativesdk.adobe.com/myapps.html&quot;&gt;MyApps&lt;/a&gt; 에 들어가서 새로운 앱을 만든다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/14.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기서 중요한건 SECRET를 꼭 복사해놓자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/15.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;AppDelegate.swift에 이런식으로 ID와 SECRET를 한줄 추가한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//adobe
        AdobeUXAuthManager.sharedManager().setAuthenticationParametersWithClientID(&quot;ea2bb582861f48d8970f0155a54fee22&quot;, withClientSecret: &quot;0ce233b2-3f4a-4851-8307-934930cbcc1e&quot;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/16.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(하단부분에 총 소스를 올려두겠다.)&lt;/p&gt;

&lt;p&gt;UIViewController에&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
UIImagePickerControllerDelegate, UINavigationControllerDelegate, AdobeUXImageEditorViewControllerDelegate

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;를 추가하자.&lt;/p&gt;

&lt;p&gt;UIImagePickerControllerDelegate와 UINavigationControllerDelegate는 카메라, 사진 선택하는데 필요한 딜리게이트이고
AdobeUXImageEditorViewControllerDelegate는 AdobeImageEditor하는데 필요한 딜리게이트이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/17.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;카메라, 사진에 필요한 Picker를 변수로 지정.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/18.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;picker설정을 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/19.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;버튼이벤트를 준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/20.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;picker 딜리게이트 관련 메소드이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/21.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기는 adobe 관련 설정을 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/22.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;adobe에서 완성된 이미지를 받아온다.&lt;/p&gt;

&lt;p&gt;UIViewController 소스이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//
//  ViewController.swift
//  AdobeImageEditor
//
//  Created by guanho on 2016. 9. 7..
//  Copyright © 2016년 guanho. All rights reserved.
//

import UIKit

class ViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate, AdobeUXImageEditorViewControllerDelegate {



    //이미지 피커
    let picker = UIImagePickerController()

    @IBOutlet var mainView: UIView!
    @IBOutlet var imageView: UIImageView!
    let eatImage = UIImage(named: &quot;eat.jpg&quot;)




    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
        picker.allowsEditing = true
        picker.delegate = self
    }



    @IBAction func btnAction(sender: AnyObject) {
        let alert = UIAlertController(title:&quot;&quot;,message:&quot;이미지 선택&quot;, preferredStyle: .ActionSheet)
        alert.addAction(UIAlertAction(title:&quot;카메라&quot;,style: .Default,handler:{(alert) in
            self.imageCallback(UIImagePickerControllerSourceType.Camera)
        }))
        alert.addAction(UIAlertAction(title:&quot;사진첩&quot;,style: .Default,handler:{(alert) in
            self.imageCallback(UIImagePickerControllerSourceType.PhotoLibrary)
        }))
        alert.addAction(UIAlertAction(title:&quot;치킨이미지&quot;,style: .Default,handler:{(alert) in
            self.photoEditorStart(self.eatImage)
        }))
        self.presentViewController(alert, animated: false, completion: {(_) in })
    }



    //이미지 콜백
    func imageCallback(sourceType : UIImagePickerControllerSourceType){
        picker.sourceType = sourceType
        presentViewController(picker, animated: false, completion: nil)
    }
    //이미지 끝
    func imagePickerControllerDidCancel(picker: UIImagePickerController) {
        dismissViewControllerAnimated(true, completion: nil)
    }
    //이미지 받아오기
    func imagePickerController(picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject]) {
        var newImage: UIImage
        if let possibleImage = info[&quot;UIImagePickerControllerEditedImage&quot;] as? UIImage {
            newImage = possibleImage
        } else if let possibleImage = info[&quot;UIImagePickerControllerOriginalImage&quot;] as? UIImage {
            newImage = possibleImage
        } else {
            return
        }
        dismissViewControllerAnimated(true, completion: {(_) in
            self.photoEditorStart(newImage)
        })
    }



    //이미지 에디터 시작
    func photoEditorStart(image: UIImage!){
        dispatch_async(dispatch_get_main_queue()) {
            //AdobeImageEditor 설정
            AdobeImageEditorCustomization.setToolOrder([
                kAdobeImageEditorEnhance,        /* Enhance */
                kAdobeImageEditorEffects,        /* Effects */
                kAdobeImageEditorStickers,       /* Stickers */
                kAdobeImageEditorOrientation,    /* Orientation */
                kAdobeImageEditorCrop,           /* Crop */
                kAdobeImageEditorColorAdjust,    /* Color */
                kAdobeImageEditorLightingAdjust, /* Lighting */
                kAdobeImageEditorSharpness,      /* Sharpness */
                kAdobeImageEditorDraw,           /* Draw */
                kAdobeImageEditorText,           /* Text */
                kAdobeImageEditorRedeye,         /* Redeye */
                kAdobeImageEditorWhiten,         /* Whiten */
                kAdobeImageEditorBlemish,        /* Blemish */
                kAdobeImageEditorBlur,           /* Blur */
                kAdobeImageEditorMeme,           /* Meme */
                kAdobeImageEditorFrames,         /* Frames */
                kAdobeImageEditorFocus,          /* TiltShift */
                kAdobeImageEditorSplash,         /* ColorSplash */
                kAdobeImageEditorOverlay,        /* Overlay */
                kAdobeImageEditorVignette        /* Vignette */
                ])

            let adobeViewCtr = AdobeUXImageEditorViewController(image: image)
            adobeViewCtr.delegate = self
            self.presentViewController(adobeViewCtr, animated: true) { () -&amp;gt; Void in

            }
        }
    }



    //AdobeCreativeSDK 이미지 받아옴
    func photoEditor(editor: AdobeUXImageEditorViewController, finishedWithImage image: UIImage?) {
        editor.dismissViewControllerAnimated(true, completion: {(_) in
            let imageWidth = self.mainView.frame.width
            let imageHeight = self.mainView.frame.height

            let rateWidth = (image?.size.width)!/imageWidth
            let rateHeight = (image?.size.height)!/imageHeight

            var widthValue : CGFloat! = imageWidth
            var heightValue : CGFloat! = imageHeight

            if rateWidth &amp;gt; rateHeight{
                heightValue = widthValue * (image?.size.height)! / (image?.size.width)!
            }else{
                widthValue = heightValue * (image?.size.width)! / (image?.size.height)!
            }
            self.imageView.frame = CGRect(x: (imageWidth-widthValue)/2, y: (imageHeight-heightValue)/2, width: widthValue, height: heightValue)
            self.imageView.image = image
        })
    }


    //AdobeCreativeSDK 캔슬
    func photoEditorCanceled(editor: AdobeUXImageEditorViewController) {
        editor.dismissViewControllerAnimated(true, completion: nil)
    }




    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
}



&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;미리보기 이미지!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/23.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;첫 화면이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/24.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;클릭을 하면 선택을 할수있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/25.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이미지 에디터 화면이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/26.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;크롭화면이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/27.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;방향전환 화면이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/28.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리기 화면이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_adobeEditor/29.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;완료후 받아온 이미지이다.&lt;/p&gt;

&lt;p&gt;엄청 쉽게 고급기능을 쓸 수 있게 해주는 Adobe이다. 너무 좋은듯하다.&lt;/p&gt;</content><author><name></name></author><summary type="html">해당 소스는 깃허브페이지 github 에 올려져 있다.</summary></entry><entry><title type="html">Swift Kakao Login</title><link href="http://localhost:4000/swift/2016/09/11/swiftKakaoLogin/" rel="alternate" type="text/html" title="Swift Kakao Login" /><published>2016-09-11T09:30:00+01:00</published><updated>2016-09-11T09:30:00+01:00</updated><id>http://localhost:4000/swift/2016/09/11/swiftKakaoLogin</id><content type="html" xml:base="http://localhost:4000/swift/2016/09/11/swiftKakaoLogin/">&lt;p&gt;해당 소스는 깃허브페이지
&lt;a href=&quot;https://github.com/pikachu987/TIL/tree/master/swift2/LoginFK&quot;&gt;github&lt;/a&gt;
에 올려져 있다.&lt;/p&gt;

&lt;p&gt;여기서는 앞서했던 Swift2로 Facebook 로그인 하는 예제에서 카카오 로그인을 추가하는 예제를 살펴보겠다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_kakaoLogin/01.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;카카오톡 로그인버튼을 한개 만들어주자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_kakaoLogin/02.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;해당 버튼에 이벤트를 추가&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_kakaoLogin/03.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.kakao.com/&quot;&gt;developer.kakao&lt;/a&gt; 에 들어가서 새로운 앱을 만들자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_kakaoLogin/04.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아주아주 간단하개 만들어졌다. 여기서 플랫폼 추가를 누르자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_kakaoLogin/05.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;번들을 넣고,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_kakaoLogin/06.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;사용자관리에 들어가서 사용 ON을 누른 다음 하단의 텍스트등등을 기록한다. 그리고 저장을 누르자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_kakaoLogin/07.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;카카오 SDK를 다운받으면 이런 구조로 되어 있다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_kakaoLogin/08.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;framework를 자신의 앱폴더로 이동한 다음 끌어서 앱에 추가한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_kakaoLogin/19.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;info.plist 를 마우스 우 클릭해서 Open As &amp;gt; Source Code를 누른다.
그리고 기존 페이스북설정에 카카오톡 설정을 추가한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&amp;lt;key&amp;gt;CFBundleURLTypes&amp;lt;/key&amp;gt;
    &amp;lt;array&amp;gt;
        &amp;lt;dict&amp;gt;
            &amp;lt;key&amp;gt;CFBundleURLSchemes&amp;lt;/key&amp;gt;
            &amp;lt;array&amp;gt;
                &amp;lt;string&amp;gt;fb1607177109583285&amp;lt;/string&amp;gt;
            &amp;lt;/array&amp;gt;
        &amp;lt;/dict&amp;gt;
        &amp;lt;dict&amp;gt;
            &amp;lt;key&amp;gt;CFBundleTypeRole&amp;lt;/key&amp;gt;
            &amp;lt;string&amp;gt;Editor&amp;lt;/string&amp;gt;
            &amp;lt;key&amp;gt;CFBundleURLSchemes&amp;lt;/key&amp;gt;
            &amp;lt;array&amp;gt;
                &amp;lt;string&amp;gt;kakao8e8ab69c7b01eaeebce7d7bc0afc2896&amp;lt;/string&amp;gt;
            &amp;lt;/array&amp;gt;
        &amp;lt;/dict&amp;gt;
    &amp;lt;/array&amp;gt;
    &amp;lt;key&amp;gt;FacebookAppID&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;1607177109583285&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;FacebookDisplayName&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;LoginF&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;KAKAO_APP_KEY&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;8e8ab69c7b01eaeebce7d7bc0afc2896&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;LSApplicationQueriesSchemes&amp;lt;/key&amp;gt;
    &amp;lt;array&amp;gt;
        &amp;lt;string&amp;gt;fbapi&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;fb-messenger-api&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;fbauth2&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;fbshareextension&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;kakao8e8ab69c7b01eaeebce7d7bc0afc2896&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;kakaokompassauth&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;storykompassauth&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;kakaolink&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;kakaotalk-4.5.0&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;kakaostory-2.9.0&amp;lt;/string&amp;gt;
    &amp;lt;/array&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_kakaoLogin/09.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기서는 브릿지 헤더(bridging header)를 만들어야 한다. 만드는 방법은 마우스 우클릭해서 New File를 누른다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;브릿지 헤더란?
Objective-C 코드를 Swift에서 import만 하면 쓸 수 있게 만들어주는 역활을 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_kakaoLogin/10.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 C++ File을 누르고&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_kakaoLogin/11.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아무렇게나 이름을 쓴다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_kakaoLogin/12.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;이때-제일-중요한게-꼭-create-briding-header를-눌러야-브릿지헤더가-생성이된다&quot;&gt;이때 제일 중요한게 꼭 Create Briding Header를 눌러야 브릿지헤더가 생성이된다!!!!&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_kakaoLogin/13.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;생성이 된 모습이다. 나머지 aaa. 으로 시작되는 2개 파일은 삭제해준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_kakaoLogin/14.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;생성된 브릿지 헤더에 kakao SDK를 import 해준다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
#import &amp;lt;KakaoOpenSDK/KakaoOpenSDK.h&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_kakaoLogin/15.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;AppDelegate.swift 파일에 들어가서 Kakao관련 내용을 추가한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&amp;gt; Bool {
        // Override point for customization after application launch.

        //firebase
        FIRApp.configure()


        //facebook
        return FBSDKApplicationDelegate.sharedInstance().application(application, didFinishLaunchingWithOptions:launchOptions)
    }
    func application(application: UIApplication, openURL url: NSURL, sourceApplication: String?, annotation: AnyObject) -&amp;gt; Bool {
        //kakao
        if KOSession.isKakaoAccountLoginCallback(url) {
            return KOSession.handleOpenURL(url)
        }
        return FBSDKApplicationDelegate.sharedInstance().application(application, openURL: url, sourceApplication: sourceApplication, annotation: annotation)
    }

    func application(application: UIApplication, handleOpenURL url: NSURL) -&amp;gt; Bool {
        //kakao
        if KOSession.isKakaoAccountLoginCallback(url) {
            return KOSession.handleOpenURL(url)
        }
        return false
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_kakaoLogin/16.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 아까 만들었던 카카오 버튼 이벤트에 내용을 추가하는 것이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
let session: KOSession = KOSession.sharedSession();
        if session.isOpen() {
            session.close()
        }
        session.presentingViewController = self
        session.openWithCompletionHandler({ (error) -&amp;gt; Void in
            if error != nil{
                print(error.localizedDescription)
            }else if session.isOpen() == true{
                KOSessionTask.meTaskWithCompletionHandler({ (profile , error) -&amp;gt; Void in
                    if profile != nil{
                        dispatch_async(dispatch_get_main_queue(), { () -&amp;gt; Void in
                            let kakao : KOUser = profile as! KOUser
                            //String(kakao.ID)
                            if let value = kakao.properties[&quot;nickname&quot;] as? String{
                                self.textView.text = &quot;nickname : \(value)\r\n&quot;
                            }
                            if let value = kakao.properties[&quot;profile_image&quot;] as? String{
                                self.imageView.image = UIImage(data: NSData(contentsOfURL: NSURL(string: value)!)!)
                            }
                            if let value = kakao.properties[&quot;thumbnail_image&quot;] as? String{
                                self.image2View.image = UIImage(data: NSData(contentsOfURL: NSURL(string: value)!)!)
                            }
                        })
                    }
                })
            }else{
                print(&quot;isNotOpen&quot;)
            }
        })

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;물론 더 많은 것을 쓸 수 있겠지만 그것들은 자기가 연구해보길…. 카카오 개발자센터에서 쉽게 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_kakaoLogin/17.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이미지등등을 외부에서 가져오려면 info.plist파일에 Security라는걸 추가해줘야 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&amp;lt;key&amp;gt;NSAppTransportSecurity&amp;lt;/key&amp;gt;
    &amp;lt;dict&amp;gt;
        &amp;lt;key&amp;gt;NSAllowsArbitraryLoads&amp;lt;/key&amp;gt;
        &amp;lt;true/&amp;gt;
    &amp;lt;/dict&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_kakaoLogin/18.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;짜잔!!!!! 완성&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;나는 info.plist에서 페이스북 한개는 잘되고 카카오톡 한개는 잘됬는데 둘이 연동하는법 때문에 좀 많이 어려웠었다.
그래서 카카오톡 추가하기 예제만 하려고 했지만 둘이 연동해서 같이 하는게 더 좋을거라는 생각 때문에 이전에 만들었었던
예제에서 부터 시작을 했다.&lt;/p&gt;

&lt;p&gt;아!!!&lt;/p&gt;

&lt;p&gt;그리고 페북, 카톡 로그인하기 할 때 아이디값(회원의 고유값) 은&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
페이스북 = user?.uid
카카오톡 = String(kakao.ID)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;을 쓰면 된다.&lt;/p&gt;</content><author><name></name></author><summary type="html">해당 소스는 깃허브페이지 github 에 올려져 있다.</summary></entry><entry><title type="html">Swift Firebase Facebook Login</title><link href="http://localhost:4000/swift/2016/09/07/swiftFBLogin/" rel="alternate" type="text/html" title="Swift Firebase Facebook Login" /><published>2016-09-07T21:30:00+01:00</published><updated>2016-09-07T21:30:00+01:00</updated><id>http://localhost:4000/swift/2016/09/07/swiftFBLogin</id><content type="html" xml:base="http://localhost:4000/swift/2016/09/07/swiftFBLogin/">&lt;p&gt;해당 소스는 깃허브페이지
&lt;a href=&quot;https://github.com/pikachu987/TIL/tree/master/swift2/LoginF&quot;&gt;github&lt;/a&gt;
에 올려져 있다.&lt;/p&gt;

&lt;p&gt;여기서는 Swift2로 Facebook 로그인 하는 과정과 예제를 살펴보겠다.&lt;/p&gt;

&lt;p&gt;가장 먼저 앱을 만들어 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_fbLogin/01.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_fbLogin/02.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
그리고 &lt;a href=&quot;http://developer.facebook.com&quot;&gt;developer.facebook&lt;/a&gt;에 들어가서 새 앱을 만든다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_fbLogin/03.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
IOS를 클릭!! 한다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_fbLogin/04.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Facebook 앱 네임을 넣는데 FB나 Facebook 관련 글자는 써지지가 않는다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_fbLogin/05.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
연락처이메일과 카테고리를 선택후 앱 ID를 만든다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_fbLogin/06.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_fbLogin/07.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_fbLogin/08.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
이 값들은 Swift앱 내의 info.plist파일 안에 넣어야 하는내용이므로 어딘가에 복사해두기로 한다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_fbLogin/09.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
하단으로 내려가면 Swift APP Bundle적는 부분이 있다. 자신이 만든 앱 Bundle와 맞춰서 적으면 된다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_fbLogin/10.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;a href=&quot;https://console.firebase.google.com/&quot;&gt;console.firebase&lt;/a&gt;에 들어가서 새 프로젝트를 만든다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_fbLogin/11.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_fbLogin/12.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
번들을 적는다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_fbLogin/14.png&quot; alt=&quot;Alt text&quot; /&gt;
다시 페이스북으로 간 다음 대시보드에서 앱 ID와 앱 시크릿코드를 확인한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_fbLogin/13.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;파이어베이스 Auth에 들어가서 로그인 방법을 클릭한다. 그러면 페이스북이 두둥! 있을것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_fbLogin/15.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;페이스북을 사용설정한 뒤 페이스북에서 확인한 앱ID와 앱 시크릿코드를 확인한 다음 OAuth 리디렉션 URI를 복사한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_fbLogin/16.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 마지막부분이다! 페이스북으로 가서 +제품추가를 클릭한 뒤&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_fbLogin/17.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Facebook 로그인 시작하기 버튼을 누른다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_fbLogin/18.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 복사해두었던 리디렉션 URI를 붙이고 하단에 버튼을 누른다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_fbLogin/19.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;파이어베이스에 들어가서 GoogleService-info.plist파일을다운 받고 해당 파일을 앱 폴더안 info.plist옆에 넣는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_fbLogin/21.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 앱 Podfile에&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;use_frameworks!
pod 'Firebase'
pod 'Firebase/Core'
pod 'Firebase/Auth'
pod 'FBSDKCoreKit'
pod 'FBSDKShareKit'
pod 'FBSDKLoginKit'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;을 넣고 pod install 을 한다.&lt;/p&gt;

&lt;p&gt;해당 부분은 &lt;a href=&quot;https://cocoapods.org/&quot;&gt;cocoapods&lt;/a&gt; 참조&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_fbLogin/20.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 앱을 실행 후 Info.plist파일 - 소스보기를 누른다. 아까 페이스북에서 봤던 코드 붙여넣기!!!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;key&amp;gt;CFBundleURLTypes&amp;lt;/key&amp;gt;
    &amp;lt;array&amp;gt;
        &amp;lt;dict&amp;gt;
            &amp;lt;key&amp;gt;CFBundleURLSchemes&amp;lt;/key&amp;gt;
            &amp;lt;array&amp;gt;
                &amp;lt;string&amp;gt;fb{ID}&amp;lt;/string&amp;gt;
            &amp;lt;/array&amp;gt;
        &amp;lt;/dict&amp;gt;
    &amp;lt;/array&amp;gt;
    &amp;lt;key&amp;gt;FacebookAppID&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;{ID}&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;FacebookDisplayName&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;LoginF&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;LSApplicationQueriesSchemes&amp;lt;/key&amp;gt;
    &amp;lt;array&amp;gt;
        &amp;lt;string&amp;gt;fbapi&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;fb-messenger-api&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;fbauth2&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;fbshareextension&amp;lt;/string&amp;gt;
    &amp;lt;/array&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_fbLogin/22.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;앱 딜리게이트로 가서 간단하게&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import UIKit
import Firebase
import FirebaseAuth
import FBSDKCoreKit
import FBSDKLoginKit
import FBSDKShareKit

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {
    var window: UIWindow?
    func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&amp;gt; Bool {
        // Override point for customization after application launch.

        //firebase
        FIRApp.configure()

        //facebook
        return FBSDKApplicationDelegate.sharedInstance().application(application, didFinishLaunchingWithOptions:launchOptions)
    }
    func application(application: UIApplication, openURL url: NSURL, sourceApplication: String?, annotation: AnyObject) -&amp;gt; Bool {
        return FBSDKApplicationDelegate.sharedInstance().application(application, openURL: url, sourceApplication: sourceApplication, annotation: annotation)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 코드를 넣어주자!!!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_fbLogin/23.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 스토리보드에서 UIButton을 하나 만들고 페이스북과 비슷한 background를 넣고 png이미지 파일을 구해서 넣어주자(디자인은 상관없슴! 사실 아무 버튼만 넣으면 상관 x)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_fbLogin/24.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;UIViewController에서 button에 action을 받자. 그리고 코드를 넣어준다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let login = FBSDKLoginManager()
        login.logInWithReadPermissions([&quot;public_profile&quot;], fromViewController: self, handler: { (result, error) in
            if error != nil{
                print(&quot;Facebook login failed. Error \(error)&quot;)
            } else if result.isCancelled {
                print(&quot;Facebook login isCancelled. result \(result.token)&quot;)
            } else {
                let credential = FIRFacebookAuthProvider.credentialWithAccessToken(FBSDKAccessToken.currentAccessToken().tokenString)
                FIRAuth.auth()?.signInWithCredential(credential) { (user, error) in
                    if error != nil {
                        print(&quot;Login failed. \(error)&quot;)
                    } else {
                        if let value = user?.email{
                            //
                        }
                        if let value = user?.displayName{
                            //
                        }
                        if let value = user?.uid{
                            //
                        }
                        if let value = user?.photoURL{
                            //self.imageView.image = UIImage(data: NSData(contentsOfURL: value)!)
                        }
                    }
                }
            }
        })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;엄청 간단하다…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/2016/09/swift_fbLogin/25.jpeg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;실행을 시키면 잘 나오는것을 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;처음에 이걸 왜 이리 힘들었는지….&lt;/p&gt;

&lt;p&gt;나는 구글로그인, 카톡로그인을 구현한 다음 페북로그인을 계속 넣으려고 했지만 실패….&lt;/p&gt;

&lt;p&gt;구글 로그인을 빼니까 카톡, 페북로그인이 다 잘됨(아직 왜인지 모른다…)&lt;/p&gt;</content><author><name></name></author><summary type="html">해당 소스는 깃허브페이지 github 에 올려져 있다.</summary></entry></feed>