<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technology</title>
    <description>pikachu987 Technology</description>
    <link>//</link>
    <atom:link href="//feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>javaScript closer</title>
        <description>&lt;p&gt;closer란?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;클로저는 독립적인 (자유) 변수를 가리키는 함수이다. 또는, 클로저 안에 정의된 함수는 만들어진 환경을 ‘기억한다’.
&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Closures&quot;&gt;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Closures&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;일단 우리가 기본적으로 쓰는 function 에 대해서 만들어보자&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function add(x, y){
 return x+y;
}

add(3, 4); //7
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이렇게 쓴다.&lt;/p&gt;

&lt;p&gt;그러면 콜백함수에 대해서 알아보자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function callbackTest(callback){
 if(callback != undefined){
   callback();
 }
}

callbackTest(function(){
  console.log(&#39;callback success!&#39;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;많이 사용하는 문법이다. 예를 들어 jQuery의 click같은..&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(&#39;#btn_01&#39;).click(function(){
  //click
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;그리고 함수를 리턴하는 방식도 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
function returnFunc(a){
 return function(b){
   alert(a+b);
 }
}
returnFunc(3)(4); //7

var rf = returnFunc(3);
rf(5); //8

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;그럼 이제 클로저로 들어가 보겠다.
클로저는 함수 내부에 지역변수가 있고 지역변수가 값을 기억하고 있는 것이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function outerFunc(){
    var a= 0;
    return {
        innerFunc1 : function(){
            a+=1;
            console.log(&quot;a :&quot;+a);
        },
        innerFunc2 : function(){
            a+=2;
            console.log(&quot;a :&quot;+a);
        }
    };
}
var out = outerFunc();
out.innerFunc1();
out.innerFunc2();
out.innerFunc2();
out.innerFunc1();

//실행결과
/*
a = 1
a = 3
a = 5
a = 6
*/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
function outerFunc(){
    var a= 0;
    return {
        innerFunc1 : function(){
            a+=1;
            console.log(&quot;a :&quot;+a);
        },
        innerFunc2 : function(){
            a+=2;
            console.log(&quot;a :&quot;+a);
        }
    };
}
var out = outerFunc();
var out2 = outerFunc();
out.innerFunc1();
out.innerFunc2();
out2.innerFunc1();
out2.innerFunc2();
//실행결과
/*
a = 1
a = 3
a = 1
a = 3
*/

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://www.nextree.co.kr/p7363/&quot;&gt;예제 참고&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;변수는 지역변수, 전역변수로 나뉘는데 지역변수는 함수안에서 선언해서 함수가 끝나면 지역변수도 사라지기 때문에 지역변수를 다시 호출할 수 없게 된다.
그런데 script에서는 사라진 지역변수를 사용할 수 있다.
이런 것을 클로저라고 부른다. 그리고 지금은 새벽 2시 30분이다. 너무 피곤하다.&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Sep 2016 21:20:00 +0900</pubDate>
        <link>//javascript/2016/09/23/javascript_closer/</link>
        <guid isPermaLink="true">//javascript/2016/09/23/javascript_closer/</guid>
      </item>
    
      <item>
        <title>javaScript prototype</title>
        <description>&lt;p&gt;prototype란?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;프로토타입(prototype)은 원래의 형태 또는 전형적인 예, 기초 또는 표준이다. 시제품이 나오기 전의 제품의 원형으로 개발검증과 양산 검증을 거쳐야 시제품이 될 수 있다. 프로토타입은 ‘정보시스템의 미완성 버전 또는 중요한 기능들이 포함되어 있는 시스템의 초기모델’이다. 이 프로토타입은 사용자의 모든 요구사항이 정확하게 반영할 때까지 계속해서 개선/보완 된다. 실제로 많은 애플리케이션들이 지속적인 프로토타입의 확장과 보강을 통해 최종 설계가 승인된다.
프로토타입이라는 낱말은 원초적 형태라는 뜻의 그리스어 낱말 πρωτότυπον (프로토타이폰)에서 왔다. 이는 원초적이라는 뜻의 πρωτότυπος (프로토타이포스)의 중간음에서 온 것으로, 더 들어가서 “최초의”라는 뜻의 πρῶτος(프로토스)와 “인상”이라는 뜻의 τύπος(타이포스)에서 비롯된 것이다.[1]
&lt;a href=&quot;https://ko.wikipedia.org/wiki/프로토타입&quot;&gt;https://ko.wikipedia.org/wiki/프로토타입&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;라고 설명되어 있는데 간단히 설명하자면 객체의 모태가되는 형태(Arrays, String, Number …)를 프로토타입이라고 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;
  var text = new String();
  console.log(text);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;간단하게 이러한 코드를 작성하고 크롬 console로 열어보면&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/script_prototype/1.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기서 &lt;code class=&quot;highlighter-rouge&quot;&gt;__proto__&lt;/code&gt; 가 해당 객체를 만들어내기 위해 사용된 객체 원형에 대해 숨겨진 연결이라고 한다.&lt;/p&gt;

&lt;p&gt;스크립트의 객체는 생성과 동시에 Prototype Object라는 새로운 객체를 clone하여 만든다.
프로토타입이 객체를 만들어내기 위한 원형이면 Prototype Object 는 자신을 원형으로 만들어질 다른 객체가 참조할 프로토타입이 된다.
위에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;__proto__&lt;/code&gt; 라는 prototype 에 대한 link는 상위에서 물려받은 객체의 프로토타입에 대한 정보이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&amp;lt;script&amp;gt;
var A = function () { };
A.prototype.x = function () {
    console.log(&#39;prototype&#39;);
};

A.x();
//Uncaught TypeError: A.x is not a function

var B = new A();
B.x();
//prototype
&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A는 아직 객체로 만들어지지 않은 원형인 상태이고 B는 A를 물려받은 객체이다. 그래서 저런 결과가 나오게 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
B.prototype.y = function(){
  console.log(&#39;prototype2&#39;);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;만약 위의 코드에 이코드를 추가하면 어떻게 될까?
정답은 Uncaught TypeError: Cannot set property ‘y’ of undefined 이런 에러가 나게 된다.
아까 말했듯이 객체 원형에 대해 숨겨진 연결이라고 했는데 이미 B는 객체 원형이 아니라 prototype를 쓸 수 없게 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;console.log(B);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;B를 console.log로 찍어 보면&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/script_prototype/2.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__proto__&lt;/code&gt; 안에 x라는 function이 있다. 그래서 B에서는 x라는 프로토타입을 쓸 수 있게 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;화살표를 계속 누르지 말자… 스크립트란놈은 양파같은 놈이라서 까도까도 계속 나온다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;그렇다면 이걸 어떻게 활용을 할까???&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String.prototype.width = function(font) {
	var f = font || &#39;10px arial&#39;, o = $(&#39;&amp;lt;div&amp;gt;&#39;+this+&#39;&amp;lt;/div&amp;gt;&#39;).css({&#39;position&#39;: &#39;absolute&#39;, &#39;float&#39;: &#39;left&#39;, &#39;white-space&#39;: &#39;nowrap&#39;, &#39;visibility&#39;: &#39;hidden&#39;, &#39;font&#39;: f}).appendTo($(&#39;body&#39;)),w = o.width();
	o.remove();
	return w;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;해당 String에 대해 font를 적용한 실제 길이를 리턴하게 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&amp;lt;div&amp;gt;Hello&amp;lt;/div&amp;gt;
$(&#39;#&#39;)
var str = &#39;Hello&#39;;
console.log(str.width());

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이 width를 활용하는 간단한 예제를 보겠다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/script_prototype/3.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&amp;lt;style&amp;gt;
  .widthTest&amp;gt;div{
    display: inline-block; float: left; width: 240px; background-color: #efefef;
    border-radius: 10px; padding-left: 5px; padding-right: 5px;
    height: 100px; line-height: 100px; vertical-align: middle;
  }
  .widthTest&amp;gt;div:last-child{margin-left: 20px;}
&amp;lt;/style&amp;gt;
&amp;lt;div class=&quot;widthTest&quot;&amp;gt;
  &amp;lt;div&amp;gt;동해물과 백두산이 마르고 닳도록 하느님이 보우하사 우리나라 만세&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;가나다라마바사&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
String.prototype.width = function(font) {
  var f = font || &#39;10px arial&#39;, o = $(&#39;&amp;lt;div&amp;gt;&#39;+this+&#39;&amp;lt;/div&amp;gt;&#39;).css({&#39;position&#39;: &#39;absolute&#39;, &#39;float&#39;: &#39;left&#39;, &#39;white-space&#39;: &#39;nowrap&#39;, &#39;visibility&#39;: &#39;hidden&#39;, &#39;font&#39;: f}).appendTo($(&#39;body&#39;)),w = o.width();
  o.remove();
  return w;
};



$(&#39;.widthTest&amp;gt;div&#39;).each(function(){


  var $this = $(this);
  if($this.width() &amp;lt; $this.text().width($this.css(&#39;font&#39;))){
    $this.css(&#39;line-height&#39;, Number($this.css(&#39;line-height&#39;).replace(&#39;px&#39;,&#39;&#39;))/2+&#39;px&#39;);












    // var lineHeight = $this.css(&#39;line-height&#39;);
    // var lineHeightReplace = lineHeight.replace(&#39;px&#39;,&#39;&#39;);
    // $this.css(&#39;line-height&#39;, Number(lineHeightReplace/2)+&#39;px&#39;);
  }



});




&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/script_prototype/4.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이것 말고도&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Array.prototype.remove = function(idx){
	var temp = [];
	var i = this.length;
	while(i &amp;gt; idx){
		var kk = this.pop();
		temp.push(kk);
		i--;
	}
	for(var j=temp.length - 2; j&amp;gt;=0; j--){
		this.push(temp[j]);
	}
};
String.prototype.replaceAll = function(find,replace){
	if(this === null || this === &#39;&#39;) return &#39;&#39;;
	return this.replace( new RegExp( find, &#39;g&#39; ), replace );
};
String.prototype.setPriceComma = function() {
	var n = this;
	n += &#39;&#39;;
	var reg = /(^[+-]?\d+)(\d{3})/;
	while (reg.test(n)){n = n.replace(reg, &#39;$1&#39; + &#39;,&#39; + &#39;$2&#39;);}
	return n;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;여러가지가 있고 여러가지를 만들수 있다.&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Sep 2016 21:10:00 +0900</pubDate>
        <link>//javascript/2016/09/23/javascript_prototype/</link>
        <guid isPermaLink="true">//javascript/2016/09/23/javascript_prototype/</guid>
      </item>
    
      <item>
        <title>Swift Adobe Image Editor</title>
        <description>&lt;p&gt;해당 소스는 깃허브페이지
&lt;a href=&quot;https://github.com/pikachu987/TIL/tree/master/swift2/AdobeImageEditor&quot;&gt;github&lt;/a&gt;
에 올려져 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/embed/8VzEs-gEeEQ&quot;&gt;동영상보기&lt;/a&gt;
&lt;a href=&quot;https://www.youtube.com/embed/8VzEs-gEeEQ&quot; title=&quot;editor&quot;&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/30.png&quot; alt=&quot;동영상 클릭&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/1.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우리가 일단 Adobe 이미지 에디터를 사용려면 당연히 Adobe 개발자 사이트 &lt;a href=&quot;https://creativesdk.adobe.com/downloads.html&quot;&gt;adobe&lt;/a&gt; 에 회원가입을 해야 한다.
상단에 보면 Downloads와 My Apps에만 들어갈 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/2.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;일단 &lt;a href=&quot;https://creativesdk.adobe.com/downloads.html&quot;&gt;Downloads&lt;/a&gt; 에 들어가서 STATIC FRAMEWORKS(DEPRECATED)를 클릭해서 다운받자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/3.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다운받으면 framework가 엄청 많다…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/4.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우리한테 필요한 것은 이 4개이다. 그런데 .bundle는 어디 있을까?
정답은 .framework를 들어가면 .bundle이 있을것이다. 복붙해서 이렇게 4개를 만들자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/5.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;해당 IOS앱 폴더에 해당 4개를 넣자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/6.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 4개를 드래그해서 xCode상에 넣자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/7.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;TARGETS에서 General에서 Linked Frameworks and Libraies 에 보면 이런식으로 4개가 생겼을 것이다.
여기서 +를 눌러서 추가한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/8.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이런식으로 하나씩하나씩 추가를 해서&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/9.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 나오도록 추가를 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/10.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 Bulid Settings에 들어가서 Linking를 찾는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/11.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Other Linker Flags에 이런식으로 적어준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/12.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;브릿지헤더에서 이런식으로 적어준다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//
//  Use this file to import your target&#39;s public headers that you would like to expose to Swift.
//

#ifndef AdobeCreative_Bridging_Header_h
#define AdobeCreative_Bridging_Header_h

#import &amp;lt;AdobeCreativeSDKCore/AdobeCreativeSDKCore.h&amp;gt;
#import &amp;lt;AdobeCreativeSDKImage/AdobeCreativeSDKImage.h&amp;gt;

#endif /* AdobeCreative_Bridging_Header_h */


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/13.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://creativesdk.adobe.com/myapps.html&quot;&gt;MyApps&lt;/a&gt; 에 들어가서 새로운 앱을 만든다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/14.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기서 중요한건 SECRET를 꼭 복사해놓자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/15.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;AppDelegate.swift에 이런식으로 ID와 SECRET를 한줄 추가한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//adobe
        AdobeUXAuthManager.sharedManager().setAuthenticationParametersWithClientID(&quot;ea2bb582861f48d8970f0155a54fee22&quot;, withClientSecret: &quot;0ce233b2-3f4a-4851-8307-934930cbcc1e&quot;)

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/16.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(하단부분에 총 소스를 올려두겠다.)&lt;/p&gt;

&lt;p&gt;UIViewController에&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
UIImagePickerControllerDelegate, UINavigationControllerDelegate, AdobeUXImageEditorViewControllerDelegate

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;를 추가하자.&lt;/p&gt;

&lt;p&gt;UIImagePickerControllerDelegate와 UINavigationControllerDelegate는 카메라, 사진 선택하는데 필요한 딜리게이트이고
AdobeUXImageEditorViewControllerDelegate는 AdobeImageEditor하는데 필요한 딜리게이트이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/17.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;카메라, 사진에 필요한 Picker를 변수로 지정.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/18.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;picker설정을 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/19.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;버튼이벤트를 준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/20.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;picker 딜리게이트 관련 메소드이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/21.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기는 adobe 관련 설정을 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/22.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;adobe에서 완성된 이미지를 받아온다.&lt;/p&gt;

&lt;p&gt;UIViewController 소스이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
//
//  ViewController.swift
//  AdobeImageEditor
//
//  Created by guanho on 2016. 9. 7..
//  Copyright © 2016년 guanho. All rights reserved.
//

import UIKit

class ViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate, AdobeUXImageEditorViewControllerDelegate {



    //이미지 피커
    let picker = UIImagePickerController()

    @IBOutlet var mainView: UIView!
    @IBOutlet var imageView: UIImageView!
    let eatImage = UIImage(named: &quot;eat.jpg&quot;)




    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
        picker.allowsEditing = true
        picker.delegate = self
    }



    @IBAction func btnAction(sender: AnyObject) {
        let alert = UIAlertController(title:&quot;&quot;,message:&quot;이미지 선택&quot;, preferredStyle: .ActionSheet)
        alert.addAction(UIAlertAction(title:&quot;카메라&quot;,style: .Default,handler:{(alert) in
            self.imageCallback(UIImagePickerControllerSourceType.Camera)
        }))
        alert.addAction(UIAlertAction(title:&quot;사진첩&quot;,style: .Default,handler:{(alert) in
            self.imageCallback(UIImagePickerControllerSourceType.PhotoLibrary)
        }))
        alert.addAction(UIAlertAction(title:&quot;치킨이미지&quot;,style: .Default,handler:{(alert) in
            self.photoEditorStart(self.eatImage)
        }))
        self.presentViewController(alert, animated: false, completion: {(_) in })
    }



    //이미지 콜백
    func imageCallback(sourceType : UIImagePickerControllerSourceType){
        picker.sourceType = sourceType
        presentViewController(picker, animated: false, completion: nil)
    }
    //이미지 끝
    func imagePickerControllerDidCancel(picker: UIImagePickerController) {
        dismissViewControllerAnimated(true, completion: nil)
    }
    //이미지 받아오기
    func imagePickerController(picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : AnyObject]) {
        var newImage: UIImage
        if let possibleImage = info[&quot;UIImagePickerControllerEditedImage&quot;] as? UIImage {
            newImage = possibleImage
        } else if let possibleImage = info[&quot;UIImagePickerControllerOriginalImage&quot;] as? UIImage {
            newImage = possibleImage
        } else {
            return
        }
        dismissViewControllerAnimated(true, completion: {(_) in
            self.photoEditorStart(newImage)
        })
    }



    //이미지 에디터 시작
    func photoEditorStart(image: UIImage!){
        dispatch_async(dispatch_get_main_queue()) {
            //AdobeImageEditor 설정
            AdobeImageEditorCustomization.setToolOrder([
                kAdobeImageEditorEnhance,        /* Enhance */
                kAdobeImageEditorEffects,        /* Effects */
                kAdobeImageEditorStickers,       /* Stickers */
                kAdobeImageEditorOrientation,    /* Orientation */
                kAdobeImageEditorCrop,           /* Crop */
                kAdobeImageEditorColorAdjust,    /* Color */
                kAdobeImageEditorLightingAdjust, /* Lighting */
                kAdobeImageEditorSharpness,      /* Sharpness */
                kAdobeImageEditorDraw,           /* Draw */
                kAdobeImageEditorText,           /* Text */
                kAdobeImageEditorRedeye,         /* Redeye */
                kAdobeImageEditorWhiten,         /* Whiten */
                kAdobeImageEditorBlemish,        /* Blemish */
                kAdobeImageEditorBlur,           /* Blur */
                kAdobeImageEditorMeme,           /* Meme */
                kAdobeImageEditorFrames,         /* Frames */
                kAdobeImageEditorFocus,          /* TiltShift */
                kAdobeImageEditorSplash,         /* ColorSplash */
                kAdobeImageEditorOverlay,        /* Overlay */
                kAdobeImageEditorVignette        /* Vignette */
                ])

            let adobeViewCtr = AdobeUXImageEditorViewController(image: image)
            adobeViewCtr.delegate = self
            self.presentViewController(adobeViewCtr, animated: true) { () -&amp;gt; Void in

            }
        }
    }



    //AdobeCreativeSDK 이미지 받아옴
    func photoEditor(editor: AdobeUXImageEditorViewController, finishedWithImage image: UIImage?) {
        editor.dismissViewControllerAnimated(true, completion: {(_) in
            let imageWidth = self.mainView.frame.width
            let imageHeight = self.mainView.frame.height

            let rateWidth = (image?.size.width)!/imageWidth
            let rateHeight = (image?.size.height)!/imageHeight

            var widthValue : CGFloat! = imageWidth
            var heightValue : CGFloat! = imageHeight

            if rateWidth &amp;gt; rateHeight{
                heightValue = widthValue * (image?.size.height)! / (image?.size.width)!
            }else{
                widthValue = heightValue * (image?.size.width)! / (image?.size.height)!
            }
            self.imageView.frame = CGRect(x: (imageWidth-widthValue)/2, y: (imageHeight-heightValue)/2, width: widthValue, height: heightValue)
            self.imageView.image = image
        })
    }


    //AdobeCreativeSDK 캔슬
    func photoEditorCanceled(editor: AdobeUXImageEditorViewController) {
        editor.dismissViewControllerAnimated(true, completion: nil)
    }




    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
}



&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;미리보기 이미지!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/23.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;첫 화면이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/24.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;클릭을 하면 선택을 할수있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/25.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이미지 에디터 화면이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/26.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;크롭화면이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/27.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;방향전환 화면이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/28.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리기 화면이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pikachu987.github.io/tec/images/swift_adobeEditor/29.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;완료후 받아온 이미지이다.&lt;/p&gt;

&lt;p&gt;엄청 쉽게 고급기능을 쓸 수 있게 해주는 Adobe이다. 너무 좋은듯하다.&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Sep 2016 17:30:00 +0900</pubDate>
        <link>//swift/2016/09/12/swiftAdobeImageEditro/</link>
        <guid isPermaLink="true">//swift/2016/09/12/swiftAdobeImageEditro/</guid>
      </item>
    
      <item>
        <title>Swift Kakao Login</title>
        <description>&lt;p&gt;해당 소스는 깃허브페이지
&lt;a href=&quot;https://github.com/pikachu987/TIL/tree/master/swift2/LoginFK&quot;&gt;github&lt;/a&gt;
에 올려져 있다.&lt;/p&gt;

&lt;p&gt;여기서는 앞서했던 Swift2로 Facebook 로그인 하는 예제에서 카카오 로그인을 추가하는 예제를 살펴보겠다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_kakaoLogin/01.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;카카오톡 로그인버튼을 한개 만들어주자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_kakaoLogin/02.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;해당 버튼에 이벤트를 추가&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_kakaoLogin/03.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.kakao.com/&quot;&gt;developer.kakao&lt;/a&gt; 에 들어가서 새로운 앱을 만들자&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_kakaoLogin/04.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아주아주 간단하개 만들어졌다. 여기서 플랫폼 추가를 누르자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_kakaoLogin/05.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;번들을 넣고,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_kakaoLogin/06.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;사용자관리에 들어가서 사용 ON을 누른 다음 하단의 텍스트등등을 기록한다. 그리고 저장을 누르자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_kakaoLogin/07.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;카카오 SDK를 다운받으면 이런 구조로 되어 있다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_kakaoLogin/08.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;framework를 자신의 앱폴더로 이동한 다음 끌어서 앱에 추가한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_kakaoLogin/19.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;info.plist 를 마우스 우 클릭해서 Open As &amp;gt; Source Code를 누른다.
그리고 기존 페이스북설정에 카카오톡 설정을 추가한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&amp;lt;key&amp;gt;CFBundleURLTypes&amp;lt;/key&amp;gt;
    &amp;lt;array&amp;gt;
        &amp;lt;dict&amp;gt;
            &amp;lt;key&amp;gt;CFBundleURLSchemes&amp;lt;/key&amp;gt;
            &amp;lt;array&amp;gt;
                &amp;lt;string&amp;gt;fb1607177109583285&amp;lt;/string&amp;gt;
            &amp;lt;/array&amp;gt;
        &amp;lt;/dict&amp;gt;
        &amp;lt;dict&amp;gt;
            &amp;lt;key&amp;gt;CFBundleTypeRole&amp;lt;/key&amp;gt;
            &amp;lt;string&amp;gt;Editor&amp;lt;/string&amp;gt;
            &amp;lt;key&amp;gt;CFBundleURLSchemes&amp;lt;/key&amp;gt;
            &amp;lt;array&amp;gt;
                &amp;lt;string&amp;gt;kakao8e8ab69c7b01eaeebce7d7bc0afc2896&amp;lt;/string&amp;gt;
            &amp;lt;/array&amp;gt;
        &amp;lt;/dict&amp;gt;
    &amp;lt;/array&amp;gt;
    &amp;lt;key&amp;gt;FacebookAppID&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;1607177109583285&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;FacebookDisplayName&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;LoginF&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;KAKAO_APP_KEY&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;8e8ab69c7b01eaeebce7d7bc0afc2896&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;LSApplicationQueriesSchemes&amp;lt;/key&amp;gt;
    &amp;lt;array&amp;gt;
        &amp;lt;string&amp;gt;fbapi&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;fb-messenger-api&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;fbauth2&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;fbshareextension&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;kakao8e8ab69c7b01eaeebce7d7bc0afc2896&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;kakaokompassauth&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;storykompassauth&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;kakaolink&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;kakaotalk-4.5.0&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;kakaostory-2.9.0&amp;lt;/string&amp;gt;
    &amp;lt;/array&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_kakaoLogin/09.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기서는 브릿지 헤더(bridging header)를 만들어야 한다. 만드는 방법은 마우스 우클릭해서 New File를 누른다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;브릿지 헤더란?
Objective-C 코드를 Swift에서 import만 하면 쓸 수 있게 만들어주는 역활을 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_kakaoLogin/10.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 C++ File을 누르고&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_kakaoLogin/11.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아무렇게나 이름을 쓴다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_kakaoLogin/12.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;create-briding-header---&quot;&gt;이때 제일 중요한게 꼭 Create Briding Header를 눌러야 브릿지헤더가 생성이된다!!!!&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_kakaoLogin/13.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;생성이 된 모습이다. 나머지 aaa. 으로 시작되는 2개 파일은 삭제해준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_kakaoLogin/14.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;생성된 브릿지 헤더에 kakao SDK를 import 해준다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
#import &amp;lt;KakaoOpenSDK/KakaoOpenSDK.h&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_kakaoLogin/15.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;AppDelegate.swift 파일에 들어가서 Kakao관련 내용을 추가한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&amp;gt; Bool {
        // Override point for customization after application launch.

        //firebase
        FIRApp.configure()


        //facebook
        return FBSDKApplicationDelegate.sharedInstance().application(application, didFinishLaunchingWithOptions:launchOptions)
    }
    func application(application: UIApplication, openURL url: NSURL, sourceApplication: String?, annotation: AnyObject) -&amp;gt; Bool {
        //kakao
        if KOSession.isKakaoAccountLoginCallback(url) {
            return KOSession.handleOpenURL(url)
        }
        return FBSDKApplicationDelegate.sharedInstance().application(application, openURL: url, sourceApplication: sourceApplication, annotation: annotation)
    }

    func application(application: UIApplication, handleOpenURL url: NSURL) -&amp;gt; Bool {
        //kakao
        if KOSession.isKakaoAccountLoginCallback(url) {
            return KOSession.handleOpenURL(url)
        }
        return false
    }

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_kakaoLogin/16.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 아까 만들었던 카카오 버튼 이벤트에 내용을 추가하는 것이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
let session: KOSession = KOSession.sharedSession();
        if session.isOpen() {
            session.close()
        }
        session.presentingViewController = self
        session.openWithCompletionHandler({ (error) -&amp;gt; Void in
            if error != nil{
                print(error.localizedDescription)
            }else if session.isOpen() == true{
                KOSessionTask.meTaskWithCompletionHandler({ (profile , error) -&amp;gt; Void in
                    if profile != nil{
                        dispatch_async(dispatch_get_main_queue(), { () -&amp;gt; Void in
                            let kakao : KOUser = profile as! KOUser
                            //String(kakao.ID)
                            if let value = kakao.properties[&quot;nickname&quot;] as? String{
                                self.textView.text = &quot;nickname : \(value)\r\n&quot;
                            }
                            if let value = kakao.properties[&quot;profile_image&quot;] as? String{
                                self.imageView.image = UIImage(data: NSData(contentsOfURL: NSURL(string: value)!)!)
                            }
                            if let value = kakao.properties[&quot;thumbnail_image&quot;] as? String{
                                self.image2View.image = UIImage(data: NSData(contentsOfURL: NSURL(string: value)!)!)
                            }
                        })
                    }
                })
            }else{
                print(&quot;isNotOpen&quot;)
            }
        })

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;물론 더 많은 것을 쓸 수 있겠지만 그것들은 자기가 연구해보길…. 카카오 개발자센터에서 쉽게 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_kakaoLogin/17.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이미지등등을 외부에서 가져오려면 info.plist파일에 Security라는걸 추가해줘야 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&amp;lt;key&amp;gt;NSAppTransportSecurity&amp;lt;/key&amp;gt;
    &amp;lt;dict&amp;gt;
        &amp;lt;key&amp;gt;NSAllowsArbitraryLoads&amp;lt;/key&amp;gt;
        &amp;lt;true/&amp;gt;
    &amp;lt;/dict&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_kakaoLogin/18.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;짜잔!!!!! 완성&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;나는 info.plist에서 페이스북 한개는 잘되고 카카오톡 한개는 잘됬는데 둘이 연동하는법 때문에 좀 많이 어려웠었다.
그래서 카카오톡 추가하기 예제만 하려고 했지만 둘이 연동해서 같이 하는게 더 좋을거라는 생각 때문에 이전에 만들었었던
예제에서 부터 시작을 했다.&lt;/p&gt;

&lt;p&gt;아!!!&lt;/p&gt;

&lt;p&gt;그리고 페북, 카톡 로그인하기 할 때 아이디값(회원의 고유값) 은&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
페이스북 = user?.uid
카카오톡 = String(kakao.ID)

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;을 쓰면 된다.&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Sep 2016 17:30:00 +0900</pubDate>
        <link>//swift/2016/09/11/swiftKakaoLogin/</link>
        <guid isPermaLink="true">//swift/2016/09/11/swiftKakaoLogin/</guid>
      </item>
    
      <item>
        <title>Swift Firebase Facebook Login</title>
        <description>&lt;p&gt;해당 소스는 깃허브페이지
&lt;a href=&quot;https://github.com/pikachu987/TIL/tree/master/swift2/LoginF&quot;&gt;github&lt;/a&gt;
에 올려져 있다.&lt;/p&gt;

&lt;p&gt;여기서는 Swift2로 Facebook 로그인 하는 과정과 예제를 살펴보겠다.&lt;/p&gt;

&lt;p&gt;가장 먼저 앱을 만들어 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_fbLogin/01.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_fbLogin/02.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
그리고 &lt;a href=&quot;http://developer.facebook.com&quot;&gt;developer.facebook&lt;/a&gt;에 들어가서 새 앱을 만든다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_fbLogin/03.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
IOS를 클릭!! 한다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_fbLogin/04.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Facebook 앱 네임을 넣는데 FB나 Facebook 관련 글자는 써지지가 않는다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_fbLogin/05.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
연락처이메일과 카테고리를 선택후 앱 ID를 만든다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_fbLogin/06.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_fbLogin/07.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_fbLogin/08.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
이 값들은 Swift앱 내의 info.plist파일 안에 넣어야 하는내용이므로 어딘가에 복사해두기로 한다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_fbLogin/09.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
하단으로 내려가면 Swift APP Bundle적는 부분이 있다. 자신이 만든 앱 Bundle와 맞춰서 적으면 된다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_fbLogin/10.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;a href=&quot;https://console.firebase.google.com/&quot;&gt;console.firebase&lt;/a&gt;에 들어가서 새 프로젝트를 만든다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_fbLogin/11.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_fbLogin/12.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
번들을 적는다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_fbLogin/14.png&quot; alt=&quot;Alt text&quot; /&gt;
다시 페이스북으로 간 다음 대시보드에서 앱 ID와 앱 시크릿코드를 확인한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_fbLogin/13.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;파이어베이스 Auth에 들어가서 로그인 방법을 클릭한다. 그러면 페이스북이 두둥! 있을것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_fbLogin/15.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;페이스북을 사용설정한 뒤 페이스북에서 확인한 앱ID와 앱 시크릿코드를 확인한 다음 OAuth 리디렉션 URI를 복사한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_fbLogin/16.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 마지막부분이다! 페이스북으로 가서 +제품추가를 클릭한 뒤&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_fbLogin/17.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Facebook 로그인 시작하기 버튼을 누른다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_fbLogin/18.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 복사해두었던 리디렉션 URI를 붙이고 하단에 버튼을 누른다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_fbLogin/19.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;파이어베이스에 들어가서 GoogleService-info.plist파일을다운 받고 해당 파일을 앱 폴더안 info.plist옆에 넣는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_fbLogin/21.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 앱 Podfile에&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;use_frameworks!
pod &#39;Firebase&#39;
pod &#39;Firebase/Core&#39;
pod &#39;Firebase/Auth&#39;
pod &#39;FBSDKCoreKit&#39;
pod &#39;FBSDKShareKit&#39;
pod &#39;FBSDKLoginKit&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;을 넣고 pod install 을 한다.&lt;/p&gt;

&lt;p&gt;해당 부분은 &lt;a href=&quot;https://cocoapods.org/&quot;&gt;cocoapods&lt;/a&gt; 참조&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_fbLogin/20.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 앱을 실행 후 Info.plist파일 - 소스보기를 누른다. 아까 페이스북에서 봤던 코드 붙여넣기!!!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;key&amp;gt;CFBundleURLTypes&amp;lt;/key&amp;gt;
    &amp;lt;array&amp;gt;
        &amp;lt;dict&amp;gt;
            &amp;lt;key&amp;gt;CFBundleURLSchemes&amp;lt;/key&amp;gt;
            &amp;lt;array&amp;gt;
                &amp;lt;string&amp;gt;fb{ID}&amp;lt;/string&amp;gt;
            &amp;lt;/array&amp;gt;
        &amp;lt;/dict&amp;gt;
    &amp;lt;/array&amp;gt;
    &amp;lt;key&amp;gt;FacebookAppID&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;{ID}&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;FacebookDisplayName&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;LoginF&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;LSApplicationQueriesSchemes&amp;lt;/key&amp;gt;
    &amp;lt;array&amp;gt;
        &amp;lt;string&amp;gt;fbapi&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;fb-messenger-api&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;fbauth2&amp;lt;/string&amp;gt;
        &amp;lt;string&amp;gt;fbshareextension&amp;lt;/string&amp;gt;
    &amp;lt;/array&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_fbLogin/22.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;앱 딜리게이트로 가서 간단하게&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import UIKit
import Firebase
import FirebaseAuth
import FBSDKCoreKit
import FBSDKLoginKit
import FBSDKShareKit

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {
    var window: UIWindow?
    func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&amp;gt; Bool {
        // Override point for customization after application launch.

        //firebase
        FIRApp.configure()

        //facebook
        return FBSDKApplicationDelegate.sharedInstance().application(application, didFinishLaunchingWithOptions:launchOptions)
    }
    func application(application: UIApplication, openURL url: NSURL, sourceApplication: String?, annotation: AnyObject) -&amp;gt; Bool {
        return FBSDKApplicationDelegate.sharedInstance().application(application, openURL: url, sourceApplication: sourceApplication, annotation: annotation)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이렇게 코드를 넣어주자!!!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_fbLogin/23.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 스토리보드에서 UIButton을 하나 만들고 페이스북과 비슷한 background를 넣고 png이미지 파일을 구해서 넣어주자(디자인은 상관없슴! 사실 아무 버튼만 넣으면 상관 x)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_fbLogin/24.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;UIViewController에서 button에 action을 받자. 그리고 코드를 넣어준다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let login = FBSDKLoginManager()
        login.logInWithReadPermissions([&quot;public_profile&quot;], fromViewController: self, handler: { (result, error) in
            if error != nil{
                print(&quot;Facebook login failed. Error \(error)&quot;)
            } else if result.isCancelled {
                print(&quot;Facebook login isCancelled. result \(result.token)&quot;)
            } else {
                let credential = FIRFacebookAuthProvider.credentialWithAccessToken(FBSDKAccessToken.currentAccessToken().tokenString)
                FIRAuth.auth()?.signInWithCredential(credential) { (user, error) in
                    if error != nil {
                        print(&quot;Login failed. \(error)&quot;)
                    } else {
                        if let value = user?.email{
                            //
                        }
                        if let value = user?.displayName{
                            //
                        }
                        if let value = user?.uid{
                            //
                        }
                        if let value = user?.photoURL{
                            //self.imageView.image = UIImage(data: NSData(contentsOfURL: value)!)
                        }
                    }
                }
            }
        })
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;엄청 간단하다…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/tec/images/swift_fbLogin/25.jpeg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;실행을 시키면 잘 나오는것을 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;처음에 이걸 왜 이리 힘들었는지….&lt;/p&gt;

&lt;p&gt;나는 구글로그인, 카톡로그인을 구현한 다음 페북로그인을 계속 넣으려고 했지만 실패….&lt;/p&gt;

&lt;p&gt;구글 로그인을 빼니까 카톡, 페북로그인이 다 잘됨(아직 왜인지 모른다…)&lt;/p&gt;
</description>
        <pubDate>Thu, 08 Sep 2016 05:30:00 +0900</pubDate>
        <link>//swift/2016/09/08/swiftFBLogin/</link>
        <guid isPermaLink="true">//swift/2016/09/08/swiftFBLogin/</guid>
      </item>
    
      <item>
        <title>css animation</title>
        <description>&lt;p&gt;일단 애니메이션 예제들을 살펴보자.&lt;br /&gt;
&lt;a href=&quot;https://web-animations.github.io/web-animations-demos/&quot; target=&quot;_blank&quot;&gt;https://web-animations.github.io/web-animations-demos/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/tec/testFile/1/test.html&quot; target=&quot;_blank&quot;&gt;test1&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;animation-delay: 애니메이션이 언제 시작할지 ex)2s(2초후 시작)

animation-name: keyframes 이름

animation-duration: 한 싸이클의 애니메이션의 시간 ex)2s(2초동안)

animation-fill-mode: 애니메이션이 시작되기 전이나 끝나고 난 후 어떻게 적용될지 지정
* forwards; (마지막 키프레임에 지정된 값을 유지)
* backwards; (첫 번째 키프레임에 지정한 값으로 돌아감)

animation-timing-function: 중간 상태의 애니메이션을 어떻게 진행할지 지정
* ease; 시작과 종료를 부드럽게
* linear; 일정
* ease-in; 서서히 시작
* ease-out; 서서히 종료
* ease-in-out; 서서히 시작하여 서서히 종료
* cubic-bezier(1,.23,0,1.56); /* 배지어곡선 */

animation-iteration-count: 애니메이션이 몇반 반복될지 지정
* infinite; 무한반복

animation-direction: 애니메이션이 종료된 다음 어떤식으로 진행될지 지정
* nomal;(기본값, 애니메이션이 시작될 때마다 처음으로 설정됨)
* reverse;(반대로 진행)
* alternate;(순방향으로 진행한 후 역방향으로 진행)
* alternate-reverse;(역방향으로 진행한 후 순방향으로 진행)

animation-play-state: 애니메이션을 멈추가나 다시 시작
* running;
* paused;



@keyframes &amp;lt;name&amp;gt; {
  from{
  	margin-left: 0px;
  }

  to{
  	margin-left: 300px;
  }
}

@keyframes &amp;lt;name&amp;gt; {
  0% {
  	transform: rotate(0deg);
  }
  50% {
    transform: rotate(30deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/tec/testFile/1/t_translate.html&quot; target=&quot;_blank&quot;&gt;translate&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;/tec/testFile/1/t_scale.html&quot; target=&quot;_blank&quot;&gt;scale&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;/tec/testFile/1/t_rotate.html&quot; target=&quot;_blank&quot;&gt;rotate&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;/tec/testFile/1/t_skew.html&quot; target=&quot;_blank&quot;&gt;skew&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;/tec/testFile/1/t_matrix.html&quot; target=&quot;_blank&quot;&gt;matrix&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2D transform 메소드

translate(x, y) : 가로, 세로 방향으로 이동
- translateX(x)
- translateY(y)

scale(x, y) : 확대/축소 비율 지정
- scaleX(x)
- scaleY(y)

rotate(angle) : 객체를 회전시킴 (단위 - deg(degree))

skew(x-angle, y-angle) : 객체를 기울임 (단위 - deg)
- skewX(x-angle)
- skewY(y-angle)
/* 비표준 */

matrix(a, c, b, d, tx, ty) : 다 합침
/* a, b, c, d 로 transformation matrix 가 구성되며,
   ┌     ┐
   │ a b │
   │ c d │
   └     ┘
   tx, ty 는 이동되는 값이다.  */

c: scaleY
b: scaleX


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 30 Aug 2016 05:30:00 +0900</pubDate>
        <link>//css/2016/08/30/cssAnimation/</link>
        <guid isPermaLink="true">//css/2016/08/30/cssAnimation/</guid>
      </item>
    
  </channel>
</rss>
